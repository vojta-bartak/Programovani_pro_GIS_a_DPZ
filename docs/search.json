[
  {
    "objectID": "lessons/lesson_04.html",
    "href": "lessons/lesson_04.html",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "",
    "text": "Po absolvování této lekce budete umět:\n\nPoužívat porovnávací operátory (==, &lt;, &gt;, …)\nPoužívat logické operátory (and, or, not)\nPsát podmíněné příkazy (if, elif, else)\nPoužívat cyklus for s funkcí range()\nPoužívat cyklus while\nImplementovat algoritmus pro výpočet Fibonacciho posloupnosti a faktoriálu\n\nČasová dotace: 90 minut"
  },
  {
    "objectID": "lessons/lesson_04.html#co-už-znáte",
    "href": "lessons/lesson_04.html#co-už-znáte",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "2.1 Co už znáte",
    "text": "2.1 Co už znáte\nZ minulé lekce už znáte datový typ bool (boolean) s hodnotami True a False:\nje_student = True\nje_zamestnanec = False\nDnes se naučíme, jak tyto hodnoty vytvářet porovnáváním a jak je používat pro rozhodování."
  },
  {
    "objectID": "lessons/lesson_04.html#porovnávací-operátory",
    "href": "lessons/lesson_04.html#porovnávací-operátory",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "2.2 Porovnávací operátory",
    "text": "2.2 Porovnávací operátory\nPorovnáním dvou hodnot získáme logickou hodnotu (True nebo False):\nvek = 18\n\nvek &gt;= 18  # True (je větší nebo rovno 18?)\nvek == 21  # False (je přesně 21?)\nvek &lt; 15   # False (je menší než 15?)\n\n2.2.1 Přehled operátorů:\n\n\n\nOperátor\nVýznam\nPříklad\nVýsledek\n\n\n\n\n==\nrovná se\n5 == 5\nTrue\n\n\n!=\nnerovná se\n5 != 3\nTrue\n\n\n&lt;\nmenší než\n3 &lt; 5\nTrue\n\n\n&gt;\nvětší než\n5 &gt; 3\nTrue\n\n\n&lt;=\nmenší nebo rovno\n5 &lt;= 5\nTrue\n\n\n&gt;=\nvětší nebo rovno\n6 &gt;= 5\nTrue\n\n\n\n\n\n\n\n\n\nWarningPozor na == vs. =\n\n\n\n\n= je přiřazení hodnoty: vek = 18\n== je porovnání: vek == 18\n\nToto je častá chyba začátečníků!"
  },
  {
    "objectID": "lessons/lesson_04.html#logické-operátory",
    "href": "lessons/lesson_04.html#logické-operátory",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "2.3 Logické operátory",
    "text": "2.3 Logické operátory\nPomocí logických operátorů můžeme kombinovat více podmínek:\n\n2.3.1 and (a zároveň)\nObě podmínky musí být pravdivé:\nvek = 25\n\nvek &gt;= 18 and vek &lt; 65  # True - je dospělý a není důchodce\n\n\n2.3.2 or (nebo)\nAlespoň jedna podmínka musí být pravdivá:\nteplota = -5\n\nteplota &lt; 0 or teplota &gt; 35  # True - extrémní počasí\n\n\n2.3.3 not (negace)\nObrací pravdivostní hodnotu:\nje_prazdny = False\n\nnot je_prazdny  # True - není prázdný\n\n\n2.3.4 Kombinace operátorů\nvek = 20\nma_ridicak = True\n\n# Může řídit auto?\nvek &gt;= 18 and ma_ridicak  # True\n\n# Je dítě nebo senior?\nvek &lt; 15 or vek &gt;= 65  # False"
  },
  {
    "objectID": "lessons/lesson_04.html#praktické-příklady",
    "href": "lessons/lesson_04.html#praktické-příklady",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "2.4 Praktické příklady",
    "text": "2.4 Praktické příklady\n# Kontrola rozsahu\ncislo = 50\ncislo &gt;= 0 and cislo &lt;= 100  # Je číslo mezi 0 a 100?\n\n# Kontrola sudosti\ncislo % 2 == 0  # Je číslo sudé?\n\n# Kontrola dělitelnosti\ncislo % 3 == 0  # Je číslo dělitelné třemi?"
  },
  {
    "objectID": "lessons/lesson_04.html#základní-if",
    "href": "lessons/lesson_04.html#základní-if",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "3.1 Základní if",
    "text": "3.1 Základní if\nPokud je podmínka pravdivá, provede se odsazený kód:\nvek = int(input(\"Váš věk: \"))\n\nif vek &gt;= 18:\n    print(\"Můžete řídit auto\")\n\n\n\n\n\n\nImportantOdsazování je POVINNÉ!\n\n\n\nPython používá odsazení (4 mezery = 1 tabulátor) k označení bloků kódu. Špatné odsazení způsobí chybu!\nif vek &gt;= 18:\nprint(\"Chyba!\")  # CHYBA - není odsazené!"
  },
  {
    "objectID": "lessons/lesson_04.html#if-else",
    "href": "lessons/lesson_04.html#if-else",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "3.2 if-else",
    "text": "3.2 if-else\nCo když chceme něco provést v případě, že podmínka není splněna?\nvek = int(input(\"Váš věk: \"))\n\nif vek &gt;= 18:\n    print(\"Dospělý\")\nelse:\n    print(\"Dítě\")"
  },
  {
    "objectID": "lessons/lesson_04.html#if-elif-else",
    "href": "lessons/lesson_04.html#if-elif-else",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "3.3 if-elif-else",
    "text": "3.3 if-elif-else\nPro více možností použijeme elif (else if):\nvek = int(input(\"Váš věk: \"))\n\nif vek &lt; 15:\n    print(\"Vstup zdarma\")\nelif vek &lt; 65:\n    print(\"Plné vstupné: 150 Kč\")\nelse:\n    print(\"Seniorské vstupné: 80 Kč\")\nJak to funguje: 1. Zkontroluje první podmínku (vek &lt; 15) 2. Pokud není splněna, zkontroluje další (vek &lt; 65) 3. Pokud žádná není splněna, provede else\n\n\n\n\n\n\nTipMůžete mít více elif\n\n\n\nif znamka == 1:\n    print(\"Výborně\")\nelif znamka == 2:\n    print(\"Chvalitebně\")\nelif znamka == 3:\n    print(\"Dobře\")\nelif znamka == 4:\n    print(\"Dostatečně\")\nelse:\n    print(\"Nedostatečně\")"
  },
  {
    "objectID": "lessons/lesson_04.html#vnořené-podmínky",
    "href": "lessons/lesson_04.html#vnořené-podmínky",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "3.4 Vnořené podmínky",
    "text": "3.4 Vnořené podmínky\nPodmínky můžete vnořovat do sebe:\nvek = int(input(\"Věk: \"))\nma_ridicak = input(\"Máte řidičák? (ano/ne): \") == \"ano\"\n\nif vek &gt;= 18:\n    if ma_ridicak:\n        print(\"Můžete řídit\")\n    else:\n        print(\"Musíte udělat řidičák\")\nelse:\n    print(\"Jste příliš mladí\")\nAle elegantněji pomocí and:\nif vek &gt;= 18 and ma_ridicak:\n    print(\"Můžete řídit\")\nelif vek &gt;= 18:\n    print(\"Musíte udělat řidičák\")\nelse:\n    print(\"Jste příliš mladí\")"
  },
  {
    "objectID": "lessons/lesson_04.html#cvičení-1-kategorizace-čísla",
    "href": "lessons/lesson_04.html#cvičení-1-kategorizace-čísla",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "3.5 Cvičení 1: Kategorizace čísla",
    "text": "3.5 Cvičení 1: Kategorizace čísla\nNapište program, který: 1. Načte číslo od uživatele 2. Rozhodne, zda je: - Kladné, záporné nebo nula - Sudé nebo liché (pokud není nula)\nNápověda:\ncislo = int(input(\"Zadejte číslo: \"))\n\n# Zde přidejte podmínky..."
  },
  {
    "objectID": "lessons/lesson_04.html#procházení-seznamu",
    "href": "lessons/lesson_04.html#procházení-seznamu",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "4.1 Procházení seznamu",
    "text": "4.1 Procházení seznamu\nNejjednodušší použití - projít všechny prvky seznamu:\nmesta = [\"Praha\", \"Brno\", \"Ostrava\"]\n\nfor mesto in mesta:\n    print(f\"Město: {mesto}\")\nVýsledek:\nMěsto: Praha\nMěsto: Brno\nMěsto: Ostrava\nJak to funguje: - Proměnná mesto postupně nabývá hodnot \"Praha\", \"Brno\", \"Ostrava\" - Pro každou hodnotu se provede odsazený kód"
  },
  {
    "objectID": "lessons/lesson_04.html#funkce-range",
    "href": "lessons/lesson_04.html#funkce-range",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "4.2 Funkce range()",
    "text": "4.2 Funkce range()\nPro opakování N-krát použijeme funkci range():\n\n4.2.1 range(n) - od 0 do n-1\nfor i in range(5):\n    print(i)\nVýsledek:\n0\n1\n2\n3\n4\n\n\n\n\n\n\nWarningrange(5) končí na 4, ne na 5!\n\n\n\nPython počítá od 0, takže range(5) znamená: 0, 1, 2, 3, 4\n\n\n\n\n4.2.2 range(start, stop) - od start do stop-1\nfor i in range(2, 6):\n    print(i)\nVýsledek:\n2\n3\n4\n5\n\n\n4.2.3 range(start, stop, step) - s krokem\nfor i in range(0, 10, 2):\n    print(i)\nVýsledek:\n0\n2\n4\n6\n8\n\n\n4.2.4 Další příklady\n# Zpětně (od 10 do 1)\nfor i in range(10, 0, -1):\n    print(i)\n\n# Od 1 do 10 (často potřebujeme)\nfor i in range(1, 11):\n    print(i)"
  },
  {
    "objectID": "lessons/lesson_04.html#akumulace-v-cyklu",
    "href": "lessons/lesson_04.html#akumulace-v-cyklu",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "4.3 Akumulace v cyklu",
    "text": "4.3 Akumulace v cyklu\nČasto potřebujeme v cyklu sbírat výsledky (akumulovat):\n\n4.3.1 Součet čísel\nsoucet = 0  # Inicializace\n\nfor i in range(1, 11):\n    soucet = soucet + i  # Přičtení k součtu\n\nprint(f\"Součet čísel 1-10: {soucet}\")  # 55\nKratší zápis: soucet += i je totéž jako soucet = soucet + i\n\n\n4.3.2 Součin čísel (faktoriál)\nsoucin = 1  # DŮLEŽITÉ: inicializovat na 1, ne 0!\n\nfor i in range(1, 6):\n    soucin = soucin * i  # Vynásobení\n\nprint(f\"5! = {soucin}\")  # 120"
  },
  {
    "objectID": "lessons/lesson_04.html#cvičení-2-druhé-mocniny",
    "href": "lessons/lesson_04.html#cvičení-2-druhé-mocniny",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "4.4 Cvičení 2: Druhé mocniny",
    "text": "4.4 Cvičení 2: Druhé mocniny\nNapište program, který vytvoří seznam druhých mocnin čísel od 1 do 10.\nNápověda:\nmocniny = []  # Prázdný seznam\n\nfor i in range(1, 11):\n    # Přidejte druhou mocninu do seznamu..."
  },
  {
    "objectID": "lessons/lesson_04.html#základní-syntaxe",
    "href": "lessons/lesson_04.html#základní-syntaxe",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "5.1 Základní syntaxe",
    "text": "5.1 Základní syntaxe\npocitadlo = 0\n\nwhile pocitadlo &lt; 5:\n    print(pocitadlo)\n    pocitadlo = pocitadlo + 1\nVýsledek:\n0\n1\n2\n3\n4\n\n\n\n\n\n\nWarningPozor na nekonečný cyklus!\n\n\n\nPokud podmínka nikdy nepřestane platit, cyklus poběží donekonečna:\npocitadlo = 0\nwhile pocitadlo &lt; 5:\n    print(pocitadlo)\n    # CHYBA - zapomněli jsme zvýšit pocitadlo!\nProgram musíte přerušit: Ctrl+C"
  },
  {
    "objectID": "lessons/lesson_04.html#kdy-použít-for-vs.-while",
    "href": "lessons/lesson_04.html#kdy-použít-for-vs.-while",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "5.2 Kdy použít for vs. while?",
    "text": "5.2 Kdy použít for vs. while?\n\n5.2.1 for - když víme předem, kolikrát opakovat\n# Chci 10x opakovat něco\nfor i in range(10):\n    print(\"Opakování\")\n\n# Chci projít seznam\nfor prvek in seznam:\n    print(prvek)\n\n\n5.2.2 while - když opakujeme, dokud platí podmínka\n# Opakuj, dokud uživatel nezadá správně\nheslo = \"\"\nwhile heslo != \"tajne\":\n    heslo = input(\"Zadejte heslo: \")\n\nprint(\"Správně!\")"
  },
  {
    "objectID": "lessons/lesson_04.html#příklad-hádání-čísla",
    "href": "lessons/lesson_04.html#příklad-hádání-čísla",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "5.3 Příklad: Hádání čísla",
    "text": "5.3 Příklad: Hádání čísla\ntajne_cislo = 42\ntip = 0\n\nwhile tip != tajne_cislo:\n    tip = int(input(\"Hádej číslo: \"))\n    \n    if tip &lt; tajne_cislo:\n        print(\"Větší!\")\n    elif tip &gt; tajne_cislo:\n        print(\"Menší!\")\n\nprint(\"Správně!\")"
  },
  {
    "objectID": "lessons/lesson_04.html#break-a-continue",
    "href": "lessons/lesson_04.html#break-a-continue",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "5.4 break a continue",
    "text": "5.4 break a continue\n\n5.4.1 break - okamžité ukončení cyklu\nfor i in range(100):\n    if i == 5:\n        break  # Ukončí cyklus\n    print(i)\n\n# Vypíše: 0, 1, 2, 3, 4\n\n\n5.4.2 continue - přeskočení zbytku iterace\nfor i in range(10):\n    if i % 2 == 0:\n        continue  # Přeskoč sudá čísla\n    print(i)\n\n# Vypíše: 1, 3, 5, 7, 9"
  },
  {
    "objectID": "lessons/lesson_04.html#co-je-fibonacciho-posloupnost",
    "href": "lessons/lesson_04.html#co-je-fibonacciho-posloupnost",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "6.1 Co je Fibonacciho posloupnost?",
    "text": "6.1 Co je Fibonacciho posloupnost?\nFibonacciho posloupnost je sekvence čísel, kde každé číslo je součtem dvou předchozích:\nF(0) = 0\nF(1) = 1\nF(n) = F(n-1) + F(n-2)\n\nPosloupnost: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...\nPříklady: - F(2) = F(1) + F(0) = 1 + 0 = 1 - F(3) = F(2) + F(1) = 1 + 1 = 2 - F(4) = F(3) + F(2) = 2 + 1 = 3 - F(5) = F(4) + F(3) = 3 + 2 = 5"
  },
  {
    "objectID": "lessons/lesson_04.html#implementace-krok-za-krokem",
    "href": "lessons/lesson_04.html#implementace-krok-za-krokem",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "6.2 Implementace krok za krokem",
    "text": "6.2 Implementace krok za krokem\n\n6.2.1 Krok 1: Načtení vstupu\nn = int(input(\"Který člen Fibonacciho posloupnosti? \"))\n\n\n6.2.2 Krok 2: Inicializace\nPotřebujeme dvě proměnné pro dva předchozí členy:\na = 0  # F(0)\nb = 1  # F(1)\n\n\n6.2.3 Krok 3: Cyklus\nV každém kroku posuneme hodnoty:\nfor i in range(n):\n    a, b = b, a + b\nCo se děje: - a, b = b, a + b je současné přiřazení - Nejprve se vypočítá pravá strana: nové_a = b, nové_b = a + b - Pak se přiřadí: a = nové_a, b = nové_b\nPříklad pro n=5:\nKrok 0: a=0, b=1  →  a=1, b=0+1=1\nKrok 1: a=1, b=1  →  a=1, b=1+1=2\nKrok 2: a=1, b=2  →  a=2, b=1+2=3\nKrok 3: a=2, b=3  →  a=3, b=2+3=5\nKrok 4: a=3, b=5  →  a=5, b=3+5=8\n\n\n6.2.4 Krok 4: Výpis výsledku\nprint(f\"{n}. člen Fibonacciho posloupnosti: {a}\")"
  },
  {
    "objectID": "lessons/lesson_04.html#celý-program",
    "href": "lessons/lesson_04.html#celý-program",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "6.3 Celý program",
    "text": "6.3 Celý program\nn = int(input(\"Který člen Fibonacciho posloupnosti? \"))\n\na, b = 0, 1\n\nfor i in range(n):\n    a, b = b, a + b\n\nprint(f\"{n}. člen: {a}\")"
  },
  {
    "objectID": "lessons/lesson_04.html#test-programu",
    "href": "lessons/lesson_04.html#test-programu",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "6.4 Test programu",
    "text": "6.4 Test programu\nKterý člen Fibonacciho posloupnosti? 10\n10. člen: 55\n\n\n\n\n\n\nTipProč to funguje?\n\n\n\nKouzlo je v a, b = b, a + b. Python nejprve vyhodnotí celou pravou stranu, pak přiřadí:\n# Špatně (nefunguje):\na = b\nb = a + b  # Tady už je a změněné!\n\n# Správně (funguje):\na, b = b, a + b  # Python přiřadí obě hodnoty najednou"
  },
  {
    "objectID": "lessons/lesson_04.html#zadání",
    "href": "lessons/lesson_04.html#zadání",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "7.1 Zadání",
    "text": "7.1 Zadání\nFaktoriál čísla n (označuje se n!) je součin všech přirozených čísel od 1 do n:\nn! = n × (n-1) × (n-2) × ... × 2 × 1\n\nPříklady:\n0! = 1  (definice)\n1! = 1\n2! = 2 × 1 = 2\n3! = 3 × 2 × 1 = 6\n4! = 4 × 3 × 2 × 1 = 24\n5! = 5 × 4 × 3 × 2 × 1 = 120"
  },
  {
    "objectID": "lessons/lesson_04.html#úkol",
    "href": "lessons/lesson_04.html#úkol",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "7.2 Úkol",
    "text": "7.2 Úkol\nNapište program, který: 1. Načte číslo n od uživatele 2. Vypočítá faktoriál tohoto čísla 3. Vypíše výsledek\nNápověda: - Použijte cyklus for s range() - Začněte s vysledek = 1 (DŮLEŽITÉ - ne 0!) - V každém kroku násobte - Rozmyslete si správný rozsah pro range()\nKostra programu:\nn = int(input(\"Zadejte číslo: \"))\n\nvysledek = 1  # Inicializace\n\n# Zde přidejte cyklus...\n\nprint(f\"{n}! = {vysledek}\")"
  },
  {
    "objectID": "lessons/lesson_04.html#řešení",
    "href": "lessons/lesson_04.html#řešení",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "7.3 Řešení",
    "text": "7.3 Řešení"
  },
  {
    "objectID": "lessons/lesson_04.html#co-jsme-se-naučili",
    "href": "lessons/lesson_04.html#co-jsme-se-naučili",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "8.1 Co jsme se naučili",
    "text": "8.1 Co jsme se naučili\n✅ Porovnávací operátory: ==, !=, &lt;, &gt;, &lt;=, &gt;=\n✅ Logické operátory: and, or, not\n✅ Podmínky: if, elif, else\n✅ For cyklus: procházení seznamů, funkce range()\n✅ While cyklus: opakování dokud platí podmínka\n✅ break a continue: ovládání cyklů\n✅ Fibonacci: iterativní algoritmus s akumulací\n✅ Faktoriál: součin čísel pomocí cyklu"
  },
  {
    "objectID": "lessons/lesson_04.html#co-bude-příště",
    "href": "lessons/lesson_04.html#co-bude-příště",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "8.2 Co bude příště?",
    "text": "8.2 Co bude příště?\nV příští lekci:\n\nRozšíření práce se seznamy (slicing, metody)\nPrvočísla - složitější podmínky v cyklech\nTřídění - vnořené cykly a algoritmické myšlení\nPropojení s Model Builder - vnořené modely vs. vnořené cykly"
  },
  {
    "objectID": "lessons/lesson_04.html#varianta-a-základní",
    "href": "lessons/lesson_04.html#varianta-a-základní",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "9.1 Varianta A (základní)",
    "text": "9.1 Varianta A (základní)\n\nDokončete faktoriál (pokud jste ho nestihli)\nTabulka faktoriálů: Vypište faktoriály čísel 1-10 ve formátu:\n1! = 1\n2! = 2\n3! = 6\n...\n10! = 3628800"
  },
  {
    "objectID": "lessons/lesson_04.html#varianta-b-pokročilá",
    "href": "lessons/lesson_04.html#varianta-b-pokročilá",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "9.2 Varianta B (pokročilá)",
    "text": "9.2 Varianta B (pokročilá)\n\nFibonacci pro seznam: Vypočítejte Fibonacci čísla pro seznam [5, 10, 15, 20]\nNejvětší Fibonacci pod 1000: Najděte největší Fibonacci číslo menší než 1000\n\nNápověda pro B2:\na, b = 0, 1\n\nwhile b &lt; 1000:\n    # Co dál?"
  },
  {
    "objectID": "lessons/lesson_04.html#bonusový-úkol-nepovinný",
    "href": "lessons/lesson_04.html#bonusový-úkol-nepovinný",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "9.3 Bonusový úkol (nepovinný)",
    "text": "9.3 Bonusový úkol (nepovinný)\nPalindrom: Napište program, který zjistí, zda je číslo palindrom (čte se stejně zepředu i zezadu).\nPříklady: 121, 1331, 12321\nNápověda: Převeďte číslo na string a porovnejte ho s obráceným stringem."
  },
  {
    "objectID": "lessons/lesson_04.html#běžné-chyby-studentů",
    "href": "lessons/lesson_04.html#běžné-chyby-studentů",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "11.1 Běžné chyby studentů",
    "text": "11.1 Běžné chyby studentů\n# 1. Záměna = a ==\nif vek = 18:     # CHYBA - přiřazení místo porovnání\nif vek == 18:    # SPRÁVNĚ\n\n# 2. Chybějící odsazení\nif vek &gt;= 18:\nprint(\"OK\")      # CHYBA - není odsazené\n    print(\"OK\")  # SPRÁVNĚ\n\n# 3. Zapomenuté inicializace\nfor i in range(10):\n    soucet += i  # CHYBA - soucet neexistuje\n\nsoucet = 0       # SPRÁVNĚ - nejprve inicializovat\nfor i in range(10):\n    soucet += i\n\n# 4. Špatný range\nrange(10)        # 0-9 (ne 1-10!)\nrange(1, 11)     # 1-10 (správně pro součet 1-10)\n\n# 5. Nekonečný while\nwhile True:      # CHYBA - nikdy neskončí\n    print(\"...\")\n\n# 6. Fibonacci výměna\na = b\nb = a + b        # CHYBA - a už je změněné!\n\na, b = b, a + b  # SPRÁVNĚ - současné přiřazení"
  },
  {
    "objectID": "lessons/lesson_04.html#časový-plán-90-min",
    "href": "lessons/lesson_04.html#časový-plán-90-min",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "11.2 Časový plán (90 min)",
    "text": "11.2 Časový plán (90 min)\n\n\n\nČas\nObsah\n\n\n\n\n0-15 min\nLogické hodnoty, porovnávání\n\n\n15-35 min\nPodmínky (if/elif/else) + cvičení\n\n\n35-55 min\nFor cykly, range() + cvičení\n\n\n55-65 min\nWhile cykly, break/continue\n\n\n65-80 min\nFibonacci - společně krok za krokem\n\n\n80-90 min\nFaktoriál - samostatně (nebo začít doma)"
  },
  {
    "objectID": "lessons/lesson_04.html#klíčové-momenty",
    "href": "lessons/lesson_04.html#klíčové-momenty",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "11.3 Klíčové momenty",
    "text": "11.3 Klíčové momenty\n\n11.3.1 Fibonacci (65-80 min):\n\nDŮLEŽITÉ: Procházet KROK ZA KROKEM\nNa tabuli/projektoru ukázat hodnoty a a b v každé iteraci\nVysvětlit a, b = b, a + b pečlivě\nNechat studenty říct, co se stane v dalším kroku\n\n\n\n11.3.2 Faktoriál (80-90 min):\n\nPokud nestihnou, je to OK - je to domácí úkol\nDůležitější je, aby rozuměli Fibonaccimu\nPokud stihnou, ukázat řešení a porovnat for vs. while"
  },
  {
    "objectID": "lessons/lesson_04.html#rizika",
    "href": "lessons/lesson_04.html#rizika",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "11.4 Rizika",
    "text": "11.4 Rizika\n\nFibonacci může trvat déle (15 min → 20 min)\n\nŘešení: Zkrátit while cykly (10 min → 5 min)\nMít připravený promítaný kód\n\nStudenti budou různě rychlí\n\nŘešení: Rychlejší pomáhají pomalejším\nBonusové úkoly pro rychlé\n\nFaktoriál nestihnou\n\nŘešení: To je v pořádku, dokončí doma\nHlavní cíl = pochopit Fibonacci"
  },
  {
    "objectID": "lessons/lesson_04.html#tipy",
    "href": "lessons/lesson_04.html#tipy",
    "title": "Lekce 4: Podmínky a cykly I – Fibonacci a faktoriál",
    "section": "11.5 Tipy",
    "text": "11.5 Tipy\n\nFibonacci výměna je nejdůležitější koncept - věnovat tomu čas!\nUkázat na tabuli: “Co bude v a a b po každém kroku?”\nNechat studenty předpovídat další krok\nFaktoriál je jednodušší - můžou zvládnout sami"
  },
  {
    "objectID": "lessons/lesson_01.html",
    "href": "lessons/lesson_01.html",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "",
    "text": "NoteInformace o lekci\n\n\n\nČasová dotace: 90 minut (1,5 hodiny)\nPředpoklady: Základní znalost ArcGIS Pro a Model Builderu (GIS 1, GIS 2)\nMateriály: ArcGIS Pro projekt ke stažení na [odkaz]"
  },
  {
    "objectID": "lessons/lesson_01.html#co-se-v-tomto-kurzu-naučíte",
    "href": "lessons/lesson_01.html#co-se-v-tomto-kurzu-naučíte",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "1.1 Co se v tomto kurzu naučíte",
    "text": "1.1 Co se v tomto kurzu naučíte\nTento kurz vás provede cestou od vizuálního programování v Model Builderu k psaní vlastních Python skriptů pro automatizaci GIS úloh.\n\nTýdny 1-2Týdny 3-5Týdny 6-9Týdny 10-11Týden 12\n\n\nModel Builder → Python\n\nÚvod do automatizace\nPrvní pohled na Python kód\nExport modelů\nIterátory a limity Model Builderu\n\n\n\nZáklady programování v Pythonu\n\nProměnné, cykly, funkce\nPráce se soubory a CSV\nAlgoritmické myšlení\nTřídící algoritmy\n\n\n\nArcPy - Python pro GIS\n\nAutomatizace analýz\nTabulkové operace\nVektorové a rastrové analýzy\nKurzory a geometrie\n\n\n\nPokročilé techniky\n\nPráce s geometriemi\nPython Toolboxy\nTvorba nástrojů s GUI\nOptimalizace kódu\n\n\n\nZávěrečný projekt\n\nVlastní nástroj\nŘešení reálného problému\nDokumentace"
  },
  {
    "objectID": "lessons/lesson_01.html#proč-tento-kurz",
    "href": "lessons/lesson_01.html#proč-tento-kurz",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "1.2 Proč tento kurz?",
    "text": "1.2 Proč tento kurz?\nUž umíte pracovat s ArcGIS Pro - znáte nástroje, dokážete provádět analýzy, vytvářet mapy. Nyní se naučíte GIS automatizovat a programovat.\n\n\n\n\n\n\nTipPříklady z praxe\n\n\n\n🔄 Opakující se úlohy\n“Každý měsíc musíme aktualizovat mapy dostupnosti zdravotnických zařízení pro 14 krajů.”\n→ Řešení: Napsat skript, který to udělá automaticky za 5 minut.\n📊 Velké množství dat\n“Potřebujeme zpracovat 500 rastrových snímků z družice.”\n→ Řešení: Python skript běžící přes noc, vy ráno kontrolujete výsledky.\n🎯 Složité analýzy\n“Chceme optimalizovat umístění větrných elektráren na základě 10 různých kritérií.”\n→ Řešení: Vlastní nástroj s GUI, který může používat kdokoli v týmu."
  },
  {
    "objectID": "lessons/lesson_01.html#struktura-výuky",
    "href": "lessons/lesson_01.html#struktura-výuky",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "1.3 Struktura výuky",
    "text": "1.3 Struktura výuky\nKaždý týden:\n\n2× 1,5 hodiny praktických cvičení\nKombinace výkladu + samostatné práce\nVolitelné úkoly k procvičení\n\nHodnocení:\n\nAktivita na cvičeních\nPrůběžné úkoly (malé, týdenní)\nZávěrečný projekt (hlavní část hodnocení)\n\nFunkční Python nástroj\nŘeší reálný GIS problém\nS dokumentací\n\n\nNástroje:\n\nArcGIS Pro (máte nainstalované?)\nPython 3.x (součást ArcGIS Pro)\nTextový editor (Notepad++, VS Code)\nPozději: Jupyter Notebook"
  },
  {
    "objectID": "lessons/lesson_01.html#zadání",
    "href": "lessons/lesson_01.html#zadání",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "2.1 Zadání",
    "text": "2.1 Zadání\n\n\n\n\n\n\nImportantAnalytická úloha\n\n\n\nJaké je zastoupení lesů v ochranném pásmu 500 metrů kolem železnic v okrese Jindřichův Hradec?\n\n\n\n2.1.1 Proč tato úloha?\n\n✅ Realistická - ochranná pásma, hlukové mapování, dostupnost\n✅ Jednoduchá - pochopitelné kroky\n✅ Rozšiřitelná - později přidáme iterátory a Python\n✅ Ukáže limity Model Builderu → motivace pro Python"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-data",
    "href": "lessons/lesson_01.html#sec-data",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "2.2 Data",
    "text": "2.2 Data\nVšechna data jsou připravena v projektu ArcGIS Pro, který si stáhnete z [odkaz].\n\nOkresyŽelezniceKrajinný pokryv\n\n\nokresy - polygony okresů ČR\n\nSouřadnicový systém: EPSG:3035\nKlíčové pole: NAZ_LAU1 (název okresu)\n\n\n\nzeleznice - linie železnic ČR\n\nSouřadnicový systém: EPSG:3035\nGeometrie: polyline\n\n\n\nclc_2018 - rastr Corine Land Cover\n\nSouřadnicový systém: EPSG:3035\nHodnoty:\n\n1xx = Urbanizované plochy\n2xx = Zemědělská půda\n3xx = Lesy ⭐\n4xx = Mokřady\n5xx = Vodní plochy\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nPoznámka: Data jsou už transformována do jednotného souřadnicového systému ETRS89 LAEA (EPSG: 3035)."
  },
  {
    "objectID": "lessons/lesson_01.html#analytický-postup",
    "href": "lessons/lesson_01.html#analytický-postup",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "2.3 Analytický postup",
    "text": "2.3 Analytický postup\nCíl: Zjistit, kolik procent plochy v pásmu 500m od železnic v okrese Jindřichův Hradec tvoří lesy.\n\nflowchart TD\n    A[Okresy] --&gt; B[Vybrat JH]\n    B --&gt; C[Okres JH]\n    D[železnice] --&gt; E[Oříznout okresem]\n    C --&gt; E\n    E --&gt; F[železnice v JH]\n    F --&gt; G[Buffer 500m]\n    G --&gt; H[Pásmo 500m]\n    I[CLC rastr] --&gt; J[Binární rastr lesů]\n    H --&gt; K[Zónální statistika]\n    J --&gt; K\n    K --&gt; L[Výsledek]\n    \n    style C fill:#6baed6\n    style F fill:#6baed6\n    style H fill:#6baed6\n    style J fill:#74c476\n    style L fill:#fd8d3c\n\n\n\n\n\nflowchart TD\n    A[Okresy] --&gt; B[Vybrat JH]\n    B --&gt; C[Okres JH]\n    D[železnice] --&gt; E[Oříznout okresem]\n    C --&gt; E\n    E --&gt; F[železnice v JH]\n    F --&gt; G[Buffer 500m]\n    G --&gt; H[Pásmo 500m]\n    I[CLC rastr] --&gt; J[Binární rastr lesů]\n    H --&gt; K[Zónální statistika]\n    J --&gt; K\n    K --&gt; L[Výsledek]\n    \n    style C fill:#6baed6\n    style F fill:#6baed6\n    style H fill:#6baed6\n    style J fill:#74c476\n    style L fill:#fd8d3c\n\n\n\n\nFigure 1: Workflow analytického postupu"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-kroky",
    "href": "lessons/lesson_01.html#sec-kroky",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "2.4 Krok za krokem",
    "text": "2.4 Krok za krokem\n\n2.4.1 Příprava\n\nOtevřete ArcGIS Pro projekt Lekce1_AutomatizaceGIS.aprx\nProhlédněte si data v mapě\nVytvořte nový toolbox:\n\nPravý klik v Catalog Pane → New → Toolbox\nPojmenujte: Lekce1_Tools.atbx\n\nVytvořte nový model:\n\nPravý klik na toolbox → New → Model\nPojmenujte: Analyza_Lesu_v_Pasmu\n\n\n\n\n2.4.2 Krok 1: Výběr okresu Jindřichův Hradec\nNástroj: Make Feature Layer\n\n\n\n\n\n\nTipProč Make Feature Layer?\n\n\n\nNástroj Select vytváří novou datovou sadu na disku. Make Feature Layer vytváří pouze dočasnou vrstvu v paměti, což je rychlejší a efektivnější.\n\n\nPostup:\n\nV modelu: Insert → Tool → vyhledat “Make Feature Layer”\nPřetáhněte vrstvu okresy do modelu\nPropojte okresy s nástrojem Make Feature Layer\nDvojklik na nástroj → nastavit parametry:\n\nInput Features: okresy\nOutput Layer: okres_jh_layer\nExpression: Klikněte SQL 🔧\n\n\nNAZ_LAU1 = 'Jindřichův Hradec'\n\nOK\n\nKontrola: 🔵 okresy → 🟡 Make Feature Layer → 🔵 okres_jh_layer\n\n\n2.4.3 Krok 2: Ořezání železnic na okres\nNástroj: Clip\nÚčel: Z celé vrstvy železnic chceme jen úseky, které jsou v okrese JH.\nPostup:\n\nInsert → Tool → “Clip”\nPřetáhněte vrstvu dalnice do modelu\nPropojte:\n\ndalnice → Clip (jako Input Features)\nokres_jh_layer → Clip (jako Clip Features)\n\nDvojklik na Clip → parametry:\n\nInput Features: dalnice\nClip Features: okres_jh_layer\nOutput: dalnice_clip\n\nOK\n\n\n\n2.4.4 Krok 3: Vytvoření ochranného pásma (buffer)\nNástroj: Buffer\n\n\n\n\n\n\nImportantDůležité nastavení\n\n\n\nDissolve Type = ALL (spojí všechny buffery do jednoho)\n\n\nPostup:\n\nInsert → Tool → “Buffer”\nPropojte dalnice_clip → Buffer\nDvojklik na Buffer → parametry:\n\nInput Features: dalnice_clip\nOutput: buffer_500m\nDistance: 500 Meters\nDissolve Type: ALL ← důležité!\nSide Type: FULL\nEnd Type: ROUND\n\nOK\n\n\n\n\n\n\n\nNoteProč Dissolve ALL?\n\n\n\n\n\nBez dissolve bychom měli desítky překrývajících se bufferů (jeden pro každý úsek železnice). S ALL se všechny spojí do jednoho (multi)polygonu.\nDíky tomu dostaneme v zonální statistice přímo jeden výsledek - jedno číslo představující průměr z celého pásma.\n\n\n\n\n\n2.4.5 Krok 4: Vytvoření binárního rastru lesů\nNástroj: Equal To (Spatial Analyst)\nÚčel: Z CLC rastru (hodnoty 1,2,3,4,5) vytvořit rastr s hodnotami 0/1, kde 1 = les.\nPostup:\n\nInsert → Tool → “Equal To” (v kategorii Spatial Analyst → Math → Logical)\nPřetáhněte rastr clc_2018 do modelu\nPropojte clc_2018 → Equal To\nDvojklik na Equal To:\n\nInput raster: clc_2018\nInput value: 3 (kód pro lesy)\nOutput: lesy_binarni\n\nOK\n\n\n\n\n\n\n\nNoteCo se stane?\n\n\n\nRastr bude mít hodnotu 1 tam, kde je les (CLC=3), a hodnotu 0 všude jinde.\n\n\n\n\n2.4.6 Krok 5: Zonální statistika\nNástroj: Zonal Statistics as Table\nÚčel: Spočítat průměr z binárního rastru v rámci bufferu.\n\n\n\n\n\n\nTipMatematický trik\n\n\n\nPrůměr z nul a jedniček = podíl jedniček = relativní plocha lesů!\nPokud je průměr 0.35, znamená to, že 35% pixelů má hodnotu 1 (les).\n\n\nPostup:\n\nInsert → Tool → “Zonal Statistics as Table”\nPropojte:\n\nbuffer_500m → Zonal Statistics (jako Input Zone Data)\nlesy_binarni → Zonal Statistics (jako Input Value Raster)\n\nDvojklik na Zonal Statistics:\n\nInput Zone Data: buffer_500m\nZone Field: OBJECTID\nInput Value Raster: lesy_binarni\nOutput Table: vysledek_lesy.dbf\nStatistics Type: MEAN (průměr)\nIgnore NoData: zaškrtnuto\n\nOK\n\n\n\n2.4.7 Uložení a spuštění modelu\n\n1. Uložit2. Ověřit3. Spustit4. Počkat5. Výsledek\n\n\nFile → Save (Ctrl+S)\n\n\nModel → Validate Entire Model\nPokud je vše OK, všechny nástroje budou barevné (ne šedé)\n\n\nKlikněte na ▶️ Run\n\n\nModel běží, sledujte progress\n\n\nOtevřete vysledek_lesy.dbf"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-vysledek",
    "href": "lessons/lesson_01.html#sec-vysledek",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "2.5 Interpretace výsledku",
    "text": "2.5 Interpretace výsledku\nV tabulce vysledek_lesy.dbf najdete sloupec MEAN.\nVýznam:\n\nMEAN = 0.354 → 35.4% plochy v pásmu tvoří lesy\nMEAN = 0.205 → 20.5% plochy v pásmu tvoří lesy\n\n\n\n\n\n\n\nNoteProč to funguje?\n\n\n\nPrůměr z binárního rastru (0/1) v dané zóně = podíl pixelů s hodnotou 1 = relativní plocha lesů.\nDíky nastavení Dissolve ALL v bufferu máme jeden (multi)polygon, takže dostaneme přímo jedno číslo - procento lesů v celém pásmu kolem železnic v okrese.\n\n\n\n2.5.1 A co kdyby více vzdáleností?\nSituace:\n“Váš šéf říká: ‘Chci vidět, jak se to mění s vzdáleností. Spočítej to pro 100m, 300m, 500m a 1000m.’”\n\n\n\n\n\n\nWarningProblém\n\n\n\nCo byste museli udělat?\n\nZměnit Buffer distance na 100m → spustit\nZměnit na 300m → spustit\nZměnit na 500m → spustit (už máme)\nZměnit na 1000m → spustit\n\n= 4× ručně spustit model, pokaždé změnit parametr\nA pak: 4 samostatné tabulky → jak je dát dohromady pro porovnání?\n\n\n\n\n\n\n\n\nTipŘešení\n\n\n\nPříští týden: Naučíme se ITERÁTORY - automatické procházení různých hodnot\nZa měsíc: Naučíme se PYTHON - elegantní řešení s vnořenými cykly"
  },
  {
    "objectID": "lessons/lesson_01.html#proč-exportovat",
    "href": "lessons/lesson_01.html#proč-exportovat",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.1 Proč exportovat?",
    "text": "3.1 Proč exportovat?\nModel Builder je skvělý pro vizualizaci workflow, ale má limity:\n\nTěžko se verzuje (Git, SVN)\nSložité sdílení (musíte sdílet celý toolbox)\nOmezené možnosti logiky (podmínky, cykly)\n\nPython nám dává:\n\n✅ Textový soubor (snadno sdílitelný, verzovatelný)\n✅ Možnost úprav v textovém editoru\n✅ Přidání vlastní logiky\n✅ Spuštění mimo ArcGIS Pro (automatizace)"
  },
  {
    "objectID": "lessons/lesson_01.html#jak-exportovat",
    "href": "lessons/lesson_01.html#jak-exportovat",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.2 Jak exportovat",
    "text": "3.2 Jak exportovat\n\nV Model Builderu: Model → Export → To Python Script\nUložit jako: model_export.py\nVybrat lokaci a uložit"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-python-kod",
    "href": "lessons/lesson_01.html#sec-python-kod",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.3 Prohlédnutí Python kódu",
    "text": "3.3 Prohlédnutí Python kódu\nOtevřete exportovaný soubor v textovém editoru:\n\nNotepad++ (doporučeno - zvýrazňuje syntax)\nVS Code (pokud máte)\nPoznámkový blok (funguje, ale bez barev)\n\n\n3.3.1 Struktura kódu\n\n\nmodel_export.py\n\n# -*- coding: utf-8 -*-\n# ---------------------------------------------------------------------------\n# model_export.py\n# Created on: 2025-01-15\n# Description: Analýza lesů v pásmu kolem železnic\n# ---------------------------------------------------------------------------\n\n# Import knihovny ArcPy\nimport arcpy\n\n# Lokální proměnné (cesty k datům)\nokresy = \"okresy\"\ndalnice = \"dalnice\"\nclc_2018 = \"clc_2018\"\nokres_jh_layer = \"okres_jh_layer\"\ndalnice_clip = \"C:\\\\Data\\\\dalnice_clip.shp\"\nbuffer_500m = \"C:\\\\Data\\\\buffer_500m.shp\"\nlesy_binarni = \"C:\\\\Data\\\\lesy_binarni.tif\"\nvysledek_lesy = \"C:\\\\Data\\\\vysledek_lesy.dbf\"\n\n# PROCES 1: Make Feature Layer - výběr okresu\narcpy.MakeFeatureLayer_management(\n    in_features=okresy,\n    out_layer=okres_jh_layer,\n    where_clause=\"NAZ_LAU1 = 'Jindřichův Hradec'\"\n)\n\n# PROCES 2: Clip - ořezání železnic\narcpy.Clip_analysis(\n    in_features=dalnice,\n    clip_features=okres_jh_layer,\n    out_feature_class=dalnice_clip\n)\n\n# PROCES 3: Buffer - ochranné pásmo\narcpy.Buffer_analysis(\n    in_features=dalnice_clip,\n    out_feature_class=buffer_500m,\n    buffer_distance_or_field=\"500 Meters\",\n    dissolve_option=\"ALL\"\n)\n\n# PROCES 4: Equal To - binární rastr lesů\narcpy.gp.EqualTo_sa(\n    in_raster_or_constant1=clc_2018,\n    in_raster_or_constant2=\"3\",\n    out_raster=lesy_binarni\n)\n\n# PROCES 5: Zonal Statistics as Table\narcpy.gp.ZonalStatisticsAsTable_sa(\n    in_zone_data=buffer_500m,\n    zone_field=\"OBJECTID\",\n    in_value_raster=lesy_binarni,\n    out_table=vysledek_lesy,\n    statistics_type=\"MEAN\"\n)\n\nprint(\"Model dokončen!\")"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-rozbor-kodu",
    "href": "lessons/lesson_01.html#sec-rozbor-kodu",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.4 Co vidíme v kódu?",
    "text": "3.4 Co vidíme v kódu?\n\n3.4.1 1. Import ArcPy\nimport arcpy\n\n\n\n\n\n\nNote\n\n\n\nVýznam: “Chci použít nástroje ArcGIS v Pythonu”\nAnalogie: Jako když v ArcGIS Pro otevřete ArcToolbox - získáte přístup k nástrojům.\n\n\n\n\n3.4.2 2. Proměnné\nokresy = \"okresy\"\nvzdalenost = \"500 Meters\"\n\n\n\n\n\n\nTip\n\n\n\nVýhoda proměnných: Můžeme snadno změnit na jednom místě:\nvzdalenost = \"1000 Meters\"  # Změna parametru!\n\n\n\n\n3.4.3 3. Volání nástroje\narcpy.Buffer_analysis(\n    in_features=dalnice_clip,\n    out_feature_class=buffer_500m,\n    buffer_distance_or_field=\"500 Meters\",\n    dissolve_option=\"ALL\"\n)\nSrovnání s Model Builderem:\n\n\n\nTable 1: Srovnání Model Builder vs. Python\n\n\n\n\n\nModel Builder\nPython\n\n\n\n\nŽlutý obdélník “Buffer”\narcpy.Buffer_analysis()\n\n\nDialog s parametry\nParametry v závorkách\n\n\nPropojení šipkou\nProměnné jako parametry\n\n\nKliknutí na Run\npython script.py\n\n\n\n\n\n\n\n\n\n\n\n\nImportantKlíčové poznání\n\n\n\nJe to STEJNÉ, jen jinak zapsané!"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-prozkoumani",
    "href": "lessons/lesson_01.html#sec-prozkoumani",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.5 Interaktivní prozkoumání",
    "text": "3.5 Interaktivní prozkoumání\n\n\n\n\n\n\nNoteÚkol 1: Najděte v kódu\n\n\n\n\n\nKde je napsáno “Jindřichův Hradec”?\nwhere_clause=\"NAZ_LAU1 = 'Jindřichův Hradec'\"\n\n\n\n\n\n\n\n\n\nNoteÚkol 2: Najděte v kódu\n\n\n\n\n\nKde je vzdálenost bufferu?\nbuffer_distance_or_field=\"500 Meters\"\n\n\n\n\n\n\n\n\n\nNoteÚkol 3: Najděte v kódu\n\n\n\n\n\nKde se vytváří binární rastr lesů?\narcpy.gp.EqualTo_sa(\n    in_raster_or_constant1=clc_2018,\n    in_raster_or_constant2=\"3\",  # ← tady je kód pro lesy\n    out_raster=lesy_binarni\n)"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-zmeny",
    "href": "lessons/lesson_01.html#sec-zmeny",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.6 Co by se dalo snadno změnit v Pythonu?",
    "text": "3.6 Co by se dalo snadno změnit v Pythonu?\n\nZměna vzdálenostiJiný okresVíce vzdáleností najednou\n\n\n# Místo:\nbuffer_distance_or_field=\"500 Meters\"\n\n# Můžeme:\nvzdalenost = 1000  # metry\nbuffer_distance_or_field=f\"{vzdalenost} Meters\"\n\n\n# Místo:\nwhere_clause=\"NAZ_LAU1 = 'Jindřichův Hradec'\"\n\n# Můžeme:\nokres = \"Praha-východ\"\nwhere_clause=f\"NAZ_LAU1 = '{okres}'\"\n\n\n# V Pythonu bychom mohli:\nvzdalenosti = [100, 300, 500, 1000]\nvysledky = []\n\nfor vzd in vzdalenosti:\n    # Buffer\n    buffer = arcpy.Buffer_analysis(..., f\"{vzd} Meters\")\n    \n    # Zonal Statistics\n    vysledek = arcpy.ZonalStatisticsAsTable(...)\n    \n    # Uložit výsledek\n    vysledky.append(vysledek)\n\n# Hotovo! Všechny vzdálenosti v jednom běhu!\n\n\n\n\n\n\n\n\n\nTipVidíte?\n\n\n\nV Pythonu můžeme snadno:\n\nMěnit parametry\nPřidávat výpočty\nAutomatizovat opakování\nSpojovat výsledky do jedné struktury!"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-srovnani-vyhod",
    "href": "lessons/lesson_01.html#sec-srovnani-vyhod",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.7 Výhody Pythonu vs. Model Builder",
    "text": "3.7 Výhody Pythonu vs. Model Builder\n\n\n\nTable 2: Srovnání Model Builder vs. Python\n\n\n\n\n\nAspekt\nModel Builder\nPython\n\n\n\n\nVizualizace\n✅ Výborná\n❌ Žádná (jen text)\n\n\nRychlé vytvoření\n✅ Drag & drop\n❌ Musíte psát\n\n\nSdílení\n⚠️ Toolbox soubor\n✅ Textový .py soubor\n\n\nVerzování (Git)\n❌ Binární formát\n✅ Textový formát\n\n\nPodmínky (IF)\n⚠️ Omezené\n✅ Plná podpora\n\n\nCykly (FOR)\n⚠️ Jen iterátory\n✅ Plná flexibilita\n\n\nVýpočty\n⚠️ Calculate Field\n✅ Jakékoli operace\n\n\nDebugging\n⚠️ Obtížné\n✅ Snadné\n\n\nRychlost běhu\n⚠️ Pomalejší\n✅ Rychlejší\n\n\nSpojování výsledků\n⚠️ Velmi složité\n✅ Jednoduché (seznamy)\n\n\n\n\n\n\n\n\n\n\n\n\nImportantZávěr\n\n\n\nModel Builder = skvělý start, vizuální, rychlý pro jednoduché úlohy\nPython = mocný nástroj pro opakování, složitou logiku, automatizaci"
  },
  {
    "objectID": "lessons/lesson_01.html#různé-vzdálenosti---motivace-pro-iterátory",
    "href": "lessons/lesson_01.html#různé-vzdálenosti---motivace-pro-iterátory",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "4.1 Různé vzdálenosti - motivace pro iterátory",
    "text": "4.1 Různé vzdálenosti - motivace pro iterátory\nScénář: Chceme analyzovat 4 různé vzdálenosti: 100m, 300m, 500m, 1000m\n\n4.1.1 V Model Builderu bez iterátoru\nMuseli byste:\n\nZměnit Buffer distance na 100m → Spustit → vysledek_100.dbf\nZměnit na 300m → Spustit → vysledek_300.dbf\nZměnit na 500m → Spustit → vysledek_500.dbf\nZměnit na 1000m → Spustit → vysledek_1000.dbf\n\n⏱️ Čas: 15-20 minut\n😫 Problém: Nudné, náchylné k chybě, 4 samostatné tabulky\n\n\n4.1.2 S iterátorem (příští týden)\n\nflowchart TD\n    A[Tabulka vzdáleností:&lt;br/&gt;100, 300, 500, 1000] --&gt; B[ITERÁTOR]\n    B --&gt; C[Buffer %Distance%]\n    C --&gt; D[Zonal Statistics]\n    D --&gt; E[vysledek_%Distance%.dbf]\n    \n    style B fill:#fd8d3c\n    style E fill:#6baed6\n\n\n\n\nflowchart TD\n    A[Tabulka vzdáleností:&lt;br/&gt;100, 300, 500, 1000] --&gt; B[ITERÁTOR]\n    B --&gt; C[Buffer %Distance%]\n    C --&gt; D[Zonal Statistics]\n    D --&gt; E[vysledek_%Distance%.dbf]\n    \n    style B fill:#fd8d3c\n    style E fill:#6baed6\n\n\n Model s iterátorem \n\n\n\n\n\n\n\n\n\nTipVýhoda\n\n\n\nSpustíte jednou, iterator automaticky projde všechny vzdálenosti!\n\n\n\n\n\n\n\n\nWarningAle…\n\n\n\nDostanete 4 samostatné tabulky:\n\nvysledek_100.dbf → MEAN = 0.42\nvysledek_300.dbf → MEAN = 0.38\nvysledek_500.dbf → MEAN = 0.35\nvysledek_1000.dbf → MEAN = 0.31\n\nJak je spojíte do jedné pro porovnání?\nV Model Builderu složité (Add Field + Calculate Field + Merge pro každou tabulku).\nV Pythonu jednoduché (seznam)!"
  },
  {
    "objectID": "lessons/lesson_01.html#kombinace-parametrů---motivace-pro-python",
    "href": "lessons/lesson_01.html#kombinace-parametrů---motivace-pro-python",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "4.2 Kombinace parametrů - motivace pro Python",
    "text": "4.2 Kombinace parametrů - motivace pro Python\nScénář: Chceme analyzovat:\n\n2 typy komunikací (železnice, silnice I. třídy)\n× 4 vzdálenosti (100, 300, 500, 1000)\n= 8 kombinací\n\n\n4.2.1 V Model Builderu\n\nflowchart TD\n    A[Model 1: Iterátor komunikací] --&gt; B[železnice]\n    A --&gt; C[Silnice I.]\n    B --&gt; D[Model 2: Iterátor vzdáleností]\n    C --&gt; E[Model 2: Iterátor vzdáleností]\n    D --&gt; F[4 tabulky]\n    E --&gt; G[4 tabulky]\n    \n    style A fill:#fd8d3c\n    style D fill:#fee391\n    style E fill:#fee391\n\n\n\n\nflowchart TD\n    A[Model 1: Iterátor komunikací] --&gt; B[železnice]\n    A --&gt; C[Silnice I.]\n    B --&gt; D[Model 2: Iterátor vzdáleností]\n    C --&gt; E[Model 2: Iterátor vzdáleností]\n    D --&gt; F[4 tabulky]\n    E --&gt; G[4 tabulky]\n    \n    style A fill:#fd8d3c\n    style D fill:#fee391\n    style E fill:#fee391\n\n\n Vnořené modely (složité!) \n\n\n\n\n\n\n\n\n\nWarningProblémy\n\n\n\n\nPotřebujete 2 vnořené modely (složité nastavení!)\nModel 1 (vnější) volá Model 2 (vnitřní)\nVýsledek: 8 samostatných tabulek\nJak je spojit? Velmi složité…\n\n\n\n\n\n4.2.2 V Pythonu\nkomunikace = ['dalnice', 'silnice1']\nvzdalenosti = [100, 300, 500, 1000]\n\nvysledky = []\n\nfor kom in komunikace:\n    for vzd in vzdalenosti:\n        vysledek = analyzuj(kom, vzd)\n        vysledky.append({\n            'Komunikace': kom,\n            'Vzdalenost': vzd,\n            'Procento_lesu': vysledek\n        })\n\n# Jedna tabulka, 8 řádků!\nuloz_tabulku(vysledky, 'vsechny_vysledky.csv')\n\n\n\n\n\n\nImportantVidíte rozdíl?\n\n\n\nModel Builder: 2 modely, 8 tabulek, složité spojování\nPython: Vnořený for cyklus (5 řádků), hotovo!"
  },
  {
    "objectID": "lessons/lesson_01.html#co-jsme-se-dnes-naučili",
    "href": "lessons/lesson_01.html#co-jsme-se-dnes-naučili",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "5.1 Co jsme se dnes naučili",
    "text": "5.1 Co jsme se dnes naučili\n\n\n\n\n\n\nTipPřehled lekce\n\n\n\n✅ Struktura kurzu\n\n12 týdnů od Model Builderu k Pythonu\nPraktické příklady motivace\n\n✅ Praktická úloha\n\nAnalýza krajinného pokryvu v ochranných pásmech\n5 kroků: výběr → clip → buffer → binární rastr → zonální statistika\nVýsledek: procento lesů v pásmu 500m kolem železnic\n\n✅ Export do Pythonu\n\nModel = Python kód\nPrvní pohled na Python syntax\nSrovnání Model Builder vs. Python\n\n✅ Limity Model Builderu\n\nOpakování = ruční spouštění nebo iterátory\nVíce tabulek = složité spojování\nVnořené cykly = velmi složité\nMotivace pro Python!"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-priste",
    "href": "lessons/lesson_01.html#sec-priste",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "5.2 Co nás čeká příště (Lekce 2)",
    "text": "5.2 Co nás čeká příště (Lekce 2)\n\nPrvní část - IterátoryDruhá část - Model ToolTřetí část - Vnořené modely\n\n\n\nITERÁTORY v Model Builderu\nIterate Field Values - procházení různých vzdáleností\nAutomatické opakování\nProblém: 4 samostatné tabulky - jak spojit?\n\n\n\n\nZ modelu vytvoříme nástroj s GUI\nParametry: uživatel si vybere vzdálenost\nNástroj můžete sdílet s kolegy\nPoužití v dalších modelech\n\n\n\n\nModel volá jiný model\nZpůsob, jak obejít “max 1 iterátor”\nUkáže limity Model Builderu\nMotivace pro Python vnořené cykly"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-pojmy",
    "href": "lessons/lesson_01.html#sec-pojmy",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "5.3 Klíčové pojmy",
    "text": "5.3 Klíčové pojmy\n\n\n\nTable 3: Klíčové pojmy z lekce\n\n\n\n\n\nPojem\nVýznam\n\n\n\n\nAutomatizace\nOpakované spouštění úloh bez lidského zásahu\n\n\nModel Builder\nNástroj pro vizuální tvorbu workflow\n\n\nWorkflow\nPosloupnost kroků vedoucí k výsledku\n\n\nIterator\nMechanismus pro automatické opakování (příště)\n\n\nArcPy\nPython knihovna pro ArcGIS\n\n\nZonální statistika\nVýpočet statistik v definovaných zónách\n\n\nBinární rastr\nRastr s hodnotami 0/1 (ano/ne)\n\n\nDissolve\nSpojení více prvků do jednoho"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol",
    "href": "lessons/lesson_01.html#sec-ukol",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "5.4 Domácí úkol (volitelný)",
    "text": "5.4 Domácí úkol (volitelný)\nProcvičte si látku pomocě volitelných úkolů níže.\n\n\n\n\n\n\nTipDoporučení\n\n\n\n\nZačněte Úkolem 1 (lehký) - určitě zvládnete!\nPokud vás to baví, zkuste Úkol 2 nebo 3\nÚkol 4 je pro prozkoumání Python kódu\nÚkol 5 (BONUS) je záměrně velmi těžký - ukáže vám limity MB"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol1",
    "href": "lessons/lesson_01.html#sec-ukol1",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "6.1 Úkol 1: Změna parametrů modelu ⭐",
    "text": "6.1 Úkol 1: Změna parametrů modelu ⭐\n\n\n\n\n\n\nNoteObtížnost: Lehká\n\n\n\nCíl: Naučit se měnit parametry v modelu a vidět, jak to ovlivní výsledky.\n\n\nZadání:\nUpravte svůj model tak, aby analyzoval pásmo 300 metrů (místo 500m) kolem železnic v okrese Jindřichův Hradec.\nOčekávaný výsledek:\n\nUpravený model s bufferem 300m\nNová výsledná tabulka\nPorovnání: je procento lesů v pásmu 300m vyšší nebo nižší než v 500m? Proč?\n\n\n\n\n\n\n\nTipPostup\n\n\n\n\n\n\nOtevřete svůj model Analyza_Lesu_v_Pasmu\nDvojklik na nástroj Buffer\nZměňte Distance: 500 Meters → 300 Meters\nZměňte název výstupu: buffer_500m → buffer_300m\nZměňte název výsledné tabulky: vysledek_lesy.dbf → vysledek_lesy_300m.dbf\nUložte a spusťte model\nPorovnejte výsledky (MEAN hodnoty)\n\n\n\n\nOtázky k zamyšlení:\n\nJe procento lesů v užším pásmu (300m) jiné než v širším (500m)?\nJak byste to vysvětlili? (Nápověda: rozmístění lesů vs. železnic)\n\n\n\n\n\n\n\nTipBonus\n\n\n\n\n\nVytvořte tabulku v Excelu s porovnáním:\n\n\n\nVzdálenost\nProcento lesů\n\n\n\n\n300m\nX.X%\n\n\n500m\nY.Y%\n\n\n\nVytvořte graf závislosti procenta lesů na vzdálenosti od železnic."
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol2",
    "href": "lessons/lesson_01.html#sec-ukol2",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "6.2 Úkol 2: Jiný okres ⭐⭐",
    "text": "6.2 Úkol 2: Jiný okres ⭐⭐\n\n\n\n\n\n\nNoteObtížnost: Střední\n\n\n\nCíl: Pochopit, jak změnit atributový dotaz v modelu.\n\n\nZadání:\nUpravte model tak, aby analyzoval okres Praha-východ (místo Jindřichův Hradec).\nOčekávaný výsledek:\n\nModel fungující pro okres Praha-východ\nVýsledná tabulka s procentem lesů\nPorovnání: má Praha-východ více nebo méně lesů v pásmech kolem železnic než JH?\n\n\n\n\n\n\n\nTipPostup\n\n\n\n\n\n\nNejdřív zjistěte přesný název okresu:\n\nOtevřete atributovou tabulku vrstvy okresy\nNajděte pole NAZ_LAU1\nNajděte řádek s Prahou-východ (může být “Praha-východ” nebo “Praha - východ”)\n\nV modelu: dvojklik na Make Feature Layer\nZměňte Expression:\nNAZ_LAU1 = 'Praha-východ'\n(Pozor na přesný zápis!)\nZměňte názvy výstupů, aby bylo jasné, že jde o jiný okres\nSpusťte model\n\n\n\n\n\n\n\n\n\n\nWarningNápověda\n\n\n\n\n\n\nPokud model hlásí “0 features selected”, zkontrolujte přesný název okresu v datech\nMůže být potřeba použít LIKE místo =:\nNAZ_LAU1 LIKE '%Praha%východ%'\n\n\n\n\n\n\n\n\n\n\nTipBonus\n\n\n\n\n\nVytvořte srovnávací tabulku pro 3-5 různých okresů:\n\n\n\nOkres\nProcento lesů\n\n\n\n\nJindřichův Hradec\n35.4%\n\n\nPraha-východ\n?\n\n\nPrachatice\n?\n\n\n…\n…\n\n\n\nKterý okres má nejvíce lesů kolem železnic?"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol3",
    "href": "lessons/lesson_01.html#sec-ukol3",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "6.3 Úkol 3: Jiný typ krajinného pokryvu ⭐⭐",
    "text": "6.3 Úkol 3: Jiný typ krajinného pokryvu ⭐⭐\n\n\n\n\n\n\nNoteObtížnost: Střední\n\n\n\nCíl: Naučit se analyzovat různé kategorie dat změnou jednoho parametru.\n\n\nZadání:\nAnalyzujte zastoupení zemědělské půdy (CLC kód 2) místo lesů v pásmu 500m kolem železnic v okrese JH.\nOčekávaný výsledek:\n\nModel analyzující zemědělskou půdu\nPorovnání: je v pásmu více lesů nebo zemědělské půdy?\n\n\n\n\n\n\n\nTipPostup\n\n\n\n\n\n\nV modelu: dvojklik na nástroj Equal To\nZměňte Input value: 3 → 2\nZměňte názvy výstupů:\n\nlesy_binarni → zempuda_binarni\nvysledek_lesy.dbf → vysledek_zempuda.dbf\n\nSpusťte model\n\n\n\n\n\n\n\n\n\n\nTipRozšíření\n\n\n\n\n\nVytvořte tabulku se všemi typy krajinného pokryvu:\n\n\n\nCLC kód\nTyp\nProcento\n\n\n\n\n1\nUrbanizované plochy\n?\n\n\n2\nZemědělská půda\n?\n\n\n3\nLesy\n35.4%\n\n\n4\nMokřady\n?\n\n\n5\nVodní plochy\n?\n\n\n\n(Musíte spustit model 5× s různými kódy)\n\n\n\n\n\n\n\n\n\nImportantOtázka k zamyšlení\n\n\n\nJe tento postup efektivní? Co kdybyste chtěli 10 kategorií? 50?\nOdpověď: Proto se naučíme iterátory (příště) a Python (za měsíc)!"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol4",
    "href": "lessons/lesson_01.html#sec-ukol4",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "6.4 Úkol 4: Export a zkoumání Python kódu ⭐",
    "text": "6.4 Úkol 4: Export a zkoumání Python kódu ⭐\n\n\n\n\n\n\nNoteObtížnost: Lehká\n\n\n\nCíl: Seznámit se s Python syntaxí na vašem vlastním modelu.\n\n\nZadání:\nExportujte váš model do Pythonu a prozkoumejte kód.\n\n\n\n\n\n\nTipPostup\n\n\n\n\n\n\nV Model Builderu: Model → Export → To Python Script\nUložte jako muj_model.py\nOtevřete v textovém editoru (Notepad++, VS Code, nebo Poznámkový blok)\n\n\n\n\nÚkoly v kódu:\n\nA) NajděteB) ExperimentujteC) Přemýšlejte\n\n\nNajděte a zvýrazněte:\n\nŘádek s importem arcpy\nŘádek, kde se vytváří buffer 500m\nŘádek s SQL dotazem pro okres\nŘádek s hodnotou pro lesy (3)\n\n\n\nExperimentujte (bez spouštění!):\n\nZkuste změnit \"500 Meters\" na \"1000 Meters\" - na kterém řádku?\nNajděte místo, kde byste změnili okres na jiný\nKolik řádků by bylo potřeba změnit, abyste změnili vzdálenost? A v modelu?\n\n\n\nPřemýšlejte:\n\nJe kód čitelný? Rozumíte alespoň trochu, co dělá?\nKteré části jsou jasné, které ne?\nVidíte výhody textové podoby vs. grafické?\nJak by se v Pythonu řešilo 4 různé vzdálenosti?\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nPoznámka: Kód zatím nespouštějte - to se naučíme příště. Teď jen pozorujte strukturu."
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol5",
    "href": "lessons/lesson_01.html#sec-ukol5",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "6.5 Úkol 5 (BONUS): Čtyři vzdálenosti - ukázka problému ⭐⭐⭐",
    "text": "6.5 Úkol 5 (BONUS): Čtyři vzdálenosti - ukázka problému ⭐⭐⭐\n\n\n\n\n\n\nWarningObtížnost: Velmi těžká\n\n\n\nVAROVÁNÍ: Tento úkol je záměrně obtížný! Jeho cílem je ukázat vám problém, který v příští lekci vyřešíme iterátorem, a za měsíc elegantně v Pythonu.\nNebojte se, pokud se vám to nepodaří - právě proto se učíme Python! 😊\n\n\nZadání:\nSpočítejte procento lesů pro 4 různé vzdálenosti: 100m, 300m, 500m, 1000m\nOčekávaný výsledek:\nTabulka (v Excelu nebo jako poznámky):\n\n\n\nVzdálenost\nProcento lesů\n\n\n\n\n100m\n?\n\n\n300m\n?\n\n\n500m\n35.4%\n\n\n1000m\n?\n\n\n\n\nPřístup A (manuální)Přístup B (preview iterátoru)\n\n\nPřístup A (nejjednodušší, ale nudný):\n\nSpusťte model s 100m → zapište výsledek\nZměňte na 300m, spusťte → zapište výsledek\nZměňte na 500m, spusťte → zapište výsledek (už máte)\nZměňte na 1000m, spusťte → zapište výsledek\n\nMěřte čas: Kolik celkem trvalo všech 4 spuštění?\n\n\nPřístup B (pokročilý - preview na příští týden):\nPokud se chcete pokusit o iterátor již nyní:\n\nVytvořte v Excelu nebo jako DBF tabulku se vzdálenostmi:\nDistance\n100\n300\n500\n1000\nPřidejte do modelu Iterate Field Values\nZkuste propojit s bufferem…\n\nPoznámka: Pravděpodobně narazíte na problémy! To je v pořádku - příští týden to společně vyřešíme.\n\n\n\n\n6.5.1 Reflexe (důležitější než řešení!)\nPo dokončení napište:\n\nKolik času vám to zabralo?\nKolik chyb jste udělali? (zapomenuté změny parametru, špatné názvy…)\nJak byste se cítili, kdyby zadání bylo 20 vzdáleností?\nVidíte potřebu automatizace?\n\n\n\n\n\n\n\nImportantUkázka Python řešení (jen se podívejte)\n\n\n\n\n\n# V Pythonu by to vypadalo takto (nemusíte rozumět detailům):\n\nvzdalenosti = [100, 300, 500, 1000]\nvysledky = []\n\nfor vzd in vzdalenosti:\n    # Buffer\n    buffer = arcpy.Buffer_analysis(\n        dalnice_clip, \n        f\"buffer_{vzd}m\",\n        f\"{vzd} Meters\",\n        dissolve_option=\"ALL\"\n    )\n    \n    # Equal To\n    binary = arcpy.sa.EqualTo(clc_2018, 3)\n    \n    # Zonal Statistics\n    stats = arcpy.sa.ZonalStatisticsAsTable(\n        buffer, \"OBJECTID\", binary,\n        f\"stats_{vzd}.dbf\", statistics_type=\"MEAN\"\n    )\n    \n    # Přečíst výsledek\n    with arcpy.da.SearchCursor(stats, [\"MEAN\"]) as cursor:\n        mean_value = next(cursor)[0]\n    \n    # Uložit\n    vysledky.append({\n        'Vzdalenost': vzd,\n        'Procento': mean_value * 100\n    })\n\n# Vytvoř jednu tabulku se všemi výsledky\nimport pandas as pd\ndf = pd.DataFrame(vysledky)\ndf.to_csv('vysledky_vsechny.csv')\n\nprint(\"Hotovo! Všechny 4 vzdálenosti zpracovány.\")\nprint(df)\nVýstup:\n   Vzdalenost  Procento\n0         100     42.3\n1         300     38.1\n2         500     35.4\n3        1000     31.2\n\nHotovo! Všechny 4 vzdálenosti zpracovány.\nPonaučení: Vidíte, proč se učíme Python? 😊"
  },
  {
    "objectID": "lessons/lesson_01.html#dokumentace",
    "href": "lessons/lesson_01.html#dokumentace",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "7.1 Dokumentace",
    "text": "7.1 Dokumentace\n\n\n\n\n\n\nTipArcGIS Pro\n\n\n\n\nModel Builder dokumentace\nGeoprocessing nástroje\nIterators in ModelBuilder\n\n\n\n\n\n\n\n\n\nTipArcPy (Python)\n\n\n\n\nArcPy dokumentace\nArcPy Get Started"
  },
  {
    "objectID": "lessons/lesson_01.html#corine-land-cover",
    "href": "lessons/lesson_01.html#corine-land-cover",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "7.2 Corine Land Cover",
    "text": "7.2 Corine Land Cover\n\nCorine Land Cover - dokumentace\nCLC Nomenclature"
  },
  {
    "objectID": "lessons/lesson_01.html#tipy-na-další-studium",
    "href": "lessons/lesson_01.html#tipy-na-další-studium",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "7.3 Tipy na další studium",
    "text": "7.3 Tipy na další studium\n\nProcvičujte: Čím víc modelů vytvoříte, tím lépe pochopíte workflow\nExperimentujte: Zkuste různé nástroje a parametry\nDokumentujte: Pište si poznámky k modelům (Description v properties)\nPřipravte se na iterátory: Přemýšlejte, co by se dalo automatizovat\nSledujte Python kód: I když mu ještě nerozumíte, zvykejte si na syntax"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python-for-ArcGIS-CZU",
    "section": "",
    "text": "Python-for-ArcGIS-CZU\nZde naleznete materiály k předmětu Programování pro GIS a DPZ, vyučovaným na Fakultě životního prostředí ČZU v Praze. Obsahem předmětu jsou pokročilé metody ovládání funkcionality programu ArcGIS: Model Builder, ale především psaní skriptů v programovacím jazyce Python. Nepředpokládá se žádná předchozí znalost programování (i když je jistě výhodou), naopak součástí kurzu je úvod do programování v Pythonu."
  },
  {
    "objectID": "lessons/lesson_03.html",
    "href": "lessons/lesson_03.html",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "",
    "text": "Po absolvování této lekce budete umět:\n\nVysvětlit, co je Python a proč se používá v GIS\nSpustit první Python program\nPracovat se základními datovými typy (čísla, text)\nPoužívat proměnné pro ukládání dat\nKomunikovat s uživatelem pomocí print() a input()\nPracovat se seznamy (vytvoření, indexování, přidávání prvků)\n\nČasová dotace: 90 minut"
  },
  {
    "objectID": "lessons/lesson_03.html#úrovně-programovacích-jazyků",
    "href": "lessons/lesson_03.html#úrovně-programovacích-jazyků",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "2.1 Úrovně programovacích jazyků",
    "text": "2.1 Úrovně programovacích jazyků\nPočítač rozumí pouze binárním instrukcím (0 a 1). Programovací jazyky se liší tím, jak blízko jsou lidskému myšlení nebo hardwaru.\n\n2.1.1 Nízkoúrovňové jazyky (blízko hardwaru)\nStrojový kód: - Binární instrukce (01001011 10110100…) - Přímo vykonává procesor - Téměř nečitelné pro člověka\nAssembly: - Nejnižší “lidsky čitelný” jazyk - Každá instrukce = jedna operace procesoru - Zkratky: MOV, ADD, JMP\nMOV AX, 5      ; Ulož 5 do paměti\nADD AX, 3      ; Přičti 3\nKdy se používá: Ovladače hardwaru, jádro operačního systému, kritické části vyžadující maximální rychlost.\n\n\n2.1.2 Vysokoúrovňové jazyky (blízko lidskému myšlení)\nVlastnosti: - Čitelný kód (if, for, print()) - Abstrakce - nemusíte řešit detaily hardwaru - Přenositelnost - stejný kód na různých platformách - Rychlejší vývoj, méně chyb\nPříklady: Python, Java, C++, R, JavaScript\nSrovnání Assembly vs. Python:\n; Assembly\nMOV AX, 5\nADD AX, 3\n# Python\nvysledek = 5 + 3\n\n\n2.1.3 Kde je Python?\nPython patří mezi vysokoúrovňové jazyky - hodně abstraktní a čitelný. Snadno se učí, ale je pomalejší než C++.\nHierarchie:\nStrojový kód (0101...)\n       ↓\nAssembly (MOV, ADD...)\n       ↓\nC, C++\n       ↓\nPython, Java"
  },
  {
    "objectID": "lessons/lesson_03.html#interpretovaný-vs.-kompilovaný-jazyk",
    "href": "lessons/lesson_03.html#interpretovaný-vs.-kompilovaný-jazyk",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "2.2 Interpretovaný vs. kompilovaný jazyk",
    "text": "2.2 Interpretovaný vs. kompilovaný jazyk\nPython = interpretovaný jazyk - kód se překládá a vykonává řádek po řádku:\nscript.py → Python interpret → Spuštění\nKompilované jazyky (C, C++) - celý program se nejprve přeloží:\nprogram.c → Kompilátor → strojový kód (.exe) → Spuštění\nVýhody interpretace: - ✅ Napíšete kód a okamžitě ho spustíte - ✅ Snadné ladění - ✅ Přenositelnost\nNevýhody: - ❌ Pomalejší než kompilované jazyky - ❌ Vyžaduje nainstalovaný Python interpret\n\n\n\n\n\n\nTipPro GIS je rychlost dostatečná\n\n\n\nPro většinu GIS úloh je rychlost Pythonu více než dostatečná. Co ušetříte na času psaní kódu mnohonásobně převýší ztrátu rychlosti běhu."
  },
  {
    "objectID": "lessons/lesson_03.html#proč-python-pro-gis",
    "href": "lessons/lesson_03.html#proč-python-pro-gis",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "2.3 Proč Python pro GIS?",
    "text": "2.3 Proč Python pro GIS?\n\nJednoduchý - zvládne ho úplný začátečník bez zkušeností s programováním\nVýkonný - objektově orientovaný jazyk pro krátké skripty i rozsáhlé programy\nMultiplatformní - funguje stejně ve Windows, Linuxu i macOS\nPopulární - rozsáhlá dokumentace, výukové materiály, fóra, obrovské množství knihoven\nOpen source a zdarma\nBohaté GIS knihovny - vektorové a rastrové analýzy, tvorba map, publikace na webu\nVýlučný skriptovací jazyk v ArcGIS Pro pro automatizaci GIS operací"
  },
  {
    "objectID": "lessons/lesson_03.html#způsob-1-interaktivní-režim",
    "href": "lessons/lesson_03.html#způsob-1-interaktivní-režim",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "3.1 Způsob 1: Interaktivní režim",
    "text": "3.1 Způsob 1: Interaktivní režim\n\nOtevřete Command Prompt (Windows) nebo Terminal (Mac/Linux)\nNapište python a stiskněte Enter\nUvidíte něco jako:\n\nPython 3.9.11 (...)\n&gt;&gt;&gt; \n\nNapište:\n\n&gt;&gt;&gt; print(\"Hello World\")\n\nStiskněte Enter\n\nVýsledek:\nHello World\n\n\n\n\n\n\nTipInteraktivní režim\n\n\n\nTento režim je skvělý pro rychlé testování kódu. Každý příkaz se provede okamžitě po stisku Enter. Pro ukončení napište exit() nebo stiskněte Ctrl+Z (Windows) / Ctrl+D (Mac/Linux)."
  },
  {
    "objectID": "lessons/lesson_03.html#způsob-2-python-skript",
    "href": "lessons/lesson_03.html#způsob-2-python-skript",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "3.2 Způsob 2: Python skript",
    "text": "3.2 Způsob 2: Python skript\n\nOtevřete textový editor (Notepad, VS Code, Notepad++)\nNapište:\n\nprint(\"Hello World\")\n\nUložte jako hello.py (důležité je přípona .py)\nV příkazové řádce (v adresáři se souborem) spusťte:\n\npython hello.py\nVýsledek:\nHello World\n\n\n\n\n\n\nTipPython skripty\n\n\n\nSoubory s příponou .py jsou Python skripty. Výhoda oproti interaktivnímu režimu:\n\nKód můžete uložit a znovu použít\nMůžete psát delší programy\nSnadno se sdílí s kolegy\n\n\n\n\n\n\n\n\n\nNoteJupyter Notebook v ArcGIS Pro\n\n\n\nPozději v kurzu budeme používat Jupyter Notebook, který je integrovaný v ArcGIS Pro. Otevřete ho přes: Insert → New Notebook\nVýhoda: Kombinuje kód, výsledky a text v jednom dokumentu. Ideální pro analýzy a experimenty s ArcPy.\n\n\n\n\n\n\n\n\nTipVirtuální prostředí (pro pokročilé)\n\n\n\nArcGIS Pro má vlastní conda prostředí s nainstalovaným Pythonem a ArcPy. Zatím se o to nemusíte starat - vše je připravené. Pokud budete později pracovat s Pythonem mimo ArcGIS, vrátíme se k tématu virtuálních prostředí.\n\n\n\n\n\n\n\n\nImportantFunkce print()\n\n\n\nprint() je základní funkce pro výpis textu na obrazovku. Používá se pro:\n\nZobrazení výsledků\nLadění programu (debugging)\nKomunikaci s uživatelem"
  },
  {
    "objectID": "lessons/lesson_03.html#co-je-proměnná",
    "href": "lessons/lesson_03.html#co-je-proměnná",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "4.1 Co je proměnná?",
    "text": "4.1 Co je proměnná?\nProměnná je pojmenované místo v paměti, kde ukládáme data.\njmeno = \"Jan\"\nvek = 25\n\njmeno je proměnná, která obsahuje text \"Jan\"\nvek je proměnná, která obsahuje číslo 25"
  },
  {
    "objectID": "lessons/lesson_03.html#základní-datové-typy",
    "href": "lessons/lesson_03.html#základní-datové-typy",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "4.2 Základní datové typy",
    "text": "4.2 Základní datové typy\n\n4.2.1 Celá čísla (int)\nvek = 25\npocet_bodu = 150\n\n\n4.2.2 Desetinná čísla (float)\nprumerna_teplota = 15.7\nnadmorska_vyska = 234.5\n\n\n4.2.3 Text (string nebo str)\njmeno = \"Jan Novák\"\nmesto = 'Praha'  # Fungují jednoduché i dvojité uvozovky\n\n\n4.2.4 Logické hodnoty (bool)\nje_student = True\nje_zamestnanec = False\n\n\n\n\n\n\nWarningPozor na velká písmena!\n\n\n\nV Pythonu záleží na velikosti písmen:\n\nTrue a False - správně (s velkým písmenem)\ntrue a false - CHYBA!"
  },
  {
    "objectID": "lessons/lesson_03.html#pojmenování-proměnných",
    "href": "lessons/lesson_03.html#pojmenování-proměnných",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "4.3 Pojmenování proměnných",
    "text": "4.3 Pojmenování proměnných\nPravidla:\n\nZačíná písmenem nebo podtržítkem: jmeno, _temp\nMůže obsahovat písmena, čísla, podtržítka: vek_2, pocet_bodu\nNesmí obsahovat mezery: moje jmeno ❌\nNesmí začínat číslem: 2vek ❌\nJe case-sensitive: Jmeno ≠ jmeno\n\nKonvence (doporučení):\n\nPoužívejte malá písmena s podtržítky: pocet_obyvatel\nVýstižné názvy: teplota je lepší než t"
  },
  {
    "objectID": "lessons/lesson_03.html#základní-operace",
    "href": "lessons/lesson_03.html#základní-operace",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "5.1 Základní operace",
    "text": "5.1 Základní operace\n# Sčítání\n5 + 3  # 8\n\n# Odčítání\n10 - 4  # 6\n\n# Násobení\n3 * 4  # 12\n\n# Dělení (výsledek je vždy float!)\n10 / 3  # 3.3333...\n\n# Celočíselné dělení\n10 // 3  # 3\n\n# Zbytek po dělení (modulo)\n10 % 3  # 1\n\n# Mocnina\n2 ** 3  # 8 (2 na třetí)"
  },
  {
    "objectID": "lessons/lesson_03.html#příklady-s-proměnnými",
    "href": "lessons/lesson_03.html#příklady-s-proměnnými",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "5.2 Příklady s proměnnými",
    "text": "5.2 Příklady s proměnnými\nvyska = 180  # cm\nhmotnost = 75  # kg\n\n# BMI = hmotnost / (vyska v metrech)^2\nvyska_m = vyska / 100\nbmi = hmotnost / (vyska_m ** 2)\n\nprint(bmi)  # 23.148..."
  },
  {
    "objectID": "lessons/lesson_03.html#spojování-stringů",
    "href": "lessons/lesson_03.html#spojování-stringů",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "6.1 Spojování stringů",
    "text": "6.1 Spojování stringů\njmeno = \"Jan\"\nprijmeni = \"Novák\"\n\n# Spojení (concatenation)\ncele_jmeno = jmeno + \" \" + prijmeni\nprint(cele_jmeno)  # Jan Novák"
  },
  {
    "objectID": "lessons/lesson_03.html#f-stringy-doporučený-způsob",
    "href": "lessons/lesson_03.html#f-stringy-doporučený-způsob",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "6.2 f-stringy (doporučený způsob!)",
    "text": "6.2 f-stringy (doporučený způsob!)\nf-stringy jsou nejmodernější a nejčitelnější způsob práce s textem:\njmeno = \"Jan\"\nvek = 25\n\n# Starý způsob (concatenation)\nzprava = \"Jmenuji se \" + jmeno + \" a je mi \" + str(vek) + \" let.\"\n\n# f-string (moderní způsob)\nzprava = f\"Jmenuji se {jmeno} a je mi {vek} let.\"\n\nprint(zprava)\n# Výsledek: Jmenuji se Jan a je mi 25 let.\n\n\n\n\n\n\nTipProč f-stringy?\n\n\n\n\nČitelnější kód\nAutomatická konverze typů\nMůžete vkládat výrazy: f\"BMI: {hmotnost / (vyska ** 2)}\""
  },
  {
    "objectID": "lessons/lesson_03.html#převod-mezi-typy",
    "href": "lessons/lesson_03.html#převod-mezi-typy",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "6.3 Převod mezi typy",
    "text": "6.3 Převod mezi typy\nvek = 25\nvek_text = str(vek)  # \"25\"\n\ncislo_text = \"100\"\ncislo = int(cislo_text)  # 100\n\ndesetinne_cislo_text = \"3.14\"\ndesetinne_cislo = float(desetinne_cislo_text)  # 3.14"
  },
  {
    "objectID": "lessons/lesson_03.html#funkce-input",
    "href": "lessons/lesson_03.html#funkce-input",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "7.1 Funkce input()",
    "text": "7.1 Funkce input()\ninput() slouží k načtení vstupu od uživatele:\njmeno = input(\"Jak se jmenujete? \")\nprint(f\"Zdravím vás, {jmeno}!\")\nPrůběh:\nJak se jmenujete? Jan\nZdravím vás, Jan!\n\n\n\n\n\n\nWarningPozor! input() vrací vždy STRING!\n\n\n\nI když uživatel zadá číslo, input() vrací text:\nvek = input(\"Kolik je vám let? \")  # vek je STRING!\n# Musíme převést:\nvek = int(input(\"Kolik je vám let? \"))  # Teď je to INT"
  },
  {
    "objectID": "lessons/lesson_03.html#praktický-příklad",
    "href": "lessons/lesson_03.html#praktický-příklad",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "7.2 Praktický příklad",
    "text": "7.2 Praktický příklad\n# Kalkulačka BMI\njmeno = input(\"Vaše jméno: \")\nvyska = float(input(\"Výška v cm: \"))\nhmotnost = float(input(\"Hmotnost v kg: \"))\n\nvyska_m = vyska / 100\nbmi = hmotnost / (vyska_m ** 2)\n\nprint(f\"{jmeno}, vaše BMI je: {bmi:.2f}\")\nPříklad běhu:\nVaše jméno: Jan\nVýška v cm: 180\nHmotnost v kg: 75\nJan, vaše BMI je: 23.15"
  },
  {
    "objectID": "lessons/lesson_03.html#co-je-seznam",
    "href": "lessons/lesson_03.html#co-je-seznam",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.1 Co je seznam?",
    "text": "8.1 Co je seznam?\nSeznam je uspořádaná kolekce prvků. Může obsahovat čísla, text, nebo cokoliv jiného:\nteploty = [15, 18, 22, 19, 16]\nmesta = [\"Praha\", \"Brno\", \"Ostrava\"]\nsmiseny = [1, \"text\", 3.14, True]  # Může být i mix!"
  },
  {
    "objectID": "lessons/lesson_03.html#vytvoření-seznamu",
    "href": "lessons/lesson_03.html#vytvoření-seznamu",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.2 Vytvoření seznamu",
    "text": "8.2 Vytvoření seznamu\nprazdny_seznam = []\ncisla = [1, 2, 3, 4, 5]\njmena = [\"Anna\", \"Petr\", \"Jana\"]"
  },
  {
    "objectID": "lessons/lesson_03.html#indexování",
    "href": "lessons/lesson_03.html#indexování",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.3 Indexování",
    "text": "8.3 Indexování\nDŮLEŽITÉ: Python indexuje od 0!\nmesta = [\"Praha\", \"Brno\", \"Ostrava\", \"Plzeň\"]\n\nprint(mesta[0])   # Praha (první prvek!)\nprint(mesta[1])   # Brno (druhý prvek)\nprint(mesta[3])   # Plzeň (čtvrtý prvek)\nprint(mesta[-1])  # Plzeň (poslední prvek)\nprint(mesta[-2])  # Ostrava (předposlední)\n\n\n\n\n\n\nWarningPozor na indexování od 0!\n\n\n\nToto je častá chyba začátečníků:\ncisla = [10, 20, 30, 40, 50]\nprint(cisla[1])  # 20, NE 10!\nprint(cisla[5])  # CHYBA! Index mimo rozsah"
  },
  {
    "objectID": "lessons/lesson_03.html#délka-seznamu",
    "href": "lessons/lesson_03.html#délka-seznamu",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.4 Délka seznamu",
    "text": "8.4 Délka seznamu\nmesta = [\"Praha\", \"Brno\", \"Ostrava\"]\npocet = len(mesta)  # 3"
  },
  {
    "objectID": "lessons/lesson_03.html#přidávání-prvků",
    "href": "lessons/lesson_03.html#přidávání-prvků",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.5 Přidávání prvků",
    "text": "8.5 Přidávání prvků\ncisla = [1, 2, 3]\ncisla.append(4)  # Přidá 4 na konec\nprint(cisla)  # [1, 2, 3, 4]\n\ncisla.append(5)\nprint(cisla)  # [1, 2, 3, 4, 5]"
  },
  {
    "objectID": "lessons/lesson_03.html#praktický-příklad-1",
    "href": "lessons/lesson_03.html#praktický-příklad-1",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.6 Praktický příklad",
    "text": "8.6 Praktický příklad\n# Program pro sběr teplot\nteploty = []\n\nteploty.append(float(input(\"Teplota v pondělí: \")))\nteploty.append(float(input(\"Teplota v úterý: \")))\nteploty.append(float(input(\"Teplota ve středu: \")))\n\nprint(f\"Naměřené teploty: {teploty}\")\nprint(f\"První den: {teploty[0]}°C\")\nprint(f\"Poslední den: {teploty[-1]}°C\")"
  },
  {
    "objectID": "lessons/lesson_03.html#cvičení-1-kalkulačka-vzdálenosti",
    "href": "lessons/lesson_03.html#cvičení-1-kalkulačka-vzdálenosti",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "9.1 Cvičení 1: Kalkulačka vzdálenosti",
    "text": "9.1 Cvičení 1: Kalkulačka vzdálenosti\nNapište program, který:\n\nZeptá se uživatele na souřadnice dvou bodů (X1, Y1, X2, Y2)\nVypočítá vzdálenost mezi nimi pomocí Pythagorovy věty: \\(d = \\sqrt{(X_2-X_1)^2 + (Y_2-Y_1)^2}\\)\nVypíše výsledek\n\nNápověda:\n# Odmocninu získáte pomocí mocniny 0.5:\nodmocnina = cislo ** 0.5"
  },
  {
    "objectID": "lessons/lesson_03.html#cvičení-2-průměrná-teplota",
    "href": "lessons/lesson_03.html#cvičení-2-průměrná-teplota",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "9.2 Cvičení 2: Průměrná teplota",
    "text": "9.2 Cvičení 2: Průměrná teplota\nNapište program, který:\n\nVytvoří prázdný seznam\nZeptá se uživatele na teploty pro 5 dní (použijte append())\nVypočítá průměrnou teplotu: prumer = sum(seznam) / len(seznam)\nVypíše výsledek ve formátu: “Průměrná teplota byla: XX.X°C”"
  },
  {
    "objectID": "lessons/lesson_03.html#cvičení-3-seznam-měst",
    "href": "lessons/lesson_03.html#cvičení-3-seznam-měst",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "9.3 Cvičení 3: Seznam měst",
    "text": "9.3 Cvičení 3: Seznam měst\nNapište program, který:\n\nVytvoří seznam 3 českých měst\nVypíše první město\nVypíše poslední město\nPřidá 2 další města pomocí append()\nVypíše celý seznam\nVypíše počet měst v seznamu"
  },
  {
    "objectID": "lessons/lesson_03.html#co-jsme-se-naučili",
    "href": "lessons/lesson_03.html#co-jsme-se-naučili",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "10.1 Co jsme se naučili",
    "text": "10.1 Co jsme se naučili\n✅ Python je interpretovaný jazyk vhodný pro GIS\n✅ print() pro výpis, input() pro načtení vstupu\n✅ Základní datové typy: int, float, str, bool\n✅ Proměnné ukládají data\n✅ f-stringy pro práci s textem\n✅ Seznamy (list) - indexování od 0!\n✅ append() pro přidávání prvků\n✅ len() pro zjištění délky"
  },
  {
    "objectID": "lessons/lesson_03.html#co-bude-příště",
    "href": "lessons/lesson_03.html#co-bude-příště",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "10.2 Co bude příště?",
    "text": "10.2 Co bude příště?\nV další lekci se naučíme:\n\nPodmínky (if, elif, else)\nCykly (for, while)\nAlgoritmizace (vyřešit úlohu pomocí kódu)"
  }
]