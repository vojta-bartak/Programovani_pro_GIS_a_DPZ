[
  {
    "objectID": "lessons/lesson_08.html",
    "href": "lessons/lesson_08.html",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "",
    "text": "Po absolvování této lekce budete umět:\n\nRozumět formátu CSV a jeho problémům\nPoužívat modul csv pro čtení a zápis\nPracovat s csv.reader() a csv.DictReader()\nZapisovat pomocí csv.writer() a csv.DictWriter()\nZpracovávat reálná data s hlavičkami\nPropojit CSV data s GIS workflow\nKombinovat funkce z math_utils s CSV daty\n\nČasová dotace: 90 minut"
  },
  {
    "objectID": "lessons/lesson_08.html#comma-separated-values",
    "href": "lessons/lesson_08.html#comma-separated-values",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "2.1 Comma-Separated Values",
    "text": "2.1 Comma-Separated Values\nCSV = Comma-Separated Values (hodnoty oddělené čárkou)\nPříklad CSV souboru:\nOkres,Populace,Rozloha\nPraha,1300000,496\nBrno,380000,230\nOstrava,290000,214\nStruktura: - První řádek = hlavička (názvy sloupců) - Další řádky = data - Hodnoty oddělené čárkou (nebo středníkem, tabulátorem…)"
  },
  {
    "objectID": "lessons/lesson_08.html#proč-csv",
    "href": "lessons/lesson_08.html#proč-csv",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "2.2 Proč CSV?",
    "text": "2.2 Proč CSV?\nVýhody: - ✅ Jednoduchý textový formát - ✅ Otevřete v Excelu, LibreOffice, Google Sheets - ✅ Malá velikost souboru - ✅ Univerzální - funguje všude - ✅ ArcGIS umí exportovat atributové tabulky jako CSV!\nNevýhody: - ❌ Žádné formátování (barvy, tučné písmo…) - ❌ Jeden list (na rozdíl od Excelu)"
  },
  {
    "objectID": "lessons/lesson_08.html#problém-s-ručním-parsováním",
    "href": "lessons/lesson_08.html#problém-s-ručním-parsováním",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "2.3 Problém s ručním parsováním",
    "text": "2.3 Problém s ručním parsováním\nCo když máte čárku v datech?\nJméno,Věk,Adresa\nJan Novák,25,Hlavní 1, Praha\nPokus o split(“,”):\ncasti = radek.split(\",\")\n# ['Jan Novák', '25', 'Hlavní 1', ' Praha']\n# 4 části místo 3! CHYBA!\nŘešení: Použít modul csv, který řeší tyto komplikace!"
  },
  {
    "objectID": "lessons/lesson_08.html#import-modulu",
    "href": "lessons/lesson_08.html#import-modulu",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "3.1 Import modulu",
    "text": "3.1 Import modulu\nimport csv"
  },
  {
    "objectID": "lessons/lesson_08.html#čtení-csv---csv.reader",
    "href": "lessons/lesson_08.html#čtení-csv---csv.reader",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "3.2 Čtení CSV - csv.reader()",
    "text": "3.2 Čtení CSV - csv.reader()\nSoubor okresy.csv:\nOkres,Populace,Rozloha\nPraha,1300000,496\nBrno,380000,230\nOstrava,290000,214\nČtení:\nimport csv\n\nwith open(\"okresy.csv\", \"r\", encoding=\"utf-8\") as soubor:\n    reader = csv.reader(soubor)\n    \n    for radek in reader:\n        print(radek)\nVýsledek:\n['Okres', 'Populace', 'Rozloha']\n['Praha', '1300000', '496']\n['Brno', '380000', '230']\n['Ostrava', '290000', '214']\n\n\n\n\n\n\nTipcsv.reader() vrací SEZNAMY\n\n\n\nKaždý řádek je seznam stringů. Čísla musíte převádět pomocí int() nebo float()."
  },
  {
    "objectID": "lessons/lesson_08.html#zpracování-s-hlavičkou",
    "href": "lessons/lesson_08.html#zpracování-s-hlavičkou",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "3.3 Zpracování s hlavičkou",
    "text": "3.3 Zpracování s hlavičkou\nimport csv\n\nwith open(\"okresy.csv\", \"r\", encoding=\"utf-8\") as soubor:\n    reader = csv.reader(soubor)\n    \n    hlavicka = next(reader)  # Přeskočit první řádek\n    print(f\"Sloupce: {hlavicka}\")\n    \n    for radek in reader:\n        okres = radek[0]\n        populace = int(radek[1])\n        rozloha = float(radek[2])\n        \n        hustota = populace / rozloha\n        print(f\"{okres}: {hustota:.1f} obyvatel/km²\")\nVýsledek:\nSloupce: ['Okres', 'Populace', 'Rozloha']\nPraha: 2621.0 obyvatel/km²\nBrno: 1652.2 obyvatel/km²\nOstrava: 1355.1 obyvatel/km²"
  },
  {
    "objectID": "lessons/lesson_08.html#problém-s-indexy",
    "href": "lessons/lesson_08.html#problém-s-indexy",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "4.1 Problém s indexy",
    "text": "4.1 Problém s indexy\nokres = radek[0]      # Co je na indexu 0? Není jasné!\npopulace = radek[1]   # Co je na indexu 1?\nLepší: Používat názvy sloupců místo indexů!"
  },
  {
    "objectID": "lessons/lesson_08.html#csv.dictreader",
    "href": "lessons/lesson_08.html#csv.dictreader",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "4.2 csv.DictReader()",
    "text": "4.2 csv.DictReader()\nimport csv\n\nwith open(\"okresy.csv\", \"r\", encoding=\"utf-8\") as soubor:\n    reader = csv.DictReader(soubor)\n    \n    for radek in reader:\n        print(radek)\nVýsledek:\n{'Okres': 'Praha', 'Populace': '1300000', 'Rozloha': '496'}\n{'Okres': 'Brno', 'Populace': '380000', 'Rozloha': '230'}\n{'Okres': 'Ostrava', 'Populace': '290000', 'Rozloha': '214'}\n\n\n\n\n\n\nImportantDictReader vrací SLOVNÍKY\n\n\n\nKaždý řádek je slovník s klíči podle hlavičky!\nradek['Okres']      # \"Praha\"\nradek['Populace']   # \"1300000\" (string!)"
  },
  {
    "objectID": "lessons/lesson_08.html#praktické-použití",
    "href": "lessons/lesson_08.html#praktické-použití",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "4.3 Praktické použití",
    "text": "4.3 Praktické použití\nimport csv\n\nokresy = []\n\nwith open(\"okresy.csv\", \"r\", encoding=\"utf-8\") as soubor:\n    reader = csv.DictReader(soubor)\n    \n    for radek in reader:\n        okres = {\n            'nazev': radek['Okres'],\n            'populace': int(radek['Populace']),\n            'rozloha': float(radek['Rozloha'])\n        }\n        okresy.append(okres)\n\n# Teď můžeme data zpracovávat\nfor o in okresy:\n    hustota = o['populace'] / o['rozloha']\n    print(f\"{o['nazev']}: {hustota:.1f} obyvatel/km²\")\n\n\n\n\n\n\nTipKdy použít DictReader?\n\n\n\nVŽDY, pokud má CSV hlavičku!\nVýhody: - Čitelnější kód - Nezáleží na pořadí sloupců - Méně chyb"
  },
  {
    "objectID": "lessons/lesson_08.html#csv.writer",
    "href": "lessons/lesson_08.html#csv.writer",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "5.1 csv.writer()",
    "text": "5.1 csv.writer()\nimport csv\n\ndata = [\n    ['Okres', 'Populace', 'Hustota'],\n    ['Praha', 1300000, 2621],\n    ['Brno', 380000, 1652],\n    ['Ostrava', 290000, 1355]\n]\n\nwith open(\"vysledky.csv\", \"w\", encoding=\"utf-8\", newline='') as soubor:\n    writer = csv.writer(soubor)\n    \n    for radek in data:\n        writer.writerow(radek)\n\n\n\n\n\n\nWarningnewline=’’ je DŮLEŽITÉ!\n\n\n\nBez newline='' se v některých systémech (Windows) přidávají prázdné řádky:\nwith open(\"soubor.csv\", \"w\", encoding=\"utf-8\", newline='') as f:\nVŽDY přidávejte newline='' při zápisu CSV!"
  },
  {
    "objectID": "lessons/lesson_08.html#csv.dictwriter---doporučeno",
    "href": "lessons/lesson_08.html#csv.dictwriter---doporučeno",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "5.2 csv.DictWriter() - doporučeno!",
    "text": "5.2 csv.DictWriter() - doporučeno!\nimport csv\n\nokresy = [\n    {'nazev': 'Praha', 'populace': 1300000, 'hustota': 2621},\n    {'nazev': 'Brno', 'populace': 380000, 'hustota': 1652},\n    {'nazev': 'Ostrava', 'populace': 290000, 'hustota': 1355}\n]\n\nwith open(\"vysledky.csv\", \"w\", encoding=\"utf-8\", newline='') as soubor:\n    fieldnames = ['nazev', 'populace', 'hustota']\n    writer = csv.DictWriter(soubor, fieldnames=fieldnames)\n    \n    writer.writeheader()  # Zapíše hlavičku\n    writer.writerows(okresy)  # Zapíše všechny řádky\nVýsledný soubor:\nnazev,populace,hustota\nPraha,1300000,2621\nBrno,380000,1652\nOstrava,290000,1355"
  },
  {
    "objectID": "lessons/lesson_08.html#zadání",
    "href": "lessons/lesson_08.html#zadání",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "6.1 Zadání",
    "text": "6.1 Zadání\nMáte soubor okresy.csv:\nOkres,Populace,Rozloha,Kraj\nPraha,1300000,496,Praha\nBrno,380000,230,Jihomoravský\nOstrava,290000,214,Moravskoslezský\nPlzeň,170000,261,Plzeňský\nLiberec,103000,106,Liberecký\nÚkoly: 1. Načíst data pomocí DictReader 2. Pro každý okres vypočítat hustotu obyvatel 3. Najít okresy s hustotou &gt; 1000 obyvatel/km² 4. Seřadit okresy podle hustoty (použijte bubble_sort z math_utils!) 5. Uložit výsledky do nového CSV"
  },
  {
    "objectID": "lessons/lesson_08.html#řešení-krok-za-krokem",
    "href": "lessons/lesson_08.html#řešení-krok-za-krokem",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "6.2 Řešení krok za krokem",
    "text": "6.2 Řešení krok za krokem\n\n6.2.1 Krok 1: Načtení dat\nimport csv\n\nokresy = []\n\nwith open(\"okresy.csv\", \"r\", encoding=\"utf-8\") as soubor:\n    reader = csv.DictReader(soubor)\n    \n    for radek in reader:\n        okres = {\n            'nazev': radek['Okres'],\n            'populace': int(radek['Populace']),\n            'rozloha': float(radek['Rozloha']),\n            'kraj': radek['Kraj']\n        }\n        okresy.append(okres)\n\nprint(f\"Načteno {len(okresy)} okresů\")\n\n\n6.2.2 Krok 2: Výpočet hustoty\n# Přidání hustoty k datům\nfor okres in okresy:\n    okres['hustota'] = okres['populace'] / okres['rozloha']\n\n# Výpis\nfor o in okresy:\n    print(f\"{o['nazev']}: {o['hustota']:.1f} obyvatel/km²\")\n\n\n6.2.3 Krok 3: Filtrace\nhuste_okresy = []\n\nfor okres in okresy:\n    if okres['hustota'] &gt; 1000:\n        huste_okresy.append(okres)\n\nprint(f\"\\nOkresy s hustotou &gt; 1000:\")\nfor o in huste_okresy:\n    print(f\"  {o['nazev']}: {o['hustota']:.1f}\")\n\n\n6.2.4 Krok 4: Třídění pomocí math_utils\nimport math_utils\n\n# Problém: bubble_sort třídí seznamy čísel, ne slovníky!\n# Řešení: Vytvoříme seznam (hustota, okres) a seřadíme\n\ndata_k_trideni = []\nfor okres in okresy:\n    data_k_trideni.append((okres['hustota'], okres))\n\n# Vlastní bubble sort pro tuto úlohu\ndef bubble_sort_okresy(data):\n    \"\"\"Seřadí okresy podle hustoty (sestupně).\"\"\"\n    serazene = data.copy()\n    \n    for i in range(len(serazene)):\n        for j in range(len(serazene) - 1 - i):\n            if serazene[j][0] &lt; serazene[j + 1][0]:  # Porovnání hustot\n                serazene[j], serazene[j + 1] = serazene[j + 1], serazene[j]\n    \n    return serazene\n\nserazene = bubble_sort_okresy(data_k_trideni)\n\n# Extrahovat okresy\nserazene_okresy = [okres for hustota, okres in serazene]\n\n\n\n\n\n\nNoteJednodušší řešení v praxi\n\n\n\nV reálných programech byste použili:\nokresy.sort(key=lambda x: x['hustota'], reverse=True)\nAle pro výukové účely je dobré ukázat, jak přizpůsobit bubble_sort!\n\n\n\n\n6.2.5 Krok 5: Export do CSV\nwith open(\"okresy_s_hustotou.csv\", \"w\", encoding=\"utf-8\", newline='') as soubor:\n    fieldnames = ['nazev', 'populace', 'rozloha', 'kraj', 'hustota']\n    writer = csv.DictWriter(soubor, fieldnames=fieldnames)\n    \n    writer.writeheader()\n    writer.writerows(serazene_okresy)\n\nprint(\"\\nVýsledky uloženy do okresy_s_hustotou.csv\")"
  },
  {
    "objectID": "lessons/lesson_08.html#kompletní-program",
    "href": "lessons/lesson_08.html#kompletní-program",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "6.3 Kompletní program",
    "text": "6.3 Kompletní program\nimport csv\n\n# 1. Načtení dat\nokresy = []\nwith open(\"okresy.csv\", \"r\", encoding=\"utf-8\") as soubor:\n    reader = csv.DictReader(soubor)\n    for radek in reader:\n        okres = {\n            'nazev': radek['Okres'],\n            'populace': int(radek['Populace']),\n            'rozloha': float(radek['Rozloha']),\n            'kraj': radek['Kraj']\n        }\n        okresy.append(okres)\n\n# 2. Výpočet hustoty\nfor okres in okresy:\n    okres['hustota'] = okres['populace'] / okres['rozloha']\n\n# 3. Filtrace\nhuste_okresy = [o for o in okresy if o['hustota'] &gt; 1000]\n\n# 4. Třídění (sestupně podle hustoty)\ndef bubble_sort_okresy(data):\n    serazene = data.copy()\n    for i in range(len(serazene)):\n        for j in range(len(serazene) - 1 - i):\n            if serazene[j]['hustota'] &lt; serazene[j + 1]['hustota']:\n                serazene[j], serazene[j + 1] = serazene[j + 1], serazene[j]\n    return serazene\n\nserazene_okresy = bubble_sort_okresy(okresy)\n\n# 5. Export\nwith open(\"okresy_s_hustotou.csv\", \"w\", encoding=\"utf-8\", newline='') as soubor:\n    fieldnames = ['nazev', 'populace', 'rozloha', 'kraj', 'hustota']\n    writer = csv.DictWriter(soubor, fieldnames=fieldnames)\n    writer.writeheader()\n    writer.writerows(serazene_okresy)\n\n# 6. Výpis výsledků\nprint(\"TOP 3 okresy podle hustoty:\")\nfor i, okres in enumerate(serazene_okresy[:3], 1):\n    print(f\"{i}. {okres['nazev']}: {okres['hustota']:.1f} obyvatel/km²\")"
  },
  {
    "objectID": "lessons/lesson_08.html#export-atributové-tabulky-z-arcgis",
    "href": "lessons/lesson_08.html#export-atributové-tabulky-z-arcgis",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "7.1 Export atributové tabulky z ArcGIS",
    "text": "7.1 Export atributové tabulky z ArcGIS\nV ArcGIS Pro můžete exportovat atributovou tabulku:\n\nPravý klik na vrstvu → Open Attribute Table\nMenu → Export → Export Table\nVybrat formát: CSV nebo dBASE\n\nVýsledek: CSV soubor s atributy vrstvy!"
  },
  {
    "objectID": "lessons/lesson_08.html#typický-gis-workflow",
    "href": "lessons/lesson_08.html#typický-gis-workflow",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "7.2 Typický GIS workflow",
    "text": "7.2 Typický GIS workflow\n┌─────────────────┐\n│   ArcGIS Pro    │\n│  (Feature class)│\n└────────┬────────┘\n         │ Export\n         ▼\n┌─────────────────┐\n│   CSV soubor    │\n└────────┬────────┘\n         │ Python\n         ▼\n┌─────────────────┐\n│  Zpracování     │\n│  (výpočty,      │\n│   statistiky)   │\n└────────┬────────┘\n         │ Python\n         ▼\n┌─────────────────┐\n│  Nový CSV       │\n└────────┬────────┘\n         │ Import\n         ▼\n┌─────────────────┐\n│   ArcGIS Pro    │\n│  (nová vrstva)  │\n└─────────────────┘"
  },
  {
    "objectID": "lessons/lesson_08.html#příklad-zpracování-bodů-zájmu",
    "href": "lessons/lesson_08.html#příklad-zpracování-bodů-zájmu",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "7.3 Příklad: Zpracování bodů zájmu",
    "text": "7.3 Příklad: Zpracování bodů zájmu\nSoubor z ArcGIS: pois.csv\nOBJECTID,Name,Type,X,Y\n1,Restaurace A,restaurant,14.4208,50.0875\n2,Restaurace B,restaurant,14.4212,50.0880\n3,Kavárna C,cafe,14.4198,50.0868\nPython zpracování:\nimport csv\n\n# Načtení\npois = []\nwith open(\"pois.csv\", \"r\", encoding=\"utf-8\") as f:\n    reader = csv.DictReader(f)\n    for row in reader:\n        pois.append({\n            'id': int(row['OBJECTID']),\n            'name': row['Name'],\n            'type': row['Type'],\n            'x': float(row['X']),\n            'y': float(row['Y'])\n        })\n\n# Filtrace - pouze restaurace\nrestaurace = [p for p in pois if p['type'] == 'restaurant']\n\n# Export\nwith open(\"restaurace.csv\", \"w\", encoding=\"utf-8\", newline='') as f:\n    fieldnames = ['id', 'name', 'type', 'x', 'y']\n    writer = csv.DictWriter(f, fieldnames=fieldnames)\n    writer.writeheader()\n    writer.writerows(restaurace)\n\nprint(f\"Exportováno {len(restaurace)} restaurací\")\nZpět do ArcGIS: 1. Add Data → vybrat restaurace.csv 2. Display XY Data → nastavit X, Y sloupce 3. Export Features → uložit jako shapefile/geodatabase\n\n\n\n\n\n\nTipVýhoda tohoto přístupu\n\n\n\n\n✅ Rychlé zpracování velkých dat\n✅ Opakovatelné (skript můžete spustit znovu)\n✅ Kombinuje sílu Pythonu s vizualizací ArcGIS\n✅ Můžete použít vlastní funkce (math_utils!)"
  },
  {
    "objectID": "lessons/lesson_08.html#cvičení-1-statistiky-okresů",
    "href": "lessons/lesson_08.html#cvičení-1-statistiky-okresů",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "8.1 Cvičení 1: Statistiky okresů",
    "text": "8.1 Cvičení 1: Statistiky okresů\nPoužijte soubor okresy.csv a vytvořte program, který:\n\nNačte data pomocí DictReader\nVypočítá pro každý okres:\n\nHustotu obyvatel\nZda je “velký” (populace &gt; 200 000)\n\nSpočítá statistiky:\n\nPrůměrnou hustotu\nPočet velkých okresů\nCelkovou populaci\n\nUloží výsledky do statistiky_okresu.csv:\n\nnazev,populace,rozloha,hustota,velky\nPraha,1300000,496,2621.0,True\nBrno,380000,230,1652.2,True\n..."
  },
  {
    "objectID": "lessons/lesson_08.html#cvičení-2-agregace-podle-kraje",
    "href": "lessons/lesson_08.html#cvičení-2-agregace-podle-kraje",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "8.2 Cvičení 2: Agregace podle kraje",
    "text": "8.2 Cvičení 2: Agregace podle kraje\nVytvořte program, který:\n\nNačte okresy.csv\nSeskupí okresy podle kraje\nPro každý kraj vypočítá:\n\nCelkovou populaci\nCelkovou rozlohu\nPrůměrnou hustotu\n\nUloží do kraje_agregace.csv:\n\nKraj,Celkova_populace,Celkova_rozloha,Prumerna_hustota\nPraha,1300000,496,2621.0\nJihomoravský,380000,230,1652.2\n...\nNápověda pro agregaci:\nkraje = {}\nfor okres in okresy:\n    kraj = okres['kraj']\n    if kraj not in kraje:\n        kraje[kraj] = []\n    kraje[kraj].append(okres)"
  },
  {
    "objectID": "lessons/lesson_08.html#co-jsme-se-naučili",
    "href": "lessons/lesson_08.html#co-jsme-se-naučili",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "9.1 Co jsme se naučili",
    "text": "9.1 Co jsme se naučili\n✅ CSV formát - struktura, výhody, problémy\n✅ csv.reader() - čtení CSV jako seznamy\n✅ csv.DictReader() - čtení CSV jako slovníky (doporučeno!)\n✅ csv.writer() - zápis CSV\n✅ csv.DictWriter() - zápis CSV ze slovníků (doporučeno!)\n✅ newline=’’ - důležité pro správný zápis\n✅ GIS workflow - export z ArcGIS → Python → import zpět\n✅ Propojení s funkcemi - kombinace CSV s math_utils"
  },
  {
    "objectID": "lessons/lesson_08.html#co-bude-příště",
    "href": "lessons/lesson_08.html#co-bude-příště",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "9.2 Co bude příště?",
    "text": "9.2 Co bude příště?\nPříští týden: TEST!\nTest bude obsahovat: - Písemná část - pochopení kódu, doplňování - Praktická část - zpracování CSV souboru s použitím funkcí\nZa 2 týdny: OOP (Objektově orientované programování) - Třída Pes - Propojení s ArcPy objekty - Příprava na práci s geometriemi"
  },
  {
    "objectID": "lessons/lesson_08.html#varianta-a-povinná---základní",
    "href": "lessons/lesson_08.html#varianta-a-povinná---základní",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "10.1 Varianta A (povinná - základní)",
    "text": "10.1 Varianta A (povinná - základní)\nVytvořte soubor teploty_mesic.csv:\nDen,Teplota,Srazky\n1,15,0\n2,18,5\n3,22,0\n4,19,12\n5,16,8\nNapište program, který: 1. Načte data pomocí DictReader 2. Vypočítá: - Průměrnou teplotu - Celkové srážky - Den s nejvyšší teplotou 3. Uloží statistiky do vysledky_pocasi.txt:\nStatistiky počasí\n==================\nPrůměrná teplota: 18.0°C\nCelkové srážky: 25 mm\nNejteplejší den: 3 (22°C)"
  },
  {
    "objectID": "lessons/lesson_08.html#varianta-b-příprava-na-test---pokročilá",
    "href": "lessons/lesson_08.html#varianta-b-příprava-na-test---pokročilá",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "10.2 Varianta B (příprava na test - pokročilá)",
    "text": "10.2 Varianta B (příprava na test - pokročilá)\nVytvořte modul csv_utils.py s funkcemi:\ndef nacti_csv_dict(nazev_souboru):\n    \"\"\"Načte CSV jako seznam slovníků.\"\"\"\n    # ...\n\ndef uloz_csv_dict(nazev_souboru, data, fieldnames):\n    \"\"\"Uloží seznam slovníků jako CSV.\"\"\"\n    # ...\n\ndef vypocitaj_statistiky(data, sloupec):\n    \"\"\"Vypočítá průměr, min, max pro daný sloupec.\n    \n    Returns:\n        dict: {'prumer': ..., 'minimum': ..., 'maximum': ...}\n    \"\"\"\n    # ...\nPoužijte tyto funkce v hlavním programu!"
  },
  {
    "objectID": "lessons/lesson_08.html#varianta-c-výzva---jako-na-testu",
    "href": "lessons/lesson_08.html#varianta-c-výzva---jako-na-testu",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "10.3 Varianta C (výzva - jako na testu)",
    "text": "10.3 Varianta C (výzva - jako na testu)\nMáte zakaznici.csv:\nID,Jmeno,Vek,Utrata\n1,Jan Novák,25,1500\n2,Marie Svobodová,32,2300\n3,Petr Dvořák,28,1800\n4,Jana Nováková,45,3200\nNapište program, který: 1. Načte data 2. Vypočítá průměrnou útratu 3. Najde zákazníky s útratou nad průměr 4. Seřadí je podle útraty (použijte vlastní třídící funkci!) 5. Uloží do vip_zakaznici.csv s přidaným sloupcem Kategorie: - “VIP” pokud útrata &gt; 2× průměr - “Premium” pokud útrata &gt; průměr - “Standard” jinak\nStruktura programu: - zakaznici_utils.py - funkce pro zpracování - main.py - hlavní program"
  },
  {
    "objectID": "lessons/lesson_08.html#běžné-chyby-studentů",
    "href": "lessons/lesson_08.html#běžné-chyby-studentů",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "12.1 Běžné chyby studentů",
    "text": "12.1 Běžné chyby studentů\n# 1. Zapomínají newline=''\nwith open(\"data.csv\", \"w\", encoding=\"utf-8\") as f:  # Chyba - prázdné řádky!\n# Správně:\nwith open(\"data.csv\", \"w\", encoding=\"utf-8\", newline='') as f:\n\n# 2. Nepoužívají DictReader\nreader = csv.reader(f)\nfor radek in reader:\n    okres = radek[0]  # Co je na indexu 0? Není jasné!\n# Správně:\nreader = csv.DictReader(f)\nfor radek in reader:\n    okres = radek['Okres']  # Jasné!\n\n# 3. Zapomínají převést na číslo\npopulace = radek['Populace']  # \"1300000\" (string!)\nhustota = populace / rozloha  # CHYBA!\n# Správně:\npopulace = int(radek['Populace'])\n\n# 4. Chybný fieldnames\nfieldnames = ['nazev', 'populace']\nwriter = csv.DictWriter(f, fieldnames=fieldnames)\nwriter.writerow({'jmeno': 'Praha', 'pocet': 1000})  # CHYBA - neexistující klíče!\n\n# 5. Zapomínají writeheader()\nwriter = csv.DictWriter(f, fieldnames=fieldnames)\nwriter.writerows(data)  # Chybí hlavička!\n# Správně:\nwriter.writeheader()\nwriter.writerows(data)"
  },
  {
    "objectID": "lessons/lesson_08.html#časový-plán-90-min",
    "href": "lessons/lesson_08.html#časový-plán-90-min",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "12.2 Časový plán (90 min)",
    "text": "12.2 Časový plán (90 min)\n\n\n\nČas\nObsah\n\n\n\n\n0-15 min\nCSV formát, problémy, modul csv\n\n\n15-30 min\ncsv.reader(), zpracování\n\n\n30-45 min\nDictReader - lepší způsob\n\n\n45-60 min\nZápis - writer, DictWriter\n\n\n60-80 min\nPraktická úloha - kompletní workflow\n\n\n80-90 min\nGIS propojení, příprava na test"
  },
  {
    "objectID": "lessons/lesson_08.html#klíčové-momenty",
    "href": "lessons/lesson_08.html#klíčové-momenty",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "12.3 Klíčové momenty",
    "text": "12.3 Klíčové momenty\n\n12.3.1 DictReader vs reader (30-45 min):\n\nDŮLEŽITÉ: Zdůraznit, že DictReader je lepší\nUkázat rozdíl na projektoru vedle sebe\nŘíct: “V praxi používejte vždy DictReader pokud máte hlavičku”\n\n\n\n12.3.2 newline=’’ (45-60 min):\n\nVysvětlit proč je potřeba\nUkázat příklad ŠPATNÉHO výstupu bez newline\nŘíct: “Zapamatujte si: při zápisu CSV = vždy newline=’’”\n\n\n\n12.3.3 GIS workflow (80-90 min):\n\nMotivace pro test příští týden\nUkázat diagram: Export → Python → Import\nZdůraznit: “Tohle budete dělat v ArcPy!”\nŘíct: “Test bude podobný - CSV + funkce + výpočty”"
  },
  {
    "objectID": "lessons/lesson_08.html#rizika",
    "href": "lessons/lesson_08.html#rizika",
    "title": "Lekce 8: Textové soubory II – CSV tabulka",
    "section": "12.4 Rizika",
    "text": "12.4 Rizika\n\nDictReader může být matoucí (20 min místo 15)\n\nŘešení: Praktické ukázky, porovnání s reader()\nNechat studenty experimentovat\n\nTřídění slovníků je složité (Krok 4)\n\nŘešení: Ukázat jednodušší verzi se sort(key=...)\nŘíct: ”"
  },
  {
    "objectID": "lessons/lesson_06.html",
    "href": "lessons/lesson_06.html",
    "title": "Lekce 6: Funkce a moduly",
    "section": "",
    "text": "Po absolvování této lekce budete umět:\n\nDefinovat vlastní funkce pomocí def\nPoužívat parametry a návratové hodnoty\nRozumět rozdílu mezi print() a return\nPsát dokumentační řetězce (docstrings)\nOrganizovat kód do modulů\nImportovat a používat moduly\nVytvořit vlastní modul math_utils.py\n\nČasová dotace: 90 minut"
  },
  {
    "objectID": "lessons/lesson_06.html#motivace",
    "href": "lessons/lesson_06.html#motivace",
    "title": "Lekce 6: Funkce a moduly",
    "section": "2.1 Motivace",
    "text": "2.1 Motivace\nVzpomeňte si na předchozí lekce:\nNapsali jste kód pro: - Fibonacci číslo - Faktoriál - Hledání minima/maxima - Třídění seznamu - Test prvočíselnosti\nCo kdybyste tyto operace potřebovali použít vícekrát?\n# Fibonacci pro číslo 10\nn = 10\na, b = 0, 1\nfor i in range(n):\n    a, b = b, a + b\nprint(f\"Fibonacci({n}) = {a}\")\n\n# Fibonacci pro číslo 20 - MUSÍME PSÁT ZNOVU!\nn = 20\na, b = 0, 1\nfor i in range(n):\n    a, b = b, a + b\nprint(f\"Fibonacci({n}) = {a}\")\n\n# Fibonacci pro číslo 15 - ZASE ZNOVU!\n# ...\nProblém: Opakujeme stejný kód → neefektivní, náchylné k chybám"
  },
  {
    "objectID": "lessons/lesson_06.html#dry-princip",
    "href": "lessons/lesson_06.html#dry-princip",
    "title": "Lekce 6: Funkce a moduly",
    "section": "2.2 DRY princip",
    "text": "2.2 DRY princip\nDRY = Don’t Repeat Yourself (Neopakuj se)\nPokud píšete stejný kód vícekrát, měli byste ho zabalit do funkce.\n\n\n\n\n\n\nTipFunkce = pojmenovaný kus kódu\n\n\n\nFunkce je pojmenovaný blok kódu, který: - Můžete volat kdykoli - Může přijímat vstupy (parametry) - Může vracet výstup (návratovou hodnotu) - Dělá kód čitelnějším a znovupoužitelným"
  },
  {
    "objectID": "lessons/lesson_06.html#základní-syntaxe",
    "href": "lessons/lesson_06.html#základní-syntaxe",
    "title": "Lekce 6: Funkce a moduly",
    "section": "3.1 Základní syntaxe",
    "text": "3.1 Základní syntaxe\ndef jmeno_funkce():\n    # Tělo funkce (odsazené)\n    prikaz1\n    prikaz2\nKlíčové slovo: def (define)\nZávorky: () jsou povinné\nDvojtečka: : na konci řádku\nOdsazení: Tělo funkce je odsazené (4 mezery)"
  },
  {
    "objectID": "lessons/lesson_06.html#první-funkce",
    "href": "lessons/lesson_06.html#první-funkce",
    "title": "Lekce 6: Funkce a moduly",
    "section": "3.2 První funkce",
    "text": "3.2 První funkce\ndef pozdrav():\n    print(\"Ahoj!\")\n    print(\"Vítej v kurzu Pythonu!\")\n\n# Volání funkce:\npozdrav()\nVýsledek:\nAhoj!\nVítej v kurzu Pythonu!\n\n\n\n\n\n\nImportantFunkci musíte ZAVOLAT!\n\n\n\nDefinice funkce ji jen vytvoří, ale neprovede (“nezavolá”):\ndef pozdrav():\n    print(\"Ahoj!\")\n\n# Nic se nevypíše! Funkce jen existuje.\n\npozdrav()  # TEĎ se zavolá!"
  },
  {
    "objectID": "lessons/lesson_06.html#funkce-s-jedním-parametrem",
    "href": "lessons/lesson_06.html#funkce-s-jedním-parametrem",
    "title": "Lekce 6: Funkce a moduly",
    "section": "4.1 Funkce s jedním parametrem",
    "text": "4.1 Funkce s jedním parametrem\ndef pozdrav(jmeno):\n    print(f\"Ahoj, {jmeno}!\")\n\npozdrav(\"Jan\")     # Ahoj, Jan!\npozdrav(\"Marie\")   # Ahoj, Marie!\nParametr = proměnná, která přijímá hodnotu při volání funkce"
  },
  {
    "objectID": "lessons/lesson_06.html#funkce-s-více-parametry",
    "href": "lessons/lesson_06.html#funkce-s-více-parametry",
    "title": "Lekce 6: Funkce a moduly",
    "section": "4.2 Funkce s více parametry",
    "text": "4.2 Funkce s více parametry\ndef secti(a, b):\n    vysledek = a + b\n    print(f\"{a} + {b} = {vysledek}\")\n\nsecti(5, 3)   # 5 + 3 = 8\nsecti(10, 7)  # 10 + 7 = 17"
  },
  {
    "objectID": "lessons/lesson_06.html#default-hodnoty-parametrů",
    "href": "lessons/lesson_06.html#default-hodnoty-parametrů",
    "title": "Lekce 6: Funkce a moduly",
    "section": "4.3 Default hodnoty parametrů",
    "text": "4.3 Default hodnoty parametrů\nMůžete nastavit výchozí hodnotu pro parametr:\ndef pozdrav(jmeno, jazyk=\"cs\"):\n    if jazyk == \"cs\":\n        print(f\"Ahoj, {jmeno}!\")\n    elif jazyk == \"en\":\n        print(f\"Hello, {jmeno}!\")\n\npozdrav(\"Jan\")           # Ahoj, Jan! (použije default \"cs\")\npozdrav(\"John\", \"en\")    # Hello, John!\npozdrav(\"Marie\", \"cs\")   # Ahoj, Marie!"
  },
  {
    "objectID": "lessons/lesson_06.html#problém-s-print",
    "href": "lessons/lesson_06.html#problém-s-print",
    "title": "Lekce 6: Funkce a moduly",
    "section": "5.1 Problém s print()",
    "text": "5.1 Problém s print()\ndef secti(a, b):\n    vysledek = a + b\n    print(vysledek)\n\n# Můžeme vypsat výsledek:\nsecti(5, 3)  # 8\n\n# Ale NEMŮŽEME ho použít dál:\nx = secti(5, 3)  # x = None (funkce nic nevrací!)\ny = x + 10       # CHYBA! None + 10 nejde"
  },
  {
    "objectID": "lessons/lesson_06.html#řešení-return",
    "href": "lessons/lesson_06.html#řešení-return",
    "title": "Lekce 6: Funkce a moduly",
    "section": "5.2 Řešení: return",
    "text": "5.2 Řešení: return\ndef secti(a, b):\n    vysledek = a + b\n    return vysledek  # Vrátí hodnotu\n\n# Teď MŮŽEME výsledek použít:\nx = secti(5, 3)    # x = 8\ny = x + 10         # y = 18\nprint(f\"Výsledek: {y}\")  # Výsledek: 18\n\n\n\n\n\n\nWarningprint() vs. return - KRITICKÝ ROZDÍL!\n\n\n\n\nprint() - vypíše na obrazovku, ale nevrací hodnotu\nreturn - vrací hodnotu, kterou můžete použít dál\n\ndef spatne(x):\n    print(x * 2)    # Vypíše, ale nevrací\n\ndef spravne(x):\n    return x * 2    # Vrací hodnotu\n\na = spatne(5)       # Vypíše 10, ale a = None\nb = spravne(5)      # b = 10 (můžeme použít dál)\nPravidlo: Funkce by měly vracet hodnoty pomocí return, ne je vypisovat pomocí print()!"
  },
  {
    "objectID": "lessons/lesson_06.html#return-ukončuje-funkci",
    "href": "lessons/lesson_06.html#return-ukončuje-funkci",
    "title": "Lekce 6: Funkce a moduly",
    "section": "5.3 return ukončuje funkci",
    "text": "5.3 return ukončuje funkci\ndef je_kladne(cislo):\n    if cislo &gt; 0:\n        return True  # Funkce SKONČÍ zde\n    return False     # Tohle se provede jen pokud cislo &lt;= 0\n\nprint(je_kladne(5))   # True\nprint(je_kladne(-3))  # False"
  },
  {
    "objectID": "lessons/lesson_06.html#co-jsou-docstrings",
    "href": "lessons/lesson_06.html#co-jsou-docstrings",
    "title": "Lekce 6: Funkce a moduly",
    "section": "6.1 Co jsou docstrings?",
    "text": "6.1 Co jsou docstrings?\nDocstring = dokumentace funkce napsaná hned pod definicí v trojitých uvozovkách.\ndef fibonacci(n):\n    \"\"\"Vrátí n-tý člen Fibonacciho posloupnosti.\n    \n    Args:\n        n: Pořadové číslo členu (int)\n    \n    Returns:\n        n-tý člen posloupnosti (int)\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
  },
  {
    "objectID": "lessons/lesson_06.html#proč-používat-docstrings",
    "href": "lessons/lesson_06.html#proč-používat-docstrings",
    "title": "Lekce 6: Funkce a moduly",
    "section": "6.2 Proč používat docstrings?",
    "text": "6.2 Proč používat docstrings?\n# Můžete si přečíst dokumentaci:\nhelp(fibonacci)\nVýstup:\nHelp on function fibonacci:\n\nfibonacci(n)\n    Vrátí n-tý člen Fibonacciho posloupnosti.\n    \n    Args:\n        n: Pořadové číslo členu (int)\n    \n    Returns:\n        n-tý člen posloupnosti (int)\n\n\n\n\n\n\nTipDobrý docstring obsahuje\n\n\n\n\nStručný popis - co funkce dělá\nArgs - jaké přijímá parametry\nReturns - co vrací\nRaises (volitelně) - jaké může vyvolat chyby\n\nNemusíte psát složité docstringy, ale alespoň jednořádkový popis je dobrý!"
  },
  {
    "objectID": "lessons/lesson_06.html#fibonacci-jako-funkce",
    "href": "lessons/lesson_06.html#fibonacci-jako-funkce",
    "title": "Lekce 6: Funkce a moduly",
    "section": "7.1 Fibonacci jako funkce",
    "text": "7.1 Fibonacci jako funkce\nPůvodní kód:\nn = int(input(\"Které číslo? \"))\na, b = 0, 1\nfor i in range(n):\n    a, b = b, a + b\nprint(f\"{n}. člen: {a}\")\nJako funkce:\ndef fibonacci(n):\n    \"\"\"Vrátí n-tý člen Fibonacciho posloupnosti.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n# Použití:\nprint(f\"10. člen: {fibonacci(10)}\")\nprint(f\"20. člen: {fibonacci(20)}\")\n\n# Nebo pro seznam čísel:\nfor i in [5, 10, 15, 20]:\n    print(f\"F({i}) = {fibonacci(i)}\")"
  },
  {
    "objectID": "lessons/lesson_06.html#cvičení-1-faktoriál-jako-funkce",
    "href": "lessons/lesson_06.html#cvičení-1-faktoriál-jako-funkce",
    "title": "Lekce 6: Funkce a moduly",
    "section": "7.2 Cvičení 1: Faktoriál jako funkce",
    "text": "7.2 Cvičení 1: Faktoriál jako funkce\nPřepište váš kód pro faktoriál jako funkci:\ndef faktorial(n):\n    \"\"\"Vrátí faktoriál čísla n.\"\"\"\n    # Zde doplňte kód...\n    \n# Test:\nprint(faktorial(5))   # Mělo by být 120\nprint(faktorial(10))  # Mělo by být 3628800"
  },
  {
    "objectID": "lessons/lesson_06.html#cvičení-2-test-prvočíselnosti-jako-funkce",
    "href": "lessons/lesson_06.html#cvičení-2-test-prvočíselnosti-jako-funkce",
    "title": "Lekce 6: Funkce a moduly",
    "section": "7.3 Cvičení 2: Test prvočíselnosti jako funkce",
    "text": "7.3 Cvičení 2: Test prvočíselnosti jako funkce\ndef je_prvocislo(n):\n    \"\"\"Vrátí True, pokud je n prvočíslo, jinak False.\"\"\"\n    # Zde doplňte kód...\n    \n# Test:\nprint(je_prvocislo(7))   # True\nprint(je_prvocislo(8))   # False\nprint(je_prvocislo(17))  # True"
  },
  {
    "objectID": "lessons/lesson_06.html#cvičení-3-bubble-sort-jako-funkce",
    "href": "lessons/lesson_06.html#cvičení-3-bubble-sort-jako-funkce",
    "title": "Lekce 6: Funkce a moduly",
    "section": "7.4 Cvičení 3: Bubble Sort jako funkce",
    "text": "7.4 Cvičení 3: Bubble Sort jako funkce\ndef bubble_sort(seznam):\n    \"\"\"Seřadí seznam pomocí Bubble Sort algoritmu.\n    \n    Args:\n        seznam: Seznam čísel (list)\n    \n    Returns:\n        Seřazený seznam (list)\n    \"\"\"\n    # POZOR: Měli byste vytvořit kopii!\n    serazeny = seznam.copy()\n    \n    # Zde doplňte třídící kód...\n    \n    return serazeny\n\n# Test:\ncisla = [5, 2, 8, 1, 9]\nserazene = bubble_sort(cisla)\nprint(f\"Původní: {cisla}\")\nprint(f\"Seřazené: {serazene}\")\n\n\n\n\n\n\nWarningPozor na úpravu seznamů!\n\n\n\nSeznamy jsou mutable (měnitelné). Pokud funkce upravuje seznam, mění původní:\ndef spatne_sort(seznam):\n    seznam.sort()  # Mění původní seznam!\n    return seznam\n\ncisla = [5, 2, 8]\nvysledek = spatne_sort(cisla)\nprint(cisla)  # [2, 5, 8] - ZMĚNĚNO!\n\n# Lepší:\ndef dobre_sort(seznam):\n    kopie = seznam.copy()\n    kopie.sort()\n    return kopie"
  },
  {
    "objectID": "lessons/lesson_06.html#co-je-modul",
    "href": "lessons/lesson_06.html#co-je-modul",
    "title": "Lekce 6: Funkce a moduly",
    "section": "8.1 Co je modul?",
    "text": "8.1 Co je modul?\nModul = Python soubor (.py) obsahující funkce, které můžete použít v jiných programech.\nProč moduly? - Organizace - rozdělení programu do logických celků - Znovupoužitelnost - jednou napíšete, použijete všude - Sdílení - můžete sdílet s kolegy"
  },
  {
    "objectID": "lessons/lesson_06.html#vytvoření-vlastního-modulu",
    "href": "lessons/lesson_06.html#vytvoření-vlastního-modulu",
    "title": "Lekce 6: Funkce a moduly",
    "section": "8.2 Vytvoření vlastního modulu",
    "text": "8.2 Vytvoření vlastního modulu\n\n8.2.1 Krok 1: Vytvořte soubor math_utils.py\n# math_utils.py\n\ndef fibonacci(n):\n    \"\"\"Vrátí n-tý člen Fibonacciho posloupnosti.\"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\ndef faktorial(n):\n    \"\"\"Vrátí faktoriál čísla n.\"\"\"\n    vysledek = 1\n    for i in range(1, n + 1):\n        vysledek *= i\n    return vysledek\n\ndef je_prvocislo(n):\n    \"\"\"Vrátí True, pokud je n prvočíslo.\"\"\"\n    if n &lt; 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef bubble_sort(seznam):\n    \"\"\"Seřadí seznam pomocí Bubble Sort.\"\"\"\n    serazeny = seznam.copy()\n    for i in range(len(serazeny)):\n        for j in range(len(serazeny) - 1 - i):\n            if serazeny[j] &gt; serazeny[j + 1]:\n                serazeny[j], serazeny[j + 1] = serazeny[j + 1], serazeny[j]\n    return serazeny\n\n\n8.2.2 Krok 2: Vytvořte soubor main.py ve STEJNÉ složce\n# main.py\n\nimport math_utils\n\n# Teď můžeme používat funkce z math_utils:\nn = int(input(\"Zadej číslo: \"))\n\nprint(f\"Fibonacci: {math_utils.fibonacci(n)}\")\nprint(f\"Faktoriál: {math_utils.faktorial(n)}\")\nprint(f\"Je prvočíslo: {math_utils.je_prvocislo(n)}\")\n\ncisla = [5, 2, 8, 1, 9]\nprint(f\"Seřazené: {math_utils.bubble_sort(cisla)}\")"
  },
  {
    "objectID": "lessons/lesson_06.html#způsoby-importu",
    "href": "lessons/lesson_06.html#způsoby-importu",
    "title": "Lekce 6: Funkce a moduly",
    "section": "8.3 Způsoby importu",
    "text": "8.3 Způsoby importu\n\n8.3.1 1. Import celého modulu\nimport math_utils\n\nmath_utils.fibonacci(10)\nmath_utils.faktorial(5)\n\n\n8.3.2 2. Import konkrétních funkcí\nfrom math_utils import fibonacci, faktorial\n\nfibonacci(10)   # Bez math_utils.\nfaktorial(5)\n\n\n8.3.3 3. Import s aliasem\nimport math_utils as mu\n\nmu.fibonacci(10)\nmu.faktorial(5)\n\n\n8.3.4 4. Import všeho (NEDOPORUČENO!)\nfrom math_utils import *\n\nfibonacci(10)  # Funguje, ale není jasné, odkud funkce pochází\n\n\n\n\n\n\nTipDoporučení\n\n\n\n\nPro vlastní moduly: import math_utils (jasné, odkud funkce pochází)\nPro specifické funkce: from math_utils import fibonacci (kratší kód)\nNikdy nepoužívejte import * - není jasné, co importujete!"
  },
  {
    "objectID": "lessons/lesson_06.html#vestavěné-moduly",
    "href": "lessons/lesson_06.html#vestavěné-moduly",
    "title": "Lekce 6: Funkce a moduly",
    "section": "8.4 Vestavěné moduly",
    "text": "8.4 Vestavěné moduly\nPython má mnoho vestavěných modulů, které můžete rovnou použít:\n\n8.4.1 Modul math\nimport math\n\nprint(math.sqrt(16))      # 4.0 - odmocnina\nprint(math.pi)            # 3.14159... - číslo π\nprint(math.ceil(3.2))     # 4 - zaokrouhlení nahoru\nprint(math.floor(3.8))    # 3 - zaokrouhlení dolů\n\n\n8.4.2 Modul random\nimport random\n\nprint(random.randint(1, 10))        # Náhodné číslo 1-10\nprint(random.choice([1, 2, 3, 4]))  # Náhodný prvek ze seznamu\n\n\n8.4.3 Modul os (operační systém)\nimport os\n\nprint(os.getcwd())           # Aktuální složka\nprint(os.listdir('.'))       # Seznam souborů\n\n\n8.4.4 Modul csv (práce s CSV)\nimport csv\n\n# Budeme používat příští lekci!"
  },
  {
    "objectID": "lessons/lesson_06.html#preview-import-arcpy",
    "href": "lessons/lesson_06.html#preview-import-arcpy",
    "title": "Lekce 6: Funkce a moduly",
    "section": "8.5 Preview: import arcpy",
    "text": "8.5 Preview: import arcpy\n\n\n\n\n\n\nNotePřipravujeme se na ArcPy!\n\n\n\nV příštích týdnech budete psát:\nimport arcpy\n\n# Funkce z ArcPy modulu:\narcpy.Buffer_analysis(...)\narcpy.Clip_analysis(...)\narcpy.management.CreateFeatureclass(...)\nVidíte? ArcPy je jen další modul! Funguje úplně stejně jako math_utils."
  },
  {
    "objectID": "lessons/lesson_06.html#ideální-organizace",
    "href": "lessons/lesson_06.html#ideální-organizace",
    "title": "Lekce 6: Funkce a moduly",
    "section": "9.1 Ideální organizace",
    "text": "9.1 Ideální organizace\nmuj_projekt/\n│\n├── main.py              # Hlavní program\n├── math_utils.py        # Matematické funkce\n│\n└── data/\n    └── data.csv         # Data (příští lekce)\nmain.py:\nimport math_utils\n\n# Hlavní program...\nmath_utils.py:\ndef fibonacci(n):\n    # ...\n\ndef faktorial(n):\n    # ...\n\n\n\n\n\n\nImportantSoubory musí být ve stejné složce!\n\n\n\nAby import math_utils fungoval, musí být math_utils.py ve stejné složce jako main.py, nebo v Pythonem rozpoznané cestě."
  },
  {
    "objectID": "lessons/lesson_06.html#zadání",
    "href": "lessons/lesson_06.html#zadání",
    "title": "Lekce 6: Funkce a moduly",
    "section": "10.1 Zadání",
    "text": "10.1 Zadání\nVytvořte kompletní projekt:\n\n10.1.1 1. Soubor math_utils.py\nObsahuje funkce: - fibonacci(n) - faktorial(n) - je_prvocislo(n) - bubble_sort(seznam)\nVšechny funkce mají docstringy!\n\n\n10.1.2 2. Soubor main.py\nProgram, který: 1. Načte číslo N od uživatele 2. Vypočítá a vypíše: - N-té Fibonacci číslo - Faktoriál N - Zda je N prvočíslo 3. Vytvoří seznam prvních 10 Fibonacci čísel 4. Seřadí tento seznam (ačkoli už je seřazený 😊) 5. Vypíše výsledek\nKostra:\n# main.py\nimport math_utils\n\nn = int(input(\"Zadej číslo: \"))\n\n# Základní výpočty\nprint(f\"Fibonacci({n}) = {math_utils.fibonacci(n)}\")\nprint(f\"Faktoriál({n}) = {math_utils.faktorial(n)}\")\n\nif math_utils.je_prvocislo(n):\n    print(f\"{n} je prvočíslo\")\nelse:\n    print(f\"{n} není prvočíslo\")\n\n# Seznam Fibonacci čísel\nfibonacci_cisla = []\nfor i in range(10):\n    fibonacci_cisla.append(math_utils.fibonacci(i))\n\nprint(f\"\\nPrvních 10 Fibonacci čísel: {fibonacci_cisla}\")\n\n# Seřazení (už je seřazený, ale ukážeme funkci)\nserazeny = math_utils.bubble_sort(fibonacci_cisla)\nprint(f\"Seřazený seznam: {serazeny}\")"
  },
  {
    "objectID": "lessons/lesson_06.html#co-jsme-se-naučili",
    "href": "lessons/lesson_06.html#co-jsme-se-naučili",
    "title": "Lekce 6: Funkce a moduly",
    "section": "11.1 Co jsme se naučili",
    "text": "11.1 Co jsme se naučili\n✅ Definice funkcí pomocí def\n✅ Parametry - vstupy do funkce\n✅ return - návratové hodnoty\n✅ Rozdíl print() vs. return - klíčové pro pochopení!\n✅ Docstrings - dokumentace funkcí\n✅ Moduly - organizace kódu do souborů\n✅ import - použití modulů\n✅ Vestavěné moduly - math, random, os, csv\n✅ Preview ArcPy - import arcpy funguje stejně!"
  },
  {
    "objectID": "lessons/lesson_06.html#co-bude-příště",
    "href": "lessons/lesson_06.html#co-bude-příště",
    "title": "Lekce 6: Funkce a moduly",
    "section": "11.2 Co bude příště?",
    "text": "11.2 Co bude příště?\nV příští lekci:\n\nČtení textových souborů - open(), read(), readlines()\nZápis do souborů - vytváření nových souborů\nZpracování jednoduchých dat - např. seznam měst s populací\nPoužití funkcí z math_utils pro zpracování dat"
  },
  {
    "objectID": "lessons/lesson_06.html#varianta-a-základní",
    "href": "lessons/lesson_06.html#varianta-a-základní",
    "title": "Lekce 6: Funkce a moduly",
    "section": "12.1 Varianta A (základní)",
    "text": "12.1 Varianta A (základní)\n\nDokončete math_utils.py s všemi čtyřmi funkcemi\nVytvořte main.py, který používá všechny funkce\nPřidejte docstringy ke všem funkcím"
  },
  {
    "objectID": "lessons/lesson_06.html#varianta-b-pokročilá",
    "href": "lessons/lesson_06.html#varianta-b-pokročilá",
    "title": "Lekce 6: Funkce a moduly",
    "section": "12.2 Varianta B (pokročilá)",
    "text": "12.2 Varianta B (pokročilá)\n\nRozšiřte math_utils.py o nové funkce:\n\nselection_sort(seznam) - druhý třídící algoritmus\nnajdi_prvocisla(n) - seznam všech prvočísel do n\nn_te_prvocislo(n) - najde n-té prvočíslo\n\nOtestujte všechny nové funkce v main.py"
  },
  {
    "objectID": "lessons/lesson_06.html#varianta-c-výzva",
    "href": "lessons/lesson_06.html#varianta-c-výzva",
    "title": "Lekce 6: Funkce a moduly",
    "section": "12.3 Varianta C (výzva)",
    "text": "12.3 Varianta C (výzva)\nVytvořte modul statistika.py s funkcemi:\ndef prumer(seznam):\n    \"\"\"Vrátí průměr čísel v seznamu.\"\"\"\n    # ...\n\ndef median(seznam):\n    \"\"\"Vrátí medián seznamu (prostřední hodnota).\"\"\"\n    # ...\n\ndef maximum(seznam):\n    \"\"\"Vrátí maximum ze seznamu.\"\"\"\n    # ...\n\ndef minimum(seznam):\n    \"\"\"Vrátí minimum ze seznamu.\"\"\"\n    # ...\nBonus: Můžete použít math_utils.bubble_sort() v median()!"
  },
  {
    "objectID": "lessons/lesson_04.html",
    "href": "lessons/lesson_04.html",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "",
    "text": "Po absolvování této lekce budete umět:\n\nPoužívat porovnávací operátory (==, &lt;, &gt;, …)\nPoužívat logické operátory (and, or, not)\nPsát podmíněné příkazy (if, elif, else)\nPoužívat cyklus for s funkcí range()\nPoužívat cyklus while\nImplementovat algoritmus pro výpočet Fibonacciho posloupnosti a faktoriálu\n\nČasová dotace: 90 minut"
  },
  {
    "objectID": "lessons/lesson_04.html#co-už-znáte",
    "href": "lessons/lesson_04.html#co-už-znáte",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "2.1 Co už znáte",
    "text": "2.1 Co už znáte\nZ minulé lekce už znáte datový typ bool (boolean) s hodnotami True a False:\nje_student = True\nje_zamestnanec = False\nDnes se naučíme, jak tyto hodnoty vytvářet porovnáváním a jak je používat pro rozhodování."
  },
  {
    "objectID": "lessons/lesson_04.html#porovnávací-operátory",
    "href": "lessons/lesson_04.html#porovnávací-operátory",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "2.2 Porovnávací operátory",
    "text": "2.2 Porovnávací operátory\nPorovnáním dvou hodnot získáme logickou hodnotu (True nebo False):\nvek = 18\n\nvek &gt;= 18  # True (je větší nebo rovno 18?)\nvek == 21  # False (je přesně 21?)\nvek &lt; 15   # False (je menší než 15?)\n\n2.2.1 Přehled operátorů:\n\n\n\nOperátor\nVýznam\nPříklad\nVýsledek\n\n\n\n\n==\nrovná se\n5 == 5\nTrue\n\n\n!=\nnerovná se\n5 != 3\nTrue\n\n\n&lt;\nmenší než\n3 &lt; 5\nTrue\n\n\n&gt;\nvětší než\n5 &gt; 3\nTrue\n\n\n&lt;=\nmenší nebo rovno\n5 &lt;= 5\nTrue\n\n\n&gt;=\nvětší nebo rovno\n6 &gt;= 5\nTrue\n\n\n\n\n\n\n\n\n\nWarningPozor na == vs. =\n\n\n\n\n= je přiřazení hodnoty: vek = 18\n== je porovnání: vek == 18\n\nToto je častá chyba začátečníků!"
  },
  {
    "objectID": "lessons/lesson_04.html#logické-operátory",
    "href": "lessons/lesson_04.html#logické-operátory",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "2.3 Logické operátory",
    "text": "2.3 Logické operátory\nPomocí logických operátorů můžeme kombinovat více podmínek:\n\n2.3.1 and (a zároveň)\nObě podmínky musí být pravdivé:\nvek = 25\n\nvek &gt;= 18 and vek &lt; 65  # True - je dospělý a není důchodce\n\n\n2.3.2 or (nebo)\nAlespoň jedna podmínka musí být pravdivá:\nteplota = -5\n\nteplota &lt; 0 or teplota &gt; 35  # True - extrémní počasí\n\n\n2.3.3 not (negace)\nObrací pravdivostní hodnotu:\nje_prazdny = False\n\nnot je_prazdny  # True - není prázdný\n\n\n2.3.4 Kombinace operátorů\nvek = 20\nma_ridicak = True\n\n# Může řídit auto?\nvek &gt;= 18 and ma_ridicak  # True\n\n# Je dítě nebo senior?\nvek &lt; 15 or vek &gt;= 65  # False"
  },
  {
    "objectID": "lessons/lesson_04.html#praktické-příklady",
    "href": "lessons/lesson_04.html#praktické-příklady",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "2.4 Praktické příklady",
    "text": "2.4 Praktické příklady\n# Kontrola rozsahu\ncislo = 50\ncislo &gt;= 0 and cislo &lt;= 100  # Je číslo mezi 0 a 100?\n\n# Kontrola sudosti\ncislo % 2 == 0  # Je číslo sudé?\n\n# Kontrola dělitelnosti\ncislo % 3 == 0  # Je číslo dělitelné třemi?"
  },
  {
    "objectID": "lessons/lesson_04.html#základní-if",
    "href": "lessons/lesson_04.html#základní-if",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "3.1 Základní if",
    "text": "3.1 Základní if\nPokud je podmínka pravdivá, provede se odsazený kód:\nvek = int(input(\"Váš věk: \"))\n\nif vek &gt;= 18:\n    print(\"Můžete řídit auto\")\n\n\n\n\n\n\nImportantOdsazování je POVINNÉ!\n\n\n\nPython používá odsazení (4 mezery = 1 tabulátor) k označení bloků kódu. Špatné odsazení způsobí chybu!\nif vek &gt;= 18:\nprint(\"Chyba!\")  # CHYBA - není odsazené!"
  },
  {
    "objectID": "lessons/lesson_04.html#if-else",
    "href": "lessons/lesson_04.html#if-else",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "3.2 if-else",
    "text": "3.2 if-else\nCo když chceme něco provést v případě, že podmínka není splněna?\nvek = int(input(\"Váš věk: \"))\n\nif vek &gt;= 18:\n    print(\"Dospělý\")\nelse:\n    print(\"Dítě\")"
  },
  {
    "objectID": "lessons/lesson_04.html#if-elif-else",
    "href": "lessons/lesson_04.html#if-elif-else",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "3.3 if-elif-else",
    "text": "3.3 if-elif-else\nPro více možností použijeme elif (else if):\nvek = int(input(\"Váš věk: \"))\n\nif vek &lt; 15:\n    print(\"Vstup zdarma\")\nelif vek &lt; 65:\n    print(\"Plné vstupné: 150 Kč\")\nelse:\n    print(\"Seniorské vstupné: 80 Kč\")\nJak to funguje: 1. Zkontroluje první podmínku (vek &lt; 15) 2. Pokud není splněna, zkontroluje další (vek &lt; 65) 3. Pokud žádná není splněna, provede else\n\n\n\n\n\n\nTipMůžete mít více elif\n\n\n\nif znamka == 1:\n    print(\"Výborně\")\nelif znamka == 2:\n    print(\"Chvalitebně\")\nelif znamka == 3:\n    print(\"Dobře\")\nelif znamka == 4:\n    print(\"Dostatečně\")\nelse:\n    print(\"Nedostatečně\")"
  },
  {
    "objectID": "lessons/lesson_04.html#vnořené-podmínky",
    "href": "lessons/lesson_04.html#vnořené-podmínky",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "3.4 Vnořené podmínky",
    "text": "3.4 Vnořené podmínky\nPodmínky můžete vnořovat do sebe:\nvek = int(input(\"Věk: \"))\nma_ridicak = input(\"Máte řidičák? (ano/ne): \") == \"ano\"\n\nif vek &gt;= 18:\n    if ma_ridicak:\n        print(\"Můžete řídit\")\n    else:\n        print(\"Musíte udělat řidičák\")\nelse:\n    print(\"Jste příliš mladí\")\nAle elegantněji pomocí and:\nif vek &gt;= 18 and ma_ridicak:\n    print(\"Můžete řídit\")\nelif vek &gt;= 18:\n    print(\"Musíte udělat řidičák\")\nelse:\n    print(\"Jste příliš mladí\")"
  },
  {
    "objectID": "lessons/lesson_04.html#cvičení-1-kategorizace-čísla",
    "href": "lessons/lesson_04.html#cvičení-1-kategorizace-čísla",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "3.5 Cvičení 1: Kategorizace čísla",
    "text": "3.5 Cvičení 1: Kategorizace čísla\nNapište program, který: 1. Načte číslo od uživatele 2. Rozhodne, zda je: - Kladné, záporné nebo nula - Sudé nebo liché (pokud není nula)\nNápověda:\ncislo = int(input(\"Zadejte číslo: \"))\n\n# Zde přidejte podmínky..."
  },
  {
    "objectID": "lessons/lesson_04.html#procházení-seznamu",
    "href": "lessons/lesson_04.html#procházení-seznamu",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "4.1 Procházení seznamu",
    "text": "4.1 Procházení seznamu\nNejjednodušší použití - projít všechny prvky seznamu:\nmesta = [\"Praha\", \"Brno\", \"Ostrava\"]\n\nfor mesto in mesta:\n    print(f\"Město: {mesto}\")\nVýsledek:\nMěsto: Praha\nMěsto: Brno\nMěsto: Ostrava\nJak to funguje: - Proměnná mesto postupně nabývá hodnot \"Praha\", \"Brno\", \"Ostrava\" - Pro každou hodnotu se provede odsazený kód"
  },
  {
    "objectID": "lessons/lesson_04.html#funkce-range",
    "href": "lessons/lesson_04.html#funkce-range",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "4.2 Funkce range()",
    "text": "4.2 Funkce range()\nPro opakování N-krát použijeme funkci range():\n\n4.2.1 range(n) - od 0 do n-1\nfor i in range(5):\n    print(i)\nVýsledek:\n0\n1\n2\n3\n4\n\n\n\n\n\n\nWarningrange(5) končí na 4, ne na 5!\n\n\n\nPython počítá od 0, takže range(5) znamená: 0, 1, 2, 3, 4\n\n\n\n\n4.2.2 range(start, stop) - od start do stop-1\nfor i in range(2, 6):\n    print(i)\nVýsledek:\n2\n3\n4\n5\n\n\n4.2.3 range(start, stop, step) - s krokem\nfor i in range(0, 10, 2):\n    print(i)\nVýsledek:\n0\n2\n4\n6\n8\n\n\n4.2.4 Další příklady\n# Zpětně (od 10 do 1)\nfor i in range(10, 0, -1):\n    print(i)\n\n# Od 1 do 10 (často potřebujeme)\nfor i in range(1, 11):\n    print(i)"
  },
  {
    "objectID": "lessons/lesson_04.html#akumulace-v-cyklu",
    "href": "lessons/lesson_04.html#akumulace-v-cyklu",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "4.3 Akumulace v cyklu",
    "text": "4.3 Akumulace v cyklu\nČasto potřebujeme v cyklu sbírat výsledky (akumulovat):\n\n4.3.1 Součet čísel\nsoucet = 0  # Inicializace\n\nfor i in range(1, 11):\n    soucet = soucet + i  # Přičtení k součtu\n\nprint(f\"Součet čísel 1-10: {soucet}\")  # 55\nKratší zápis: soucet += i je totéž jako soucet = soucet + i\n\n\n4.3.2 Součin čísel (faktoriál)\nsoucin = 1  # DŮLEŽITÉ: inicializovat na 1, ne 0!\n\nfor i in range(1, 6):\n    soucin = soucin * i  # Vynásobení\n\nprint(f\"5! = {soucin}\")  # 120"
  },
  {
    "objectID": "lessons/lesson_04.html#cvičení-2-druhé-mocniny",
    "href": "lessons/lesson_04.html#cvičení-2-druhé-mocniny",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "4.4 Cvičení 2: Druhé mocniny",
    "text": "4.4 Cvičení 2: Druhé mocniny\nNapište program, který vytvoří seznam druhých mocnin čísel od 1 do 10.\nNápověda:\nmocniny = []  # Prázdný seznam\n\nfor i in range(1, 11):\n    # Přidejte druhou mocninu do seznamu..."
  },
  {
    "objectID": "lessons/lesson_04.html#základní-syntaxe",
    "href": "lessons/lesson_04.html#základní-syntaxe",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "5.1 Základní syntaxe",
    "text": "5.1 Základní syntaxe\npocitadlo = 0\n\nwhile pocitadlo &lt; 5:\n    print(pocitadlo)\n    pocitadlo = pocitadlo + 1\nVýsledek:\n0\n1\n2\n3\n4\n\n\n\n\n\n\nWarningPozor na nekonečný cyklus!\n\n\n\nPokud podmínka nikdy nepřestane platit, cyklus poběží donekonečna:\npocitadlo = 0\nwhile pocitadlo &lt; 5:\n    print(pocitadlo)\n    # CHYBA - zapomněli jsme zvýšit pocitadlo!\nProgram musíte přerušit: Ctrl+C"
  },
  {
    "objectID": "lessons/lesson_04.html#kdy-použít-for-vs.-while",
    "href": "lessons/lesson_04.html#kdy-použít-for-vs.-while",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "5.2 Kdy použít for vs. while?",
    "text": "5.2 Kdy použít for vs. while?\n\n5.2.1 for - když víme předem, kolikrát opakovat\n# Chci 10x opakovat něco\nfor i in range(10):\n    print(\"Opakování\")\n\n# Chci projít seznam\nfor prvek in seznam:\n    print(prvek)\n\n\n5.2.2 while - když opakujeme, dokud platí podmínka\n# Opakuj, dokud uživatel nezadá správně\nheslo = \"\"\nwhile heslo != \"tajne\":\n    heslo = input(\"Zadejte heslo: \")\n\nprint(\"Správně!\")"
  },
  {
    "objectID": "lessons/lesson_04.html#příklad-hádání-čísla",
    "href": "lessons/lesson_04.html#příklad-hádání-čísla",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "5.3 Příklad: Hádání čísla",
    "text": "5.3 Příklad: Hádání čísla\ntajne_cislo = 42\ntip = 0\n\nwhile tip != tajne_cislo:\n    tip = int(input(\"Hádej číslo: \"))\n    \n    if tip &lt; tajne_cislo:\n        print(\"Větší!\")\n    elif tip &gt; tajne_cislo:\n        print(\"Menší!\")\n\nprint(\"Správně!\")"
  },
  {
    "objectID": "lessons/lesson_04.html#break-a-continue",
    "href": "lessons/lesson_04.html#break-a-continue",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "5.4 break a continue",
    "text": "5.4 break a continue\n\n5.4.1 break - okamžité ukončení cyklu\nfor i in range(100):\n    if i == 5:\n        break  # Ukončí cyklus\n    print(i)\n\n# Vypíše: 0, 1, 2, 3, 4\n\n\n5.4.2 continue - přeskočení zbytku iterace\nfor i in range(10):\n    if i % 2 == 0:\n        continue  # Přeskoč sudá čísla\n    print(i)\n\n# Vypíše: 1, 3, 5, 7, 9"
  },
  {
    "objectID": "lessons/lesson_04.html#co-je-fibonacciho-posloupnost",
    "href": "lessons/lesson_04.html#co-je-fibonacciho-posloupnost",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "6.1 Co je Fibonacciho posloupnost?",
    "text": "6.1 Co je Fibonacciho posloupnost?\nFibonacciho posloupnost je sekvence čísel, kde každé číslo je součtem dvou předchozích:\nF(0) = 0\nF(1) = 1\nF(n) = F(n-1) + F(n-2)\n\nPosloupnost: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...\nPříklady: - F(2) = F(1) + F(0) = 1 + 0 = 1 - F(3) = F(2) + F(1) = 1 + 1 = 2 - F(4) = F(3) + F(2) = 2 + 1 = 3 - F(5) = F(4) + F(3) = 3 + 2 = 5"
  },
  {
    "objectID": "lessons/lesson_04.html#implementace-krok-za-krokem",
    "href": "lessons/lesson_04.html#implementace-krok-za-krokem",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "6.2 Implementace krok za krokem",
    "text": "6.2 Implementace krok za krokem\n\n6.2.1 Krok 1: Načtení vstupu\nn = int(input(\"Který člen Fibonacciho posloupnosti? \"))\n\n\n6.2.2 Krok 2: Inicializace\nPotřebujeme dvě proměnné pro dva předchozí členy:\na = 0  # F(0)\nb = 1  # F(1)\n\n\n6.2.3 Krok 3: Cyklus\nV každém kroku posuneme hodnoty:\nfor i in range(n):\n    a, b = b, a + b\nCo se děje: - a, b = b, a + b je současné přiřazení - Nejprve se vypočítá pravá strana: nové_a = b, nové_b = a + b - Pak se přiřadí: a = nové_a, b = nové_b\nPříklad pro n=5:\nKrok 0: a=0, b=1  →  a=1, b=0+1=1\nKrok 1: a=1, b=1  →  a=1, b=1+1=2\nKrok 2: a=1, b=2  →  a=2, b=1+2=3\nKrok 3: a=2, b=3  →  a=3, b=2+3=5\nKrok 4: a=3, b=5  →  a=5, b=3+5=8\n\n\n6.2.4 Krok 4: Výpis výsledku\nprint(f\"{n}. člen Fibonacciho posloupnosti: {a}\")"
  },
  {
    "objectID": "lessons/lesson_04.html#celý-program",
    "href": "lessons/lesson_04.html#celý-program",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "6.3 Celý program",
    "text": "6.3 Celý program\nn = int(input(\"Který člen Fibonacciho posloupnosti? \"))\n\na, b = 0, 1\n\nfor i in range(n):\n    a, b = b, a + b\n\nprint(f\"{n}. člen: {a}\")"
  },
  {
    "objectID": "lessons/lesson_04.html#test-programu",
    "href": "lessons/lesson_04.html#test-programu",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "6.4 Test programu",
    "text": "6.4 Test programu\nKterý člen Fibonacciho posloupnosti? 10\n10. člen: 55\n\n\n\n\n\n\nTipProč to funguje?\n\n\n\nKouzlo je v a, b = b, a + b. Python nejprve vyhodnotí celou pravou stranu, pak přiřadí:\n# Špatně (nefunguje):\na = b\nb = a + b  # Tady už je a změněné!\n\n# Správně (funguje):\na, b = b, a + b  # Python přiřadí obě hodnoty najednou"
  },
  {
    "objectID": "lessons/lesson_04.html#zadání",
    "href": "lessons/lesson_04.html#zadání",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "7.1 Zadání",
    "text": "7.1 Zadání\nFaktoriál čísla n (označuje se n!) je součin všech přirozených čísel od 1 do n:\nn! = n × (n-1) × (n-2) × ... × 2 × 1\n\nPříklady:\n0! = 1  (definice)\n1! = 1\n2! = 2 × 1 = 2\n3! = 3 × 2 × 1 = 6\n4! = 4 × 3 × 2 × 1 = 24\n5! = 5 × 4 × 3 × 2 × 1 = 120"
  },
  {
    "objectID": "lessons/lesson_04.html#úkol",
    "href": "lessons/lesson_04.html#úkol",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "7.2 Úkol",
    "text": "7.2 Úkol\nNapište program, který: 1. Načte číslo n od uživatele 2. Vypočítá faktoriál tohoto čísla 3. Vypíše výsledek\nNápověda: - Použijte cyklus for s range() - Začněte s vysledek = 1 (DŮLEŽITÉ - ne 0!) - V každém kroku násobte - Rozmyslete si správný rozsah pro range()\nKostra programu:\nn = int(input(\"Zadejte číslo: \"))\n\nvysledek = 1  # Inicializace\n\n# Zde přidejte cyklus...\n\nprint(f\"{n}! = {vysledek}\")"
  },
  {
    "objectID": "lessons/lesson_04.html#řešení",
    "href": "lessons/lesson_04.html#řešení",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "7.3 Řešení",
    "text": "7.3 Řešení"
  },
  {
    "objectID": "lessons/lesson_04.html#co-jsme-se-naučili",
    "href": "lessons/lesson_04.html#co-jsme-se-naučili",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "8.1 Co jsme se naučili",
    "text": "8.1 Co jsme se naučili\n✅ Porovnávací operátory: ==, !=, &lt;, &gt;, &lt;=, &gt;=\n✅ Logické operátory: and, or, not\n✅ Podmínky: if, elif, else\n✅ For cyklus: procházení seznamů, funkce range()\n✅ While cyklus: opakování dokud platí podmínka\n✅ break a continue: ovládání cyklů\n✅ Fibonacci: iterativní algoritmus s akumulací\n✅ Faktoriál: součin čísel pomocí cyklu"
  },
  {
    "objectID": "lessons/lesson_04.html#co-bude-příště",
    "href": "lessons/lesson_04.html#co-bude-příště",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "8.2 Co bude příště?",
    "text": "8.2 Co bude příště?\nV příští lekci:\n\nRozšíření práce se seznamy (slicing, metody)\nPrvočísla - složitější podmínky v cyklech\nTřídění - vnořené cykly a algoritmické myšlení\nPropojení s Model Builder - vnořené modely vs. vnořené cykly"
  },
  {
    "objectID": "lessons/lesson_04.html#varianta-a-základní",
    "href": "lessons/lesson_04.html#varianta-a-základní",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "9.1 Varianta A (základní)",
    "text": "9.1 Varianta A (základní)\n\nDokončete faktoriál (pokud jste ho nestihli)\nTabulka faktoriálů: Vypište faktoriály čísel 1-10 ve formátu:\n1! = 1\n2! = 2\n3! = 6\n...\n10! = 3628800"
  },
  {
    "objectID": "lessons/lesson_04.html#varianta-b-pokročilá",
    "href": "lessons/lesson_04.html#varianta-b-pokročilá",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "9.2 Varianta B (pokročilá)",
    "text": "9.2 Varianta B (pokročilá)\n\nFibonacci pro seznam: Vypočítejte Fibonacci čísla pro seznam [5, 10, 15, 20]\nNejvětší Fibonacci pod 1000: Najděte největší Fibonacci číslo menší než 1000\n\nNápověda pro B2:\na, b = 0, 1\n\nwhile b &lt; 1000:\n    # Co dál?"
  },
  {
    "objectID": "lessons/lesson_04.html#bonusový-úkol-nepovinný",
    "href": "lessons/lesson_04.html#bonusový-úkol-nepovinný",
    "title": "Lekce 4: Podmínky a cykly",
    "section": "9.3 Bonusový úkol (nepovinný)",
    "text": "9.3 Bonusový úkol (nepovinný)\nPalindrom: Napište program, který zjistí, zda je číslo palindrom (čte se stejně zepředu i zezadu).\nPříklady: 121, 1331, 12321\nNápověda: Převeďte číslo na string a porovnejte ho s obráceným stringem."
  },
  {
    "objectID": "lessons/lesson_01.html",
    "href": "lessons/lesson_01.html",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "",
    "text": "NoteInformace o lekci\n\n\n\nČasová dotace: 90 minut (1,5 hodiny)\nPředpoklady: Základní znalost ArcGIS Pro a Model Builderu (GIS 1, GIS 2)\nMateriály: ArcGIS Pro projekt ke stažení na [odkaz]"
  },
  {
    "objectID": "lessons/lesson_01.html#co-se-v-tomto-kurzu-naučíte",
    "href": "lessons/lesson_01.html#co-se-v-tomto-kurzu-naučíte",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "1.1 Co se v tomto kurzu naučíte",
    "text": "1.1 Co se v tomto kurzu naučíte\nTento kurz vás provede cestou od vizuálního programování v Model Builderu k psaní vlastních Python skriptů pro automatizaci GIS úloh.\n\nTýdny 1-2Týdny 3-5Týdny 6-9Týdny 10-11Týden 12\n\n\nModel Builder → Python\n\nÚvod do automatizace\nPrvní pohled na Python kód\nExport modelů\nIterátory a limity Model Builderu\n\n\n\nZáklady programování v Pythonu\n\nProměnné, cykly, funkce\nPráce se soubory a CSV\nAlgoritmické myšlení\nTřídící algoritmy\n\n\n\nArcPy - Python pro GIS\n\nAutomatizace analýz\nTabulkové operace\nVektorové a rastrové analýzy\nKurzory a geometrie\n\n\n\nPokročilé techniky\n\nPráce s geometriemi\nPython Toolboxy\nTvorba nástrojů s GUI\nOptimalizace kódu\n\n\n\nZávěrečný projekt\n\nVlastní nástroj\nŘešení reálného problému\nDokumentace"
  },
  {
    "objectID": "lessons/lesson_01.html#proč-tento-kurz",
    "href": "lessons/lesson_01.html#proč-tento-kurz",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "1.2 Proč tento kurz?",
    "text": "1.2 Proč tento kurz?\nUž umíte pracovat s ArcGIS Pro - znáte nástroje, dokážete provádět analýzy, vytvářet mapy. Nyní se naučíte GIS automatizovat a programovat.\n\n\n\n\n\n\nTipPříklady z praxe\n\n\n\n🔄 Opakující se úlohy\n“Každý měsíc musíme aktualizovat mapy dostupnosti zdravotnických zařízení pro 14 krajů.”\n→ Řešení: Napsat skript, který to udělá automaticky za 5 minut.\n📊 Velké množství dat\n“Potřebujeme zpracovat 500 rastrových snímků z družice.”\n→ Řešení: Python skript běžící přes noc, vy ráno kontrolujete výsledky.\n🎯 Složité analýzy\n“Chceme optimalizovat umístění větrných elektráren na základě 10 různých kritérií.”\n→ Řešení: Vlastní nástroj s GUI, který může používat kdokoli v týmu."
  },
  {
    "objectID": "lessons/lesson_01.html#struktura-výuky",
    "href": "lessons/lesson_01.html#struktura-výuky",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "1.3 Struktura výuky",
    "text": "1.3 Struktura výuky\nKaždý týden:\n\n2× 1,5 hodiny praktických cvičení\nKombinace výkladu + samostatné práce\nVolitelné úkoly k procvičení\n\nHodnocení:\n\nAktivita na cvičeních\nPrůběžné úkoly (malé, týdenní)\nZávěrečný projekt (hlavní část hodnocení)\n\nFunkční Python nástroj\nŘeší reálný GIS problém\nS dokumentací\n\n\nNástroje:\n\nArcGIS Pro (máte nainstalované?)\nPython 3.x (součást ArcGIS Pro)\nTextový editor (Notepad++, VS Code)\nPozději: Jupyter Notebook"
  },
  {
    "objectID": "lessons/lesson_01.html#zadání",
    "href": "lessons/lesson_01.html#zadání",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "2.1 Zadání",
    "text": "2.1 Zadání\n\n\n\n\n\n\nImportantAnalytická úloha\n\n\n\nJaké je zastoupení lesů v ochranném pásmu 500 metrů kolem železnic v okrese Jindřichův Hradec?\n\n\n\n2.1.1 Proč tato úloha?\n\n✅ Realistická - ochranná pásma, hlukové mapování, dostupnost\n✅ Jednoduchá - pochopitelné kroky\n✅ Rozšiřitelná - později přidáme iterátory a Python\n✅ Ukáže limity Model Builderu → motivace pro Python"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-data",
    "href": "lessons/lesson_01.html#sec-data",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "2.2 Data",
    "text": "2.2 Data\nVšechna data jsou připravena v projektu ArcGIS Pro, který si stáhnete z [odkaz].\n\nOkresyŽelezniceKrajinný pokryv\n\n\nokresy - polygony okresů ČR\n\nSouřadnicový systém: EPSG:3035\nKlíčové pole: NAZ_LAU1 (název okresu)\n\n\n\nzeleznice - linie železnic ČR\n\nSouřadnicový systém: EPSG:3035\nGeometrie: polyline\n\n\n\nclc_2018 - rastr Corine Land Cover\n\nSouřadnicový systém: EPSG:3035\nHodnoty:\n\n1xx = Urbanizované plochy\n2xx = Zemědělská půda\n3xx = Lesy ⭐\n4xx = Mokřady\n5xx = Vodní plochy\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nPoznámka: Data jsou už transformována do jednotného souřadnicového systému ETRS89 LAEA (EPSG: 3035)."
  },
  {
    "objectID": "lessons/lesson_01.html#analytický-postup",
    "href": "lessons/lesson_01.html#analytický-postup",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "2.3 Analytický postup",
    "text": "2.3 Analytický postup\nCíl: Zjistit, kolik procent plochy v pásmu 500m od železnic v okrese Jindřichův Hradec tvoří lesy.\n\nflowchart TD\n    A[Okresy] --&gt; B[Vybrat JH]\n    B --&gt; C[Okres JH]\n    D[železnice] --&gt; E[Oříznout okresem]\n    C --&gt; E\n    E --&gt; F[železnice v JH]\n    F --&gt; G[Buffer 500m]\n    G --&gt; H[Pásmo 500m]\n    I[CLC rastr] --&gt; J[Binární rastr lesů]\n    H --&gt; K[Zónální statistika]\n    J --&gt; K\n    K --&gt; L[Výsledek]\n    \n    style C fill:#6baed6\n    style F fill:#6baed6\n    style H fill:#6baed6\n    style J fill:#74c476\n    style L fill:#fd8d3c\n\n\n\n\n\nflowchart TD\n    A[Okresy] --&gt; B[Vybrat JH]\n    B --&gt; C[Okres JH]\n    D[železnice] --&gt; E[Oříznout okresem]\n    C --&gt; E\n    E --&gt; F[železnice v JH]\n    F --&gt; G[Buffer 500m]\n    G --&gt; H[Pásmo 500m]\n    I[CLC rastr] --&gt; J[Binární rastr lesů]\n    H --&gt; K[Zónální statistika]\n    J --&gt; K\n    K --&gt; L[Výsledek]\n    \n    style C fill:#6baed6\n    style F fill:#6baed6\n    style H fill:#6baed6\n    style J fill:#74c476\n    style L fill:#fd8d3c\n\n\n\n\nFigure 1: Workflow analytického postupu"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-kroky",
    "href": "lessons/lesson_01.html#sec-kroky",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "2.4 Krok za krokem",
    "text": "2.4 Krok za krokem\n\n2.4.1 Příprava\n\nOtevřete ArcGIS Pro projekt Lekce1_AutomatizaceGIS.aprx\nProhlédněte si data v mapě\nVytvořte nový toolbox:\n\nPravý klik v Catalog Pane → New → Toolbox\nPojmenujte: Lekce1_Tools.atbx\n\nVytvořte nový model:\n\nPravý klik na toolbox → New → Model\nPojmenujte: Analyza_Lesu_v_Pasmu\n\n\n\n\n2.4.2 Krok 1: Výběr okresu Jindřichův Hradec\nNástroj: Make Feature Layer\n\n\n\n\n\n\nTipProč Make Feature Layer?\n\n\n\nNástroj Select vytváří novou datovou sadu na disku. Make Feature Layer vytváří pouze dočasnou vrstvu v paměti, což je rychlejší a efektivnější.\n\n\nPostup:\n\nV modelu: Insert → Tool → vyhledat “Make Feature Layer”\nPřetáhněte vrstvu okresy do modelu\nPropojte okresy s nástrojem Make Feature Layer\nDvojklik na nástroj → nastavit parametry:\n\nInput Features: okresy\nOutput Layer: okres_jh_layer\nExpression: Klikněte SQL 🔧\n\n\nNAZ_LAU1 = 'Jindřichův Hradec'\n\nOK\n\nKontrola: 🔵 okresy → 🟡 Make Feature Layer → 🔵 okres_jh_layer\n\n\n2.4.3 Krok 2: Ořezání železnic na okres\nNástroj: Clip\nÚčel: Z celé vrstvy železnic chceme jen úseky, které jsou v okrese JH.\nPostup:\n\nInsert → Tool → “Clip”\nPřetáhněte vrstvu dalnice do modelu\nPropojte:\n\ndalnice → Clip (jako Input Features)\nokres_jh_layer → Clip (jako Clip Features)\n\nDvojklik na Clip → parametry:\n\nInput Features: dalnice\nClip Features: okres_jh_layer\nOutput: dalnice_clip\n\nOK\n\n\n\n2.4.4 Krok 3: Vytvoření ochranného pásma (buffer)\nNástroj: Buffer\n\n\n\n\n\n\nImportantDůležité nastavení\n\n\n\nDissolve Type = ALL (spojí všechny buffery do jednoho)\n\n\nPostup:\n\nInsert → Tool → “Buffer”\nPropojte dalnice_clip → Buffer\nDvojklik na Buffer → parametry:\n\nInput Features: dalnice_clip\nOutput: buffer_500m\nDistance: 500 Meters\nDissolve Type: ALL ← důležité!\nSide Type: FULL\nEnd Type: ROUND\n\nOK\n\n\n\n\n\n\n\nNoteProč Dissolve ALL?\n\n\n\n\n\nBez dissolve bychom měli desítky překrývajících se bufferů (jeden pro každý úsek železnice). S ALL se všechny spojí do jednoho (multi)polygonu.\nDíky tomu dostaneme v zonální statistice přímo jeden výsledek - jedno číslo představující průměr z celého pásma.\n\n\n\n\n\n2.4.5 Krok 4: Vytvoření binárního rastru lesů\nNástroj: Equal To (Spatial Analyst)\nÚčel: Z CLC rastru (hodnoty 1,2,3,4,5) vytvořit rastr s hodnotami 0/1, kde 1 = les.\nPostup:\n\nInsert → Tool → “Equal To” (v kategorii Spatial Analyst → Math → Logical)\nPřetáhněte rastr clc_2018 do modelu\nPropojte clc_2018 → Equal To\nDvojklik na Equal To:\n\nInput raster: clc_2018\nInput value: 3 (kód pro lesy)\nOutput: lesy_binarni\n\nOK\n\n\n\n\n\n\n\nNoteCo se stane?\n\n\n\nRastr bude mít hodnotu 1 tam, kde je les (CLC=3), a hodnotu 0 všude jinde.\n\n\n\n\n2.4.6 Krok 5: Zonální statistika\nNástroj: Zonal Statistics as Table\nÚčel: Spočítat průměr z binárního rastru v rámci bufferu.\n\n\n\n\n\n\nTipMatematický trik\n\n\n\nPrůměr z nul a jedniček = podíl jedniček = relativní plocha lesů!\nPokud je průměr 0.35, znamená to, že 35% pixelů má hodnotu 1 (les).\n\n\nPostup:\n\nInsert → Tool → “Zonal Statistics as Table”\nPropojte:\n\nbuffer_500m → Zonal Statistics (jako Input Zone Data)\nlesy_binarni → Zonal Statistics (jako Input Value Raster)\n\nDvojklik na Zonal Statistics:\n\nInput Zone Data: buffer_500m\nZone Field: OBJECTID\nInput Value Raster: lesy_binarni\nOutput Table: vysledek_lesy.dbf\nStatistics Type: MEAN (průměr)\nIgnore NoData: zaškrtnuto\n\nOK\n\n\n\n2.4.7 Uložení a spuštění modelu\n\n1. Uložit2. Ověřit3. Spustit4. Počkat5. Výsledek\n\n\nFile → Save (Ctrl+S)\n\n\nModel → Validate Entire Model\nPokud je vše OK, všechny nástroje budou barevné (ne šedé)\n\n\nKlikněte na ▶️ Run\n\n\nModel běží, sledujte progress\n\n\nOtevřete vysledek_lesy.dbf"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-vysledek",
    "href": "lessons/lesson_01.html#sec-vysledek",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "2.5 Interpretace výsledku",
    "text": "2.5 Interpretace výsledku\nV tabulce vysledek_lesy.dbf najdete sloupec MEAN.\nVýznam:\n\nMEAN = 0.354 → 35.4% plochy v pásmu tvoří lesy\nMEAN = 0.205 → 20.5% plochy v pásmu tvoří lesy\n\n\n\n\n\n\n\nNoteProč to funguje?\n\n\n\nPrůměr z binárního rastru (0/1) v dané zóně = podíl pixelů s hodnotou 1 = relativní plocha lesů.\nDíky nastavení Dissolve ALL v bufferu máme jeden (multi)polygon, takže dostaneme přímo jedno číslo - procento lesů v celém pásmu kolem železnic v okrese.\n\n\n\n2.5.1 A co kdyby více vzdáleností?\nSituace:\n“Váš šéf říká: ‘Chci vidět, jak se to mění s vzdáleností. Spočítej to pro 100m, 300m, 500m a 1000m.’”\n\n\n\n\n\n\nWarningProblém\n\n\n\nCo byste museli udělat?\n\nZměnit Buffer distance na 100m → spustit\nZměnit na 300m → spustit\nZměnit na 500m → spustit (už máme)\nZměnit na 1000m → spustit\n\n= 4× ručně spustit model, pokaždé změnit parametr\nA pak: 4 samostatné tabulky → jak je dát dohromady pro porovnání?\n\n\n\n\n\n\n\n\nTipŘešení\n\n\n\nPříští týden: Naučíme se ITERÁTORY - automatické procházení různých hodnot\nZa měsíc: Naučíme se PYTHON - elegantní řešení s vnořenými cykly"
  },
  {
    "objectID": "lessons/lesson_01.html#proč-exportovat",
    "href": "lessons/lesson_01.html#proč-exportovat",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.1 Proč exportovat?",
    "text": "3.1 Proč exportovat?\nModel Builder je skvělý pro vizualizaci workflow, ale má limity:\n\nTěžko se verzuje (Git, SVN)\nSložité sdílení (musíte sdílet celý toolbox)\nOmezené možnosti logiky (podmínky, cykly)\n\nPython nám dává:\n\n✅ Textový soubor (snadno sdílitelný, verzovatelný)\n✅ Možnost úprav v textovém editoru\n✅ Přidání vlastní logiky\n✅ Spuštění mimo ArcGIS Pro (automatizace)"
  },
  {
    "objectID": "lessons/lesson_01.html#jak-exportovat",
    "href": "lessons/lesson_01.html#jak-exportovat",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.2 Jak exportovat",
    "text": "3.2 Jak exportovat\n\nV Model Builderu: Model → Export → To Python Script\nUložit jako: model_export.py\nVybrat lokaci a uložit"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-python-kod",
    "href": "lessons/lesson_01.html#sec-python-kod",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.3 Prohlédnutí Python kódu",
    "text": "3.3 Prohlédnutí Python kódu\nOtevřete exportovaný soubor v textovém editoru:\n\nNotepad++ (doporučeno - zvýrazňuje syntax)\nVS Code (pokud máte)\nPoznámkový blok (funguje, ale bez barev)\n\n\n3.3.1 Struktura kódu\n\n\nmodel_export.py\n\n# -*- coding: utf-8 -*-\n# ---------------------------------------------------------------------------\n# model_export.py\n# Created on: 2025-01-15\n# Description: Analýza lesů v pásmu kolem železnic\n# ---------------------------------------------------------------------------\n\n# Import knihovny ArcPy\nimport arcpy\n\n# Lokální proměnné (cesty k datům)\nokresy = \"okresy\"\ndalnice = \"dalnice\"\nclc_2018 = \"clc_2018\"\nokres_jh_layer = \"okres_jh_layer\"\ndalnice_clip = \"C:\\\\Data\\\\dalnice_clip.shp\"\nbuffer_500m = \"C:\\\\Data\\\\buffer_500m.shp\"\nlesy_binarni = \"C:\\\\Data\\\\lesy_binarni.tif\"\nvysledek_lesy = \"C:\\\\Data\\\\vysledek_lesy.dbf\"\n\n# PROCES 1: Make Feature Layer - výběr okresu\narcpy.MakeFeatureLayer_management(\n    in_features=okresy,\n    out_layer=okres_jh_layer,\n    where_clause=\"NAZ_LAU1 = 'Jindřichův Hradec'\"\n)\n\n# PROCES 2: Clip - ořezání železnic\narcpy.Clip_analysis(\n    in_features=dalnice,\n    clip_features=okres_jh_layer,\n    out_feature_class=dalnice_clip\n)\n\n# PROCES 3: Buffer - ochranné pásmo\narcpy.Buffer_analysis(\n    in_features=dalnice_clip,\n    out_feature_class=buffer_500m,\n    buffer_distance_or_field=\"500 Meters\",\n    dissolve_option=\"ALL\"\n)\n\n# PROCES 4: Equal To - binární rastr lesů\narcpy.gp.EqualTo_sa(\n    in_raster_or_constant1=clc_2018,\n    in_raster_or_constant2=\"3\",\n    out_raster=lesy_binarni\n)\n\n# PROCES 5: Zonal Statistics as Table\narcpy.gp.ZonalStatisticsAsTable_sa(\n    in_zone_data=buffer_500m,\n    zone_field=\"OBJECTID\",\n    in_value_raster=lesy_binarni,\n    out_table=vysledek_lesy,\n    statistics_type=\"MEAN\"\n)\n\nprint(\"Model dokončen!\")"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-rozbor-kodu",
    "href": "lessons/lesson_01.html#sec-rozbor-kodu",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.4 Co vidíme v kódu?",
    "text": "3.4 Co vidíme v kódu?\n\n3.4.1 1. Import ArcPy\nimport arcpy\n\n\n\n\n\n\nNote\n\n\n\nVýznam: “Chci použít nástroje ArcGIS v Pythonu”\nAnalogie: Jako když v ArcGIS Pro otevřete ArcToolbox - získáte přístup k nástrojům.\n\n\n\n\n3.4.2 2. Proměnné\nokresy = \"okresy\"\nvzdalenost = \"500 Meters\"\n\n\n\n\n\n\nTip\n\n\n\nVýhoda proměnných: Můžeme snadno změnit na jednom místě:\nvzdalenost = \"1000 Meters\"  # Změna parametru!\n\n\n\n\n3.4.3 3. Volání nástroje\narcpy.Buffer_analysis(\n    in_features=dalnice_clip,\n    out_feature_class=buffer_500m,\n    buffer_distance_or_field=\"500 Meters\",\n    dissolve_option=\"ALL\"\n)\nSrovnání s Model Builderem:\n\n\n\nTable 1: Srovnání Model Builder vs. Python\n\n\n\n\n\nModel Builder\nPython\n\n\n\n\nŽlutý obdélník “Buffer”\narcpy.Buffer_analysis()\n\n\nDialog s parametry\nParametry v závorkách\n\n\nPropojení šipkou\nProměnné jako parametry\n\n\nKliknutí na Run\npython script.py\n\n\n\n\n\n\n\n\n\n\n\n\nImportantKlíčové poznání\n\n\n\nJe to STEJNÉ, jen jinak zapsané!"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-prozkoumani",
    "href": "lessons/lesson_01.html#sec-prozkoumani",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.5 Interaktivní prozkoumání",
    "text": "3.5 Interaktivní prozkoumání\n\n\n\n\n\n\nNoteÚkol 1: Najděte v kódu\n\n\n\n\n\nKde je napsáno “Jindřichův Hradec”?\nwhere_clause=\"NAZ_LAU1 = 'Jindřichův Hradec'\"\n\n\n\n\n\n\n\n\n\nNoteÚkol 2: Najděte v kódu\n\n\n\n\n\nKde je vzdálenost bufferu?\nbuffer_distance_or_field=\"500 Meters\"\n\n\n\n\n\n\n\n\n\nNoteÚkol 3: Najděte v kódu\n\n\n\n\n\nKde se vytváří binární rastr lesů?\narcpy.gp.EqualTo_sa(\n    in_raster_or_constant1=clc_2018,\n    in_raster_or_constant2=\"3\",  # ← tady je kód pro lesy\n    out_raster=lesy_binarni\n)"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-zmeny",
    "href": "lessons/lesson_01.html#sec-zmeny",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.6 Co by se dalo snadno změnit v Pythonu?",
    "text": "3.6 Co by se dalo snadno změnit v Pythonu?\n\nZměna vzdálenostiJiný okresVíce vzdáleností najednou\n\n\n# Místo:\nbuffer_distance_or_field=\"500 Meters\"\n\n# Můžeme:\nvzdalenost = 1000  # metry\nbuffer_distance_or_field=f\"{vzdalenost} Meters\"\n\n\n# Místo:\nwhere_clause=\"NAZ_LAU1 = 'Jindřichův Hradec'\"\n\n# Můžeme:\nokres = \"Praha-východ\"\nwhere_clause=f\"NAZ_LAU1 = '{okres}'\"\n\n\n# V Pythonu bychom mohli:\nvzdalenosti = [100, 300, 500, 1000]\nvysledky = []\n\nfor vzd in vzdalenosti:\n    # Buffer\n    buffer = arcpy.Buffer_analysis(..., f\"{vzd} Meters\")\n    \n    # Zonal Statistics\n    vysledek = arcpy.ZonalStatisticsAsTable(...)\n    \n    # Uložit výsledek\n    vysledky.append(vysledek)\n\n# Hotovo! Všechny vzdálenosti v jednom běhu!\n\n\n\n\n\n\n\n\n\nTipVidíte?\n\n\n\nV Pythonu můžeme snadno:\n\nMěnit parametry\nPřidávat výpočty\nAutomatizovat opakování\nSpojovat výsledky do jedné struktury!"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-srovnani-vyhod",
    "href": "lessons/lesson_01.html#sec-srovnani-vyhod",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "3.7 Výhody Pythonu vs. Model Builder",
    "text": "3.7 Výhody Pythonu vs. Model Builder\n\n\n\nTable 2: Srovnání Model Builder vs. Python\n\n\n\n\n\nAspekt\nModel Builder\nPython\n\n\n\n\nVizualizace\n✅ Výborná\n❌ Žádná (jen text)\n\n\nRychlé vytvoření\n✅ Drag & drop\n❌ Musíte psát\n\n\nSdílení\n⚠️ Toolbox soubor\n✅ Textový .py soubor\n\n\nVerzování (Git)\n❌ Binární formát\n✅ Textový formát\n\n\nPodmínky (IF)\n⚠️ Omezené\n✅ Plná podpora\n\n\nCykly (FOR)\n⚠️ Jen iterátory\n✅ Plná flexibilita\n\n\nVýpočty\n⚠️ Calculate Field\n✅ Jakékoli operace\n\n\nDebugging\n⚠️ Obtížné\n✅ Snadné\n\n\nRychlost běhu\n⚠️ Pomalejší\n✅ Rychlejší\n\n\nSpojování výsledků\n⚠️ Velmi složité\n✅ Jednoduché (seznamy)\n\n\n\n\n\n\n\n\n\n\n\n\nImportantZávěr\n\n\n\nModel Builder = skvělý start, vizuální, rychlý pro jednoduché úlohy\nPython = mocný nástroj pro opakování, složitou logiku, automatizaci"
  },
  {
    "objectID": "lessons/lesson_01.html#různé-vzdálenosti---motivace-pro-iterátory",
    "href": "lessons/lesson_01.html#různé-vzdálenosti---motivace-pro-iterátory",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "4.1 Různé vzdálenosti - motivace pro iterátory",
    "text": "4.1 Různé vzdálenosti - motivace pro iterátory\nScénář: Chceme analyzovat 4 různé vzdálenosti: 100m, 300m, 500m, 1000m\n\n4.1.1 V Model Builderu bez iterátoru\nMuseli byste:\n\nZměnit Buffer distance na 100m → Spustit → vysledek_100.dbf\nZměnit na 300m → Spustit → vysledek_300.dbf\nZměnit na 500m → Spustit → vysledek_500.dbf\nZměnit na 1000m → Spustit → vysledek_1000.dbf\n\n⏱️ Čas: 15-20 minut\n😫 Problém: Nudné, náchylné k chybě, 4 samostatné tabulky\n\n\n4.1.2 S iterátorem (příští týden)\n\nflowchart TD\n    A[Tabulka vzdáleností:&lt;br/&gt;100, 300, 500, 1000] --&gt; B[ITERÁTOR]\n    B --&gt; C[Buffer %Distance%]\n    C --&gt; D[Zonal Statistics]\n    D --&gt; E[vysledek_%Distance%.dbf]\n    \n    style B fill:#fd8d3c\n    style E fill:#6baed6\n\n\n\n\nflowchart TD\n    A[Tabulka vzdáleností:&lt;br/&gt;100, 300, 500, 1000] --&gt; B[ITERÁTOR]\n    B --&gt; C[Buffer %Distance%]\n    C --&gt; D[Zonal Statistics]\n    D --&gt; E[vysledek_%Distance%.dbf]\n    \n    style B fill:#fd8d3c\n    style E fill:#6baed6\n\n\n Model s iterátorem \n\n\n\n\n\n\n\n\n\nTipVýhoda\n\n\n\nSpustíte jednou, iterator automaticky projde všechny vzdálenosti!\n\n\n\n\n\n\n\n\nWarningAle…\n\n\n\nDostanete 4 samostatné tabulky:\n\nvysledek_100.dbf → MEAN = 0.42\nvysledek_300.dbf → MEAN = 0.38\nvysledek_500.dbf → MEAN = 0.35\nvysledek_1000.dbf → MEAN = 0.31\n\nJak je spojíte do jedné pro porovnání?\nV Model Builderu složité (Add Field + Calculate Field + Merge pro každou tabulku).\nV Pythonu jednoduché (seznam)!"
  },
  {
    "objectID": "lessons/lesson_01.html#kombinace-parametrů---motivace-pro-python",
    "href": "lessons/lesson_01.html#kombinace-parametrů---motivace-pro-python",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "4.2 Kombinace parametrů - motivace pro Python",
    "text": "4.2 Kombinace parametrů - motivace pro Python\nScénář: Chceme analyzovat:\n\n2 typy komunikací (železnice, silnice I. třídy)\n× 4 vzdálenosti (100, 300, 500, 1000)\n= 8 kombinací\n\n\n4.2.1 V Model Builderu\n\nflowchart TD\n    A[Model 1: Iterátor komunikací] --&gt; B[železnice]\n    A --&gt; C[Silnice I.]\n    B --&gt; D[Model 2: Iterátor vzdáleností]\n    C --&gt; E[Model 2: Iterátor vzdáleností]\n    D --&gt; F[4 tabulky]\n    E --&gt; G[4 tabulky]\n    \n    style A fill:#fd8d3c\n    style D fill:#fee391\n    style E fill:#fee391\n\n\n\n\nflowchart TD\n    A[Model 1: Iterátor komunikací] --&gt; B[železnice]\n    A --&gt; C[Silnice I.]\n    B --&gt; D[Model 2: Iterátor vzdáleností]\n    C --&gt; E[Model 2: Iterátor vzdáleností]\n    D --&gt; F[4 tabulky]\n    E --&gt; G[4 tabulky]\n    \n    style A fill:#fd8d3c\n    style D fill:#fee391\n    style E fill:#fee391\n\n\n Vnořené modely (složité!) \n\n\n\n\n\n\n\n\n\nWarningProblémy\n\n\n\n\nPotřebujete 2 vnořené modely (složité nastavení!)\nModel 1 (vnější) volá Model 2 (vnitřní)\nVýsledek: 8 samostatných tabulek\nJak je spojit? Velmi složité…\n\n\n\n\n\n4.2.2 V Pythonu\nkomunikace = ['dalnice', 'silnice1']\nvzdalenosti = [100, 300, 500, 1000]\n\nvysledky = []\n\nfor kom in komunikace:\n    for vzd in vzdalenosti:\n        vysledek = analyzuj(kom, vzd)\n        vysledky.append({\n            'Komunikace': kom,\n            'Vzdalenost': vzd,\n            'Procento_lesu': vysledek\n        })\n\n# Jedna tabulka, 8 řádků!\nuloz_tabulku(vysledky, 'vsechny_vysledky.csv')\n\n\n\n\n\n\nImportantVidíte rozdíl?\n\n\n\nModel Builder: 2 modely, 8 tabulek, složité spojování\nPython: Vnořený for cyklus (5 řádků), hotovo!"
  },
  {
    "objectID": "lessons/lesson_01.html#co-jsme-se-dnes-naučili",
    "href": "lessons/lesson_01.html#co-jsme-se-dnes-naučili",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "5.1 Co jsme se dnes naučili",
    "text": "5.1 Co jsme se dnes naučili\n\n\n\n\n\n\nTipPřehled lekce\n\n\n\n✅ Struktura kurzu\n\n12 týdnů od Model Builderu k Pythonu\nPraktické příklady motivace\n\n✅ Praktická úloha\n\nAnalýza krajinného pokryvu v ochranných pásmech\n5 kroků: výběr → clip → buffer → binární rastr → zonální statistika\nVýsledek: procento lesů v pásmu 500m kolem železnic\n\n✅ Export do Pythonu\n\nModel = Python kód\nPrvní pohled na Python syntax\nSrovnání Model Builder vs. Python\n\n✅ Limity Model Builderu\n\nOpakování = ruční spouštění nebo iterátory\nVíce tabulek = složité spojování\nVnořené cykly = velmi složité\nMotivace pro Python!"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-priste",
    "href": "lessons/lesson_01.html#sec-priste",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "5.2 Co nás čeká příště (Lekce 2)",
    "text": "5.2 Co nás čeká příště (Lekce 2)\n\nPrvní část - IterátoryDruhá část - Model ToolTřetí část - Vnořené modely\n\n\n\nITERÁTORY v Model Builderu\nIterate Field Values - procházení různých vzdáleností\nAutomatické opakování\nProblém: 4 samostatné tabulky - jak spojit?\n\n\n\n\nZ modelu vytvoříme nástroj s GUI\nParametry: uživatel si vybere vzdálenost\nNástroj můžete sdílet s kolegy\nPoužití v dalších modelech\n\n\n\n\nModel volá jiný model\nZpůsob, jak obejít “max 1 iterátor”\nUkáže limity Model Builderu\nMotivace pro Python vnořené cykly"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-pojmy",
    "href": "lessons/lesson_01.html#sec-pojmy",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "5.3 Klíčové pojmy",
    "text": "5.3 Klíčové pojmy\n\n\n\nTable 3: Klíčové pojmy z lekce\n\n\n\n\n\nPojem\nVýznam\n\n\n\n\nAutomatizace\nOpakované spouštění úloh bez lidského zásahu\n\n\nModel Builder\nNástroj pro vizuální tvorbu workflow\n\n\nWorkflow\nPosloupnost kroků vedoucí k výsledku\n\n\nIterator\nMechanismus pro automatické opakování (příště)\n\n\nArcPy\nPython knihovna pro ArcGIS\n\n\nZonální statistika\nVýpočet statistik v definovaných zónách\n\n\nBinární rastr\nRastr s hodnotami 0/1 (ano/ne)\n\n\nDissolve\nSpojení více prvků do jednoho"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol",
    "href": "lessons/lesson_01.html#sec-ukol",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "5.4 Domácí úkol (volitelný)",
    "text": "5.4 Domácí úkol (volitelný)\nProcvičte si látku pomocě volitelných úkolů níže.\n\n\n\n\n\n\nTipDoporučení\n\n\n\n\nZačněte Úkolem 1 (lehký) - určitě zvládnete!\nPokud vás to baví, zkuste Úkol 2 nebo 3\nÚkol 4 je pro prozkoumání Python kódu\nÚkol 5 (BONUS) je záměrně velmi těžký - ukáže vám limity MB"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol1",
    "href": "lessons/lesson_01.html#sec-ukol1",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "6.1 Úkol 1: Změna parametrů modelu ⭐",
    "text": "6.1 Úkol 1: Změna parametrů modelu ⭐\n\n\n\n\n\n\nNoteObtížnost: Lehká\n\n\n\nCíl: Naučit se měnit parametry v modelu a vidět, jak to ovlivní výsledky.\n\n\nZadání:\nUpravte svůj model tak, aby analyzoval pásmo 300 metrů (místo 500m) kolem železnic v okrese Jindřichův Hradec.\nOčekávaný výsledek:\n\nUpravený model s bufferem 300m\nNová výsledná tabulka\nPorovnání: je procento lesů v pásmu 300m vyšší nebo nižší než v 500m? Proč?\n\n\n\n\n\n\n\nTipPostup\n\n\n\n\n\n\nOtevřete svůj model Analyza_Lesu_v_Pasmu\nDvojklik na nástroj Buffer\nZměňte Distance: 500 Meters → 300 Meters\nZměňte název výstupu: buffer_500m → buffer_300m\nZměňte název výsledné tabulky: vysledek_lesy.dbf → vysledek_lesy_300m.dbf\nUložte a spusťte model\nPorovnejte výsledky (MEAN hodnoty)\n\n\n\n\nOtázky k zamyšlení:\n\nJe procento lesů v užším pásmu (300m) jiné než v širším (500m)?\nJak byste to vysvětlili? (Nápověda: rozmístění lesů vs. železnic)\n\n\n\n\n\n\n\nTipBonus\n\n\n\n\n\nVytvořte tabulku v Excelu s porovnáním:\n\n\n\nVzdálenost\nProcento lesů\n\n\n\n\n300m\nX.X%\n\n\n500m\nY.Y%\n\n\n\nVytvořte graf závislosti procenta lesů na vzdálenosti od železnic."
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol2",
    "href": "lessons/lesson_01.html#sec-ukol2",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "6.2 Úkol 2: Jiný okres ⭐⭐",
    "text": "6.2 Úkol 2: Jiný okres ⭐⭐\n\n\n\n\n\n\nNoteObtížnost: Střední\n\n\n\nCíl: Pochopit, jak změnit atributový dotaz v modelu.\n\n\nZadání:\nUpravte model tak, aby analyzoval okres Praha-východ (místo Jindřichův Hradec).\nOčekávaný výsledek:\n\nModel fungující pro okres Praha-východ\nVýsledná tabulka s procentem lesů\nPorovnání: má Praha-východ více nebo méně lesů v pásmech kolem železnic než JH?\n\n\n\n\n\n\n\nTipPostup\n\n\n\n\n\n\nNejdřív zjistěte přesný název okresu:\n\nOtevřete atributovou tabulku vrstvy okresy\nNajděte pole NAZ_LAU1\nNajděte řádek s Prahou-východ (může být “Praha-východ” nebo “Praha - východ”)\n\nV modelu: dvojklik na Make Feature Layer\nZměňte Expression:\nNAZ_LAU1 = 'Praha-východ'\n(Pozor na přesný zápis!)\nZměňte názvy výstupů, aby bylo jasné, že jde o jiný okres\nSpusťte model\n\n\n\n\n\n\n\n\n\n\nWarningNápověda\n\n\n\n\n\n\nPokud model hlásí “0 features selected”, zkontrolujte přesný název okresu v datech\nMůže být potřeba použít LIKE místo =:\nNAZ_LAU1 LIKE '%Praha%východ%'\n\n\n\n\n\n\n\n\n\n\nTipBonus\n\n\n\n\n\nVytvořte srovnávací tabulku pro 3-5 různých okresů:\n\n\n\nOkres\nProcento lesů\n\n\n\n\nJindřichův Hradec\n35.4%\n\n\nPraha-východ\n?\n\n\nPrachatice\n?\n\n\n…\n…\n\n\n\nKterý okres má nejvíce lesů kolem železnic?"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol3",
    "href": "lessons/lesson_01.html#sec-ukol3",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "6.3 Úkol 3: Jiný typ krajinného pokryvu ⭐⭐",
    "text": "6.3 Úkol 3: Jiný typ krajinného pokryvu ⭐⭐\n\n\n\n\n\n\nNoteObtížnost: Střední\n\n\n\nCíl: Naučit se analyzovat různé kategorie dat změnou jednoho parametru.\n\n\nZadání:\nAnalyzujte zastoupení zemědělské půdy (CLC kód 2) místo lesů v pásmu 500m kolem železnic v okrese JH.\nOčekávaný výsledek:\n\nModel analyzující zemědělskou půdu\nPorovnání: je v pásmu více lesů nebo zemědělské půdy?\n\n\n\n\n\n\n\nTipPostup\n\n\n\n\n\n\nV modelu: dvojklik na nástroj Equal To\nZměňte Input value: 3 → 2\nZměňte názvy výstupů:\n\nlesy_binarni → zempuda_binarni\nvysledek_lesy.dbf → vysledek_zempuda.dbf\n\nSpusťte model\n\n\n\n\n\n\n\n\n\n\nTipRozšíření\n\n\n\n\n\nVytvořte tabulku se všemi typy krajinného pokryvu:\n\n\n\nCLC kód\nTyp\nProcento\n\n\n\n\n1\nUrbanizované plochy\n?\n\n\n2\nZemědělská půda\n?\n\n\n3\nLesy\n35.4%\n\n\n4\nMokřady\n?\n\n\n5\nVodní plochy\n?\n\n\n\n(Musíte spustit model 5× s různými kódy)\n\n\n\n\n\n\n\n\n\nImportantOtázka k zamyšlení\n\n\n\nJe tento postup efektivní? Co kdybyste chtěli 10 kategorií? 50?\nOdpověď: Proto se naučíme iterátory (příště) a Python (za měsíc)!"
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol4",
    "href": "lessons/lesson_01.html#sec-ukol4",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "6.4 Úkol 4: Export a zkoumání Python kódu ⭐",
    "text": "6.4 Úkol 4: Export a zkoumání Python kódu ⭐\n\n\n\n\n\n\nNoteObtížnost: Lehká\n\n\n\nCíl: Seznámit se s Python syntaxí na vašem vlastním modelu.\n\n\nZadání:\nExportujte váš model do Pythonu a prozkoumejte kód.\n\n\n\n\n\n\nTipPostup\n\n\n\n\n\n\nV Model Builderu: Model → Export → To Python Script\nUložte jako muj_model.py\nOtevřete v textovém editoru (Notepad++, VS Code, nebo Poznámkový blok)\n\n\n\n\nÚkoly v kódu:\n\nA) NajděteB) ExperimentujteC) Přemýšlejte\n\n\nNajděte a zvýrazněte:\n\nŘádek s importem arcpy\nŘádek, kde se vytváří buffer 500m\nŘádek s SQL dotazem pro okres\nŘádek s hodnotou pro lesy (3)\n\n\n\nExperimentujte (bez spouštění!):\n\nZkuste změnit \"500 Meters\" na \"1000 Meters\" - na kterém řádku?\nNajděte místo, kde byste změnili okres na jiný\nKolik řádků by bylo potřeba změnit, abyste změnili vzdálenost? A v modelu?\n\n\n\nPřemýšlejte:\n\nJe kód čitelný? Rozumíte alespoň trochu, co dělá?\nKteré části jsou jasné, které ne?\nVidíte výhody textové podoby vs. grafické?\nJak by se v Pythonu řešilo 4 různé vzdálenosti?\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nPoznámka: Kód zatím nespouštějte - to se naučíme příště. Teď jen pozorujte strukturu."
  },
  {
    "objectID": "lessons/lesson_01.html#sec-ukol5",
    "href": "lessons/lesson_01.html#sec-ukol5",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "6.5 Úkol 5 (BONUS): Čtyři vzdálenosti - ukázka problému ⭐⭐⭐",
    "text": "6.5 Úkol 5 (BONUS): Čtyři vzdálenosti - ukázka problému ⭐⭐⭐\n\n\n\n\n\n\nWarningObtížnost: Velmi těžká\n\n\n\nVAROVÁNÍ: Tento úkol je záměrně obtížný! Jeho cílem je ukázat vám problém, který v příští lekci vyřešíme iterátorem, a za měsíc elegantně v Pythonu.\nNebojte se, pokud se vám to nepodaří - právě proto se učíme Python! 😊\n\n\nZadání:\nSpočítejte procento lesů pro 4 různé vzdálenosti: 100m, 300m, 500m, 1000m\nOčekávaný výsledek:\nTabulka (v Excelu nebo jako poznámky):\n\n\n\nVzdálenost\nProcento lesů\n\n\n\n\n100m\n?\n\n\n300m\n?\n\n\n500m\n35.4%\n\n\n1000m\n?\n\n\n\n\nPřístup A (manuální)Přístup B (preview iterátoru)\n\n\nPřístup A (nejjednodušší, ale nudný):\n\nSpusťte model s 100m → zapište výsledek\nZměňte na 300m, spusťte → zapište výsledek\nZměňte na 500m, spusťte → zapište výsledek (už máte)\nZměňte na 1000m, spusťte → zapište výsledek\n\nMěřte čas: Kolik celkem trvalo všech 4 spuštění?\n\n\nPřístup B (pokročilý - preview na příští týden):\nPokud se chcete pokusit o iterátor již nyní:\n\nVytvořte v Excelu nebo jako DBF tabulku se vzdálenostmi:\nDistance\n100\n300\n500\n1000\nPřidejte do modelu Iterate Field Values\nZkuste propojit s bufferem…\n\nPoznámka: Pravděpodobně narazíte na problémy! To je v pořádku - příští týden to společně vyřešíme.\n\n\n\n\n6.5.1 Reflexe (důležitější než řešení!)\nPo dokončení napište:\n\nKolik času vám to zabralo?\nKolik chyb jste udělali? (zapomenuté změny parametru, špatné názvy…)\nJak byste se cítili, kdyby zadání bylo 20 vzdáleností?\nVidíte potřebu automatizace?\n\n\n\n\n\n\n\nImportantUkázka Python řešení (jen se podívejte)\n\n\n\n\n\n# V Pythonu by to vypadalo takto (nemusíte rozumět detailům):\n\nvzdalenosti = [100, 300, 500, 1000]\nvysledky = []\n\nfor vzd in vzdalenosti:\n    # Buffer\n    buffer = arcpy.Buffer_analysis(\n        dalnice_clip, \n        f\"buffer_{vzd}m\",\n        f\"{vzd} Meters\",\n        dissolve_option=\"ALL\"\n    )\n    \n    # Equal To\n    binary = arcpy.sa.EqualTo(clc_2018, 3)\n    \n    # Zonal Statistics\n    stats = arcpy.sa.ZonalStatisticsAsTable(\n        buffer, \"OBJECTID\", binary,\n        f\"stats_{vzd}.dbf\", statistics_type=\"MEAN\"\n    )\n    \n    # Přečíst výsledek\n    with arcpy.da.SearchCursor(stats, [\"MEAN\"]) as cursor:\n        mean_value = next(cursor)[0]\n    \n    # Uložit\n    vysledky.append({\n        'Vzdalenost': vzd,\n        'Procento': mean_value * 100\n    })\n\n# Vytvoř jednu tabulku se všemi výsledky\nimport pandas as pd\ndf = pd.DataFrame(vysledky)\ndf.to_csv('vysledky_vsechny.csv')\n\nprint(\"Hotovo! Všechny 4 vzdálenosti zpracovány.\")\nprint(df)\nVýstup:\n   Vzdalenost  Procento\n0         100     42.3\n1         300     38.1\n2         500     35.4\n3        1000     31.2\n\nHotovo! Všechny 4 vzdálenosti zpracovány.\nPonaučení: Vidíte, proč se učíme Python? 😊"
  },
  {
    "objectID": "lessons/lesson_01.html#dokumentace",
    "href": "lessons/lesson_01.html#dokumentace",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "7.1 Dokumentace",
    "text": "7.1 Dokumentace\n\n\n\n\n\n\nTipArcGIS Pro\n\n\n\n\nModel Builder dokumentace\nGeoprocessing nástroje\nIterators in ModelBuilder\n\n\n\n\n\n\n\n\n\nTipArcPy (Python)\n\n\n\n\nArcPy dokumentace\nArcPy Get Started"
  },
  {
    "objectID": "lessons/lesson_01.html#corine-land-cover",
    "href": "lessons/lesson_01.html#corine-land-cover",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "7.2 Corine Land Cover",
    "text": "7.2 Corine Land Cover\n\nCorine Land Cover - dokumentace\nCLC Nomenclature"
  },
  {
    "objectID": "lessons/lesson_01.html#tipy-na-další-studium",
    "href": "lessons/lesson_01.html#tipy-na-další-studium",
    "title": "Lekce 1: Úvod do automatizace GIS pomocí Model Builderu",
    "section": "7.3 Tipy na další studium",
    "text": "7.3 Tipy na další studium\n\nProcvičujte: Čím víc modelů vytvoříte, tím lépe pochopíte workflow\nExperimentujte: Zkuste různé nástroje a parametry\nDokumentujte: Pište si poznámky k modelům (Description v properties)\nPřipravte se na iterátory: Přemýšlejte, co by se dalo automatizovat\nSledujte Python kód: I když mu ještě nerozumíte, zvykejte si na syntax"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programování pro GIS a DPZ",
    "section": "",
    "text": "Programování pro GIS a DPZ\nZde naleznete materiály k předmětu Programování pro GIS a DPZ, vyučovaným na Fakultě životního prostředí ČZU v Praze. Obsahem předmětu jsou pokročilé metody ovládání funkcionality programu ArcGIS: Model Builder, ale především psaní skriptů v programovacím jazyce Python. Nepředpokládá se žádná předchozí znalost programování (i když je jistě výhodou), naopak součástí kurzu je úvod do programování v Pythonu."
  },
  {
    "objectID": "lessons/lesson_03.html",
    "href": "lessons/lesson_03.html",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "",
    "text": "Po absolvování této lekce budete umět:\n\nVysvětlit, co je Python a proč se používá v GIS\nSpustit první Python program\nPracovat se základními datovými typy (čísla, text)\nPoužívat proměnné pro ukládání dat\nKomunikovat s uživatelem pomocí print() a input()\nPracovat se seznamy (vytvoření, indexování, přidávání prvků)\n\nČasová dotace: 90 minut"
  },
  {
    "objectID": "lessons/lesson_03.html#úrovně-programovacích-jazyků",
    "href": "lessons/lesson_03.html#úrovně-programovacích-jazyků",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "2.1 Úrovně programovacích jazyků",
    "text": "2.1 Úrovně programovacích jazyků\nPočítač rozumí pouze binárním instrukcím (0 a 1). Programovací jazyky se liší tím, jak blízko jsou lidskému myšlení nebo hardwaru.\n\n2.1.1 Nízkoúrovňové jazyky (blízko hardwaru)\nStrojový kód: - Binární instrukce (01001011 10110100…) - Přímo vykonává procesor - Téměř nečitelné pro člověka\nAssembly: - Nejnižší “lidsky čitelný” jazyk - Každá instrukce = jedna operace procesoru - Zkratky: MOV, ADD, JMP\nMOV AX, 5      ; Ulož 5 do paměti\nADD AX, 3      ; Přičti 3\nKdy se používá: Ovladače hardwaru, jádro operačního systému, kritické části vyžadující maximální rychlost.\n\n\n2.1.2 Vysokoúrovňové jazyky (blízko lidskému myšlení)\nVlastnosti: - Čitelný kód (if, for, print()) - Abstrakce - nemusíte řešit detaily hardwaru - Přenositelnost - stejný kód na různých platformách - Rychlejší vývoj, méně chyb\nPříklady: Python, Java, C++, R, JavaScript\nSrovnání Assembly vs. Python:\n; Assembly\nMOV AX, 5\nADD AX, 3\n# Python\nvysledek = 5 + 3\n\n\n2.1.3 Kde je Python?\nPython patří mezi vysokoúrovňové jazyky - hodně abstraktní a čitelný. Snadno se učí, ale je pomalejší než C++.\nHierarchie:\nStrojový kód (0101...)\n       ↓\nAssembly (MOV, ADD...)\n       ↓\nC, C++\n       ↓\nPython, Java"
  },
  {
    "objectID": "lessons/lesson_03.html#interpretovaný-vs.-kompilovaný-jazyk",
    "href": "lessons/lesson_03.html#interpretovaný-vs.-kompilovaný-jazyk",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "2.2 Interpretovaný vs. kompilovaný jazyk",
    "text": "2.2 Interpretovaný vs. kompilovaný jazyk\nPython = interpretovaný jazyk - kód se překládá a vykonává řádek po řádku:\nscript.py → Python interpret → Spuštění\nKompilované jazyky (C, C++) - celý program se nejprve přeloží:\nprogram.c → Kompilátor → strojový kód (.exe) → Spuštění\nVýhody interpretace: - ✅ Napíšete kód a okamžitě ho spustíte - ✅ Snadné ladění - ✅ Přenositelnost\nNevýhody: - ❌ Pomalejší než kompilované jazyky - ❌ Vyžaduje nainstalovaný Python interpret\n\n\n\n\n\n\nTipPro GIS je rychlost dostatečná\n\n\n\nPro většinu GIS úloh je rychlost Pythonu více než dostatečná. Co ušetříte na času psaní kódu mnohonásobně převýší ztrátu rychlosti běhu."
  },
  {
    "objectID": "lessons/lesson_03.html#proč-python-pro-gis",
    "href": "lessons/lesson_03.html#proč-python-pro-gis",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "2.3 Proč Python pro GIS?",
    "text": "2.3 Proč Python pro GIS?\n\nJednoduchý - zvládne ho úplný začátečník bez zkušeností s programováním\nVýkonný - objektově orientovaný jazyk pro krátké skripty i rozsáhlé programy\nMultiplatformní - funguje stejně ve Windows, Linuxu i macOS\nPopulární - rozsáhlá dokumentace, výukové materiály, fóra, obrovské množství knihoven\nOpen source a zdarma\nBohaté GIS knihovny - vektorové a rastrové analýzy, tvorba map, publikace na webu\nVýlučný skriptovací jazyk v ArcGIS Pro pro automatizaci GIS operací"
  },
  {
    "objectID": "lessons/lesson_03.html#způsob-1-interaktivní-režim",
    "href": "lessons/lesson_03.html#způsob-1-interaktivní-režim",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "3.1 Způsob 1: Interaktivní režim",
    "text": "3.1 Způsob 1: Interaktivní režim\n\nOtevřete Command Prompt (Windows) nebo Terminal (Mac/Linux)\nNapište python a stiskněte Enter\nUvidíte něco jako:\n\nPython 3.9.11 (...)\n&gt;&gt;&gt; \n\nNapište:\n\n&gt;&gt;&gt; print(\"Hello World\")\n\nStiskněte Enter\n\nVýsledek:\nHello World\n\n\n\n\n\n\nTipInteraktivní režim\n\n\n\nTento režim je skvělý pro rychlé testování kódu. Každý příkaz se provede okamžitě po stisku Enter. Pro ukončení napište exit() nebo stiskněte Ctrl+Z (Windows) / Ctrl+D (Mac/Linux)."
  },
  {
    "objectID": "lessons/lesson_03.html#způsob-2-python-skript",
    "href": "lessons/lesson_03.html#způsob-2-python-skript",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "3.2 Způsob 2: Python skript",
    "text": "3.2 Způsob 2: Python skript\n\nOtevřete textový editor (Notepad, VS Code, Notepad++)\nNapište:\n\nprint(\"Hello World\")\n\nUložte jako hello.py (důležité je přípona .py)\nV příkazové řádce (v adresáři se souborem) spusťte:\n\npython hello.py\nVýsledek:\nHello World\n\n\n\n\n\n\nTipPython skripty\n\n\n\nSoubory s příponou .py jsou Python skripty. Výhoda oproti interaktivnímu režimu:\n\nKód můžete uložit a znovu použít\nMůžete psát delší programy\nSnadno se sdílí s kolegy\n\n\n\n\n\n\n\n\n\nNoteJupyter Notebook v ArcGIS Pro\n\n\n\nPozději v kurzu budeme používat Jupyter Notebook, který je integrovaný v ArcGIS Pro. Otevřete ho přes: Insert → New Notebook\nVýhoda: Kombinuje kód, výsledky a text v jednom dokumentu. Ideální pro analýzy a experimenty s ArcPy.\n\n\n\n\n\n\n\n\nTipVirtuální prostředí (pro pokročilé)\n\n\n\nArcGIS Pro má vlastní conda prostředí s nainstalovaným Pythonem a ArcPy. Zatím se o to nemusíte starat - vše je připravené. Pokud budete později pracovat s Pythonem mimo ArcGIS, vrátíme se k tématu virtuálních prostředí.\n\n\n\n\n\n\n\n\nImportantFunkce print()\n\n\n\nprint() je základní funkce pro výpis textu na obrazovku. Používá se pro:\n\nZobrazení výsledků\nLadění programu (debugging)\nKomunikaci s uživatelem"
  },
  {
    "objectID": "lessons/lesson_03.html#co-je-proměnná",
    "href": "lessons/lesson_03.html#co-je-proměnná",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "4.1 Co je proměnná?",
    "text": "4.1 Co je proměnná?\nProměnná je pojmenované místo v paměti, kde ukládáme data.\njmeno = \"Jan\"\nvek = 25\n\njmeno je proměnná, která obsahuje text \"Jan\"\nvek je proměnná, která obsahuje číslo 25"
  },
  {
    "objectID": "lessons/lesson_03.html#základní-datové-typy",
    "href": "lessons/lesson_03.html#základní-datové-typy",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "4.2 Základní datové typy",
    "text": "4.2 Základní datové typy\n\n4.2.1 Celá čísla (int)\nvek = 25\npocet_bodu = 150\n\n\n4.2.2 Desetinná čísla (float)\nprumerna_teplota = 15.7\nnadmorska_vyska = 234.5\n\n\n4.2.3 Text (string nebo str)\njmeno = \"Jan Novák\"\nmesto = 'Praha'  # Fungují jednoduché i dvojité uvozovky\n\n\n4.2.4 Logické hodnoty (bool)\nje_student = True\nje_zamestnanec = False\n\n\n\n\n\n\nWarningPozor na velká písmena!\n\n\n\nV Pythonu záleží na velikosti písmen:\n\nTrue a False - správně (s velkým písmenem)\ntrue a false - CHYBA!\n\n\n\n\n\n\n\n\n\nTipPozor na velká písmena!\n\n\n\nV Pythonu lze přiřadit více hodnot více proměnným jedním příkazem:\na, b = 3, 5\nToho lze využít např. při prohození hodnot mezi dvěma proměnnými:\n# Klasický přístup přes pomocnou proměnnou\nc = a   # zachytí se původní hodnota proměnné a\na = b   # nyní je možné hodnotu proměnné a změnit\nb = c   # původní hodnota proměnné a je uchována v c\ndel c   # volitelně lze pomocnou proměnnou c smazat"
  },
  {
    "objectID": "lessons/lesson_03.html#pojmenování-proměnných",
    "href": "lessons/lesson_03.html#pojmenování-proměnných",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "4.3 Pojmenování proměnných",
    "text": "4.3 Pojmenování proměnných\nPravidla:\n\nZačíná písmenem nebo podtržítkem: jmeno, _temp\nMůže obsahovat písmena, čísla, podtržítka: vek_2, pocet_bodu\nNesmí obsahovat mezery: moje jmeno ❌\nNesmí začínat číslem: 2vek ❌\nJe case-sensitive: Jmeno ≠ jmeno\n\nKonvence (doporučení):\n\nPoužívejte malá písmena s podtržítky: pocet_obyvatel\nVýstižné názvy: teplota je lepší než t"
  },
  {
    "objectID": "lessons/lesson_03.html#základní-operace",
    "href": "lessons/lesson_03.html#základní-operace",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "5.1 Základní operace",
    "text": "5.1 Základní operace\n# Sčítání\n5 + 3  # 8\n\n# Odčítání\n10 - 4  # 6\n\n# Násobení\n3 * 4  # 12\n\n# Dělení (výsledek je vždy float!)\n10 / 3  # 3.3333...\n\n# Celočíselné dělení\n10 // 3  # 3\n\n# Zbytek po dělení (modulo)\n10 % 3  # 1\n\n# Mocnina\n2 ** 3  # 8 (2 na třetí)"
  },
  {
    "objectID": "lessons/lesson_03.html#příklady-s-proměnnými",
    "href": "lessons/lesson_03.html#příklady-s-proměnnými",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "5.2 Příklady s proměnnými",
    "text": "5.2 Příklady s proměnnými\nvyska = 180  # cm\nhmotnost = 75  # kg\n\n# BMI = hmotnost / (vyska v metrech)^2\nvyska_m = vyska / 100\nbmi = hmotnost / (vyska_m ** 2)\n\nprint(bmi)  # 23.148..."
  },
  {
    "objectID": "lessons/lesson_03.html#spojování-stringů",
    "href": "lessons/lesson_03.html#spojování-stringů",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "6.1 Spojování stringů",
    "text": "6.1 Spojování stringů\njmeno = \"Jan\"\nprijmeni = \"Novák\"\n\n# Spojení (concatenation)\ncele_jmeno = jmeno + \" \" + prijmeni\nprint(cele_jmeno)  # Jan Novák"
  },
  {
    "objectID": "lessons/lesson_03.html#f-stringy-doporučený-způsob",
    "href": "lessons/lesson_03.html#f-stringy-doporučený-způsob",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "6.2 f-stringy (doporučený způsob!)",
    "text": "6.2 f-stringy (doporučený způsob!)\nf-stringy jsou nejmodernější a nejčitelnější způsob práce s textem:\njmeno = \"Jan\"\nvek = 25\n\n# Starý způsob (concatenation)\nzprava = \"Jmenuji se \" + jmeno + \" a je mi \" + str(vek) + \" let.\"\n\n# f-string (moderní způsob)\nzprava = f\"Jmenuji se {jmeno} a je mi {vek} let.\"\n\nprint(zprava)\n# Výsledek: Jmenuji se Jan a je mi 25 let.\n\n\n\n\n\n\nTipProč f-stringy?\n\n\n\n\nČitelnější kód\nAutomatická konverze typů\nMůžete vkládat výrazy: f\"BMI: {hmotnost / (vyska ** 2)}\""
  },
  {
    "objectID": "lessons/lesson_03.html#převod-mezi-typy",
    "href": "lessons/lesson_03.html#převod-mezi-typy",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "6.3 Převod mezi typy",
    "text": "6.3 Převod mezi typy\nvek = 25\nvek_text = str(vek)  # \"25\"\n\ncislo_text = \"100\"\ncislo = int(cislo_text)  # 100\n\ndesetinne_cislo_text = \"3.14\"\ndesetinne_cislo = float(desetinne_cislo_text)  # 3.14"
  },
  {
    "objectID": "lessons/lesson_03.html#funkce-input",
    "href": "lessons/lesson_03.html#funkce-input",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "7.1 Funkce input()",
    "text": "7.1 Funkce input()\ninput() slouží k načtení vstupu od uživatele:\njmeno = input(\"Jak se jmenujete? \")\nprint(f\"Zdravím vás, {jmeno}!\")\nPrůběh:\nJak se jmenujete? Jan\nZdravím vás, Jan!\n\n\n\n\n\n\nWarningPozor! input() vrací vždy STRING!\n\n\n\nI když uživatel zadá číslo, input() vrací text:\nvek = input(\"Kolik je vám let? \")  # vek je STRING!\n# Musíme převést:\nvek = int(input(\"Kolik je vám let? \"))  # Teď je to INT"
  },
  {
    "objectID": "lessons/lesson_03.html#praktický-příklad",
    "href": "lessons/lesson_03.html#praktický-příklad",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "7.2 Praktický příklad",
    "text": "7.2 Praktický příklad\n# Kalkulačka BMI\njmeno = input(\"Vaše jméno: \")\nvyska = float(input(\"Výška v cm: \"))\nhmotnost = float(input(\"Hmotnost v kg: \"))\n\nvyska_m = vyska / 100\nbmi = hmotnost / (vyska_m ** 2)\n\nprint(f\"{jmeno}, vaše BMI je: {bmi:.2f}\")\nPříklad běhu:\nVaše jméno: Jan\nVýška v cm: 180\nHmotnost v kg: 75\nJan, vaše BMI je: 23.15"
  },
  {
    "objectID": "lessons/lesson_03.html#co-je-seznam",
    "href": "lessons/lesson_03.html#co-je-seznam",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.1 Co je seznam?",
    "text": "8.1 Co je seznam?\nSeznam je uspořádaná kolekce prvků. Může obsahovat čísla, text, nebo cokoliv jiného:\nteploty = [15, 18, 22, 19, 16]\nmesta = [\"Praha\", \"Brno\", \"Ostrava\"]\nsmiseny = [1, \"text\", 3.14, True]  # Může být i mix!"
  },
  {
    "objectID": "lessons/lesson_03.html#vytvoření-seznamu",
    "href": "lessons/lesson_03.html#vytvoření-seznamu",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.2 Vytvoření seznamu",
    "text": "8.2 Vytvoření seznamu\nprazdny_seznam = []\ncisla = [1, 2, 3, 4, 5]\njmena = [\"Anna\", \"Petr\", \"Jana\"]"
  },
  {
    "objectID": "lessons/lesson_03.html#indexování",
    "href": "lessons/lesson_03.html#indexování",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.3 Indexování",
    "text": "8.3 Indexování\nDŮLEŽITÉ: Python indexuje od 0!\nmesta = [\"Praha\", \"Brno\", \"Ostrava\", \"Plzeň\"]\n\nprint(mesta[0])   # Praha (první prvek!)\nprint(mesta[1])   # Brno (druhý prvek)\nprint(mesta[3])   # Plzeň (čtvrtý prvek)\nprint(mesta[-1])  # Plzeň (poslední prvek)\nprint(mesta[-2])  # Ostrava (předposlední)\n\n\n\n\n\n\nWarningPozor na indexování od 0!\n\n\n\nToto je častá chyba začátečníků:\ncisla = [10, 20, 30, 40, 50]\nprint(cisla[1])  # 20, NE 10!\nprint(cisla[5])  # CHYBA! Index mimo rozsah"
  },
  {
    "objectID": "lessons/lesson_03.html#délka-seznamu",
    "href": "lessons/lesson_03.html#délka-seznamu",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.4 Délka seznamu",
    "text": "8.4 Délka seznamu\nmesta = [\"Praha\", \"Brno\", \"Ostrava\"]\npocet = len(mesta)  # 3"
  },
  {
    "objectID": "lessons/lesson_03.html#přidávání-prvků",
    "href": "lessons/lesson_03.html#přidávání-prvků",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.5 Přidávání prvků",
    "text": "8.5 Přidávání prvků\ncisla = [1, 2, 3]\ncisla.append(4)  # Přidá 4 na konec\nprint(cisla)  # [1, 2, 3, 4]\n\ncisla.append(5)\nprint(cisla)  # [1, 2, 3, 4, 5]"
  },
  {
    "objectID": "lessons/lesson_03.html#praktický-příklad-1",
    "href": "lessons/lesson_03.html#praktický-příklad-1",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "8.6 Praktický příklad",
    "text": "8.6 Praktický příklad\n# Program pro sběr teplot\nteploty = []\n\nteploty.append(float(input(\"Teplota v pondělí: \")))\nteploty.append(float(input(\"Teplota v úterý: \")))\nteploty.append(float(input(\"Teplota ve středu: \")))\n\nprint(f\"Naměřené teploty: {teploty}\")\nprint(f\"První den: {teploty[0]}°C\")\nprint(f\"Poslední den: {teploty[-1]}°C\")"
  },
  {
    "objectID": "lessons/lesson_03.html#cvičení-1-kalkulačka-vzdálenosti",
    "href": "lessons/lesson_03.html#cvičení-1-kalkulačka-vzdálenosti",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "9.1 Cvičení 1: Kalkulačka vzdálenosti",
    "text": "9.1 Cvičení 1: Kalkulačka vzdálenosti\nNapište program, který:\n\nZeptá se uživatele na souřadnice dvou bodů (X1, Y1, X2, Y2)\nVypočítá vzdálenost mezi nimi pomocí Pythagorovy věty: \\(d = \\sqrt{(X_2-X_1)^2 + (Y_2-Y_1)^2}\\)\nVypíše výsledek\n\nNápověda:\n# Odmocninu získáte pomocí mocniny 0.5:\nodmocnina = cislo ** 0.5"
  },
  {
    "objectID": "lessons/lesson_03.html#cvičení-2-průměrná-teplota",
    "href": "lessons/lesson_03.html#cvičení-2-průměrná-teplota",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "9.2 Cvičení 2: Průměrná teplota",
    "text": "9.2 Cvičení 2: Průměrná teplota\nNapište program, který:\n\nVytvoří prázdný seznam\nZeptá se uživatele na teploty pro 5 dní (použijte append())\nVypočítá průměrnou teplotu: prumer = sum(seznam) / len(seznam)\nVypíše výsledek ve formátu: “Průměrná teplota byla: XX.X°C”"
  },
  {
    "objectID": "lessons/lesson_03.html#cvičení-3-seznam-měst",
    "href": "lessons/lesson_03.html#cvičení-3-seznam-měst",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "9.3 Cvičení 3: Seznam měst",
    "text": "9.3 Cvičení 3: Seznam měst\nNapište program, který:\n\nVytvoří seznam 3 českých měst\nVypíše první město\nVypíše poslední město\nPřidá 2 další města pomocí append()\nVypíše celý seznam\nVypíše počet měst v seznamu"
  },
  {
    "objectID": "lessons/lesson_03.html#co-jsme-se-naučili",
    "href": "lessons/lesson_03.html#co-jsme-se-naučili",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "10.1 Co jsme se naučili",
    "text": "10.1 Co jsme se naučili\n✅ Python je interpretovaný jazyk vhodný pro GIS\n✅ print() pro výpis, input() pro načtení vstupu\n✅ Základní datové typy: int, float, str, bool\n✅ Proměnné ukládají data\n✅ f-stringy pro práci s textem\n✅ Seznamy (list) - indexování od 0!\n✅ append() pro přidávání prvků\n✅ len() pro zjištění délky"
  },
  {
    "objectID": "lessons/lesson_03.html#co-bude-příště",
    "href": "lessons/lesson_03.html#co-bude-příště",
    "title": "Lekce 3: Úvod do Pythonu I – První program",
    "section": "10.2 Co bude příště?",
    "text": "10.2 Co bude příště?\nV další lekci se naučíme:\n\nPodmínky (if, elif, else)\nCykly (for, while)\nAlgoritmizace (vyřešit úlohu pomocí kódu)"
  },
  {
    "objectID": "lessons/lesson_05.html",
    "href": "lessons/lesson_05.html",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "",
    "text": "Po absolvování této lekce budete umět:\n\nPracovat s řezy seznamů (slicing)\nPoužívat pokročilé metody seznamů\nImplementovat algoritmus pro hledání minima a maxima\nNavrhnout a implementovat třídící algoritmus (Bubble Sort, Selection Sort)\nPracovat s vnořenými cykly\nPropojit vnořené cykly s vnořenými modely z Model Builderu\n\nČasová dotace: 90 minut"
  },
  {
    "objectID": "lessons/lesson_05.html#rychlá-rekapitulace-z-minula",
    "href": "lessons/lesson_05.html#rychlá-rekapitulace-z-minula",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "2.1 Rychlá rekapitulace z minula",
    "text": "2.1 Rychlá rekapitulace z minula\n# Co už umíme ze seznamů:\ncisla = [1, 2, 3, 4, 5]\n\ncisla[0]           # 1 - první prvek (index 0!)\ncisla[-1]          # 5 - poslední prvek\nlen(cisla)         # 5 - délka seznamu\ncisla.append(6)    # Přidání prvku na konec\ncisla[3] = 2       # změna čtvrtého prvku"
  },
  {
    "objectID": "lessons/lesson_05.html#slicing-řezy---nová-technika",
    "href": "lessons/lesson_05.html#slicing-řezy---nová-technika",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "2.2 Slicing (řezy) - nová technika",
    "text": "2.2 Slicing (řezy) - nová technika\nSlicing umožňuje vybrat část seznamu:\n\n2.2.1 Základní syntaxe: seznam[start:stop]\ncisla = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ncisla[2:5]     # [2, 3, 4] - od indexu 2 do 5 (bez 5!)\ncisla[:3]      # [0, 1, 2] - od začátku do indexu 3\ncisla[7:]      # [7, 8, 9] - od indexu 7 do konce\ncisla[-3:]     # [7, 8, 9] - poslední 3 prvky\n\n\n\n\n\n\nTipZapamatujte si\n\n\n\n\nstart je včetně (from)\nstop je bez (to, but not including)\ncisla[2:5] znamená: “od indexu 2 až po (ale bez) index 5”\n\n\n\n\n\n2.2.2 Slicing s krokem: seznam[start:stop:step]\ncisla = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ncisla[::2]     # [0, 2, 4, 6, 8] - každý druhý\ncisla[1::2]    # [1, 3, 5, 7, 9] - každý druhý, ale od indexu 1\ncisla[::3]     # [0, 3, 6, 9] - každý třetí\ncisla[::-1]    # [9, 8, 7, ..., 0] - OTOČENÍ seznamu!\n\n\n2.2.3 Praktické příklady\ntext = \"Python\"\ntext[::-1]     # \"nohtyP\" - otočený string\n\n# První polovina seznamu\npolovina = len(cisla) // 2\nprvni_cast = cisla[:polovina]\n\n# Druhá polovina\ndruha_cast = cisla[polovina:]"
  },
  {
    "objectID": "lessons/lesson_05.html#užitečné-metody-seznamů",
    "href": "lessons/lesson_05.html#užitečné-metody-seznamů",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "2.3 Užitečné metody seznamů",
    "text": "2.3 Užitečné metody seznamů\n\n2.3.1 extend() - připojení více prvků\na = [1, 2, 3]\na.extend([4, 5, 6])    # [1, 2, 3, 4, 5, 6]\n\n# Alternativně:\na = a + [4, 5, 6]      # Totéž, ale vytvoří nový seznam\n\n\n2.3.2 insert() - vložení na konkrétní pozici\ncisla = [1, 2, 4, 5]\ncisla.insert(2, 3)     # [1, 2, 3, 4, 5] - vložit 3 na index 2\n\n\n2.3.3 remove() - odstranění prvního výskytu hodnoty\ncisla = [1, 2, 3, 2, 4]\ncisla.remove(2)        # [1, 3, 2, 4] - odstraní první výskyt 2\n\n\n2.3.4 index() - vrací index prvního výskytu hodnoty\ncisla = [1, 2, 3, 2, 4]\ncisla.index(2)        # vrací 1\n\n\n2.3.5 pop() - odstranění a vrácení prvku\ncisla = [1, 2, 3, 4, 5]\nposledni = cisla.pop()     # posledni = 5, cisla = [1,2,3,4]\ndruhy = cisla.pop(1)       # druhy = 2, cisla = [1,3,4]\n\n\n2.3.6 reverse() - otočení seznamu\ncisla = [1, 2, 3, 4, 5]\ncisla.reverse()        # [5, 4, 3, 2, 1] - mění původní seznam!\n\n# Alternativně (vytvoří nový):\notoceny = cisla[::-1]\n\n\n2.3.7 sort() - seřazení\ncisla = [5, 2, 8, 1, 9]\ncisla.sort()           # [1, 2, 5, 8, 9] - vzestupně\n\ncisla.sort(reverse=True)  # [9, 8, 5, 2, 1] - sestupně\n\n# Alternativně (vytvoří nový):\nserazeny = sorted(cisla)"
  },
  {
    "objectID": "lessons/lesson_05.html#cvičení-1-práce-se-seznamem",
    "href": "lessons/lesson_05.html#cvičení-1-práce-se-seznamem",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "2.4 Cvičení 1: Práce se seznamem",
    "text": "2.4 Cvičení 1: Práce se seznamem\ncisla = [10, 25, 3, 47, 8, 19, 33, 5]\n\n# 1. Vypište první tři čísla\n# 2. Vypište poslední dvě čísla\n# 3. Vypište každé druhé číslo\n# 4. Otočte seznam a vypište ho\n# 5. Seřaďte seznam vzestupně"
  },
  {
    "objectID": "lessons/lesson_05.html#motivace",
    "href": "lessons/lesson_05.html#motivace",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "3.1 Motivace",
    "text": "3.1 Motivace\nÚkol: Máte seznam čísel [5, 2, 8, 1, 9, 3]. Najděte nejmenší číslo.\nOtázka pro studenty: Jak byste to udělali ručně?\nVětšina řekne: “Projdu všechna čísla a pamatuji si, jaké bylo dosud nejmenší.”"
  },
  {
    "objectID": "lessons/lesson_05.html#algoritmus-krok-za-krokem",
    "href": "lessons/lesson_05.html#algoritmus-krok-za-krokem",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "3.2 Algoritmus krok za krokem",
    "text": "3.2 Algoritmus krok za krokem\nSeznam: [5, 2, 8, 1, 9, 3]\n\n1. Začnu, minimum = 5 (první číslo)\n2. Další je 2 → 2 &lt; 5? Ano → nové minimum = 2\n3. Další je 8 → 8 &lt; 2? Ne\n4. Další je 1 → 1 &lt; 2? Ano → nové minimum = 1\n5. Další je 9 → 9 &lt; 1? Ne\n6. Další je 3 → 3 &lt; 1? Ne\n7. Konec → minimum = 1"
  },
  {
    "objectID": "lessons/lesson_05.html#implementace---společně",
    "href": "lessons/lesson_05.html#implementace---společně",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "3.3 Implementace - společně",
    "text": "3.3 Implementace - společně\ncisla = [5, 2, 8, 1, 9, 3]\n\n# Začnu s prvním číslem jako minimem\nminimum = cisla[0]\n\n# Projdu zbytek seznamu\nfor cislo in cisla:\n    if cislo &lt; minimum:\n        minimum = cislo\n\nprint(f\"Nejmenší číslo: {minimum}\")\n# Nejmenší číslo: 1\n\n\n\n\n\n\nNoteProč minimum = cisla[0]?\n\n\n\nMohli bychom začít s velkým číslem (např. minimum = 999999), ale to není elegantní. Lepší je začít s prvním číslem v seznamu - víme, že minimum nemůže být větší než první prvek!"
  },
  {
    "objectID": "lessons/lesson_05.html#maximum---obdobně",
    "href": "lessons/lesson_05.html#maximum---obdobně",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "3.4 Maximum - obdobně",
    "text": "3.4 Maximum - obdobně\ncisla = [5, 2, 8, 1, 9, 3]\nmaximum = cisla[0]\n\nfor cislo in cisla:\n    if cislo &gt; maximum:\n        maximum = cislo\n\nprint(f\"Největší číslo: {maximum}\")\n# Největší číslo: 9"
  },
  {
    "objectID": "lessons/lesson_05.html#hledání-indexu-minima",
    "href": "lessons/lesson_05.html#hledání-indexu-minima",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "3.5 Hledání indexu minima",
    "text": "3.5 Hledání indexu minima\nDůležité pro třídění! Často potřebujeme nejen hodnotu minima, ale i jeho pozici v seznamu.\ncisla = [5, 2, 8, 1, 9, 3]\n\n# Začnu s indexem 0\nmin_index = 0\n\n# Projdu všechny indexy\nfor i in range(len(cisla)):\n    if cisla[i] &lt; cisla[min_index]:\n        min_index = i\n\nprint(f\"Index nejmenšího čísla: {min_index}\")\nprint(f\"Hodnota: {cisla[min_index]}\")\n# Index nejmenšího čísla: 3\n# Hodnota: 1\n\n\n\n\n\n\nImportantProč potřebujeme index?\n\n\n\nPři třídění budeme chtít prohodit pozice prvků. K tomu potřebujeme vědět, kde se minimum nachází!"
  },
  {
    "objectID": "lessons/lesson_05.html#motivace-1",
    "href": "lessons/lesson_05.html#motivace-1",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "4.1 Motivace",
    "text": "4.1 Motivace\nÚkol: Seřaďte seznam [5, 2, 8, 1, 9] vzestupně.\nOtázka: Jak byste to udělali na papíře?\n\n\n\n\n\n\nNoteBrainstorming (5 minut)\n\n\n\nDiskutujte se spolužáky: - Jak byste řadili čísla ručně? - Jaké kroky byste opakovali? - Můžete to popsat slovně?\nVětšina lidí přijde na jeden z těchto přístupů: 1. “Najdu nejmenší, dám ho stranou, opakuji” → Selection Sort 2. “Porovnávám sousedy, když je špatné pořadí, prohodím, opakuji DOKUD prohazuji” → Bubble Sort"
  },
  {
    "objectID": "lessons/lesson_05.html#bubble-sort-bublinové-třídění",
    "href": "lessons/lesson_05.html#bubble-sort-bublinové-třídění",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "4.2 Bubble Sort (bublinové třídění)",
    "text": "4.2 Bubble Sort (bublinové třídění)\n\n4.2.1 Princip\nProcházíme seznam a porovnáváme dvojice sousedních prvků. Pokud jsou ve špatném pořadí, prohodíme je. Opakujeme DOKUD jsme něco prohazovali.\n\n\n4.2.2 Vizualizace na příkladu [5, 2, 8, 1, 9]\nPrvní průchod:\n[5, 2, 8, 1, 9]  → 5 &gt; 2? Ano, prohoď\n[2, 5, 8, 1, 9]  → 5 &gt; 8? Ne\n[2, 5, 8, 1, 9]  → 8 &gt; 1? Ano, prohoď  \n[2, 5, 1, 8, 9]  → 8 &gt; 9? Ne\n[2, 5, 1, 8, 9]  ← Prohodili jsme → pokračujeme!\nDruhý průchod:\n[2, 5, 1, 8, 9]  → 2 &gt; 5? Ne\n[2, 5, 1, 8, 9]  → 5 &gt; 1? Ano, prohoď\n[2, 1, 5, 8, 9]  → 5 &gt; 8? Ne\n[2, 1, 5, 8, 9]  → 8 &gt; 9? Ne\n[2, 1, 5, 8, 9]  ← Prohodili jsme → pokračujeme!\nTřetí průchod:\n[2, 1, 5, 8, 9]  → 2 &gt; 1? Ano, prohoď\n[1, 2, 5, 8, 9]  → 2 &gt; 5? Ne\n[1, 2, 5, 8, 9]  → 5 &gt; 8? Ne\n[1, 2, 5, 8, 9]  → 8 &gt; 9? Ne\n[1, 2, 5, 8, 9]  ← Prohodili jsme → pokračujeme!\nČtvrtý průchod:\n[1, 2, 5, 8, 9]  → 1 &gt; 2? Ne\n[1, 2, 5, 8, 9]  → 2 &gt; 5? Ne\n[1, 2, 5, 8, 9]  → 5 &gt; 8? Ne\n[1, 2, 5, 8, 9]  → 8 &gt; 9? Ne\n[1, 2, 5, 8, 9]  ← Nic se neprohodilo → HOTOVO!\n\n\n4.2.3 Implementace - společně\nseznam = [5, 2, 8, 1, 9]\nprint(f\"Původní seznam: {seznam}\")\n\n# Klíčová myšlenka: \"Opakuj DOKUD prohazuješ\"\nserazeno = False\n\nwhile not serazeno:\n    # Předpokládám, že seznam JE seřazený\n    serazeno = True\n    \n    # Projdu všechny sousední dvojice\n    for i in range(len(seznam) - 1):\n        # Porovnám sousedy\n        if seznam[i] &gt; seznam[i + 1]:\n            # Špatné pořadí → prohození\n            seznam[i], seznam[i + 1] = seznam[i + 1], seznam[i]\n            # Něco jsem prohodil → NENÍ seřazeno!\n            serazeno = False\n\nprint(f\"Seřazený seznam: {seznam}\")\n# [1, 2, 5, 8, 9]\n\n\n\n\n\n\nTipJak to funguje?\n\n\n\n\nserazeno = False: Na začátku předpokládáme, že seznam není seřazený\nwhile not serazeno:: Opakuj, DOKUD není seřazeno\nserazeno = True: Na začátku každého průchodu předpokládám “je seřazeno”\nProjdu všechny dvojice: for i in range(len(seznam) - 1)\nPokud najdu špatné pořadí: Prohodím a nastavím serazeno = False\nPokud projdu celý seznam a nic neprohodím → serazeno zůstane True → cyklus skončí!\n\n\n\n\n\n4.2.4 Alternativní implementace (volitelně)\nPředchozí implementace je intuitivní, protože odráží způsob, jak lidé přirozeně myslí. Ve skutečnosti není úplně efektivní, protože po prvním průchodu máme jistotu, že poslední prvek je již na správném místě. Alternativní implementace pomocí dvou vnořených ‘for’ cyklů toto zohledňuje:\nseznam = [5, 2, 8, 1, 9]\n\n# Vnější cyklus - kolik průchodů potřebujeme?\nfor i in range(len(seznam)):\n    \n    # Vnitřní cyklus - porovnání sousedů\n    for j in range(len(seznam) - 1 - i):\n        \n        # Porovnání a prohození\n        if seznam[j] &gt; seznam[j + 1]:\n            seznam[j], seznam[j + 1] = seznam[j + 1], seznam[j]\n\nprint(seznam)  # [1, 2, 5, 8, 9]\n\n\n\n\n\n\nImportantVnořené cykly!\n\n\n\nVšimněte si dvou cyklů jeden v druhém: - Vnější (for i) říká: “Kolikrát opakuji celý průchod?” - Vnitřní (for j) říká: “Jak procházím dvojice?”\nToto je vnořený cyklus - stejný princip jako vnořené modely v Model Builderu!\n\n\n\n\n4.2.5 Proč len(seznam) - 1 - i?\n# První průchod (i=0): porovnáváme všechny dvojice\nrange(len(seznam) - 1)  # 0,1,2,3\n\n# Druhý průchod (i=1): poslední je už správně, vynecháme\nrange(len(seznam) - 1 - 1)  # 0,1,2\n\n# A tak dále...\n\n\n\n\n\n\nNoteKterá verze je efektivnější?\n\n\n\nZávisí na situaci!\nWhile verze je mnohem rychlejší, když: - Seznam je už seřazený nebo skoro seřazený - Může skončit brzy (best case: jen 1 průchod)\nFor verze je rychlejší, když: - Seznam je úplně zamíchaný nebo opačně seřazený - V nejhorším případě dělá méně porovnání celkem"
  },
  {
    "objectID": "lessons/lesson_05.html#selection-sort-třídění-výběrem",
    "href": "lessons/lesson_05.html#selection-sort-třídění-výběrem",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "4.3 Selection Sort (třídění výběrem)",
    "text": "4.3 Selection Sort (třídění výběrem)\n\n\n\n\n\n\nTipTeď použijeme, co jsme se naučili!\n\n\n\nPamatujete si hledání indexu minima? Přesně to teď použijeme!\n\n\n\n4.3.1 Princip\nMyšlenka: 1. Najdi nejmenší prvek v celém seznamu → dej ho na první místo 2. Najdi nejmenší prvek ve zbytku seznamu → dej ho na druhé místo 3. Opakuj…\nVyužíváme: Algoritmus pro hledání indexu minima, který jsme právě napsali!\n\n\n4.3.2 Vizualizace krok za krokem\nPůvodní seznam: [5, 2, 8, 1, 9, 3]\n\nKrok 1: Najdi minimum v [5, 2, 8, 1, 9, 3]\n        → minimum je 1 (index 3)\n        → prohoď 5 ↔ 1\n        [1, 2, 8, 5, 9, 3]\n         ^ vyřešeno\n\nKrok 2: Najdi minimum v [2, 8, 5, 9, 3]\n        → minimum je 2 (index 1)\n        → už je na správném místě\n        [1, 2, 8, 5, 9, 3]\n            ^ vyřešeno\n\nKrok 3: Najdi minimum v [8, 5, 9, 3]\n        → minimum je 3 (index 5)\n        → prohoď 8 ↔ 3\n        [1, 2, 3, 5, 9, 8]\n               ^ vyřešeno\n\nKrok 4: Najdi minimum v [5, 9, 8]\n        → minimum je 5 (index 3)\n        → už je správně\n        [1, 2, 3, 5, 9, 8]\n                  ^ vyřešeno\n\nKrok 5: Najdi minimum v [9, 8]\n        → minimum je 8 (index 5)\n        → prohoď 9 ↔ 8\n        [1, 2, 3, 5, 8, 9]\n                     ^ vyřešeno\n\nHotovo!\n\n\n4.3.3 Implementace - společně\nseznam = [5, 2, 8, 1, 9, 3]\n\n# Pro každou pozici 0, 1, 2, ...\nfor i in range(len(seznam)):\n    # Najdi index minima ve zbytku seznamu\n    # (od pozice i do konce)\n    # ↓↓↓ TOHLE JSME DĚLALI PŘED CHVÍLÍ! ↓↓↓\n    min_index = i\n    \n    for j in range(i + 1, len(seznam)):\n        if seznam[j] &lt; seznam[min_index]:\n            min_index = j\n    # ↑↑↑ ALGORITMUS PRO HLEDÁNÍ INDEXU MINIMA ↑↑↑\n    \n    # Prohoď aktuální prvek s nalezeným minimem\n    seznam[i], seznam[min_index] = seznam[min_index], seznam[i]\n\nprint(seznam)  # [1, 2, 3, 5, 8, 9]\n\n\n\n\n\n\nImportantVšimněte si!\n\n\n\nVnitřní cyklus je přesně algoritmus pro hledání indexu minima, který jsme dělali před chvílí!\nSelection Sort = opakované použití algoritmu pro hledání minima! 🎯\n\n\n\n\n\n\n\n\nTipPro praxi\n\n\n\nV reálných programech používáme vestavěnou funkci sort() nebo sorted(), která je mnohem rychlejší:\nseznam = [5, 2, 8, 1, 9]\n\n# Způsob 1: sort() - upraví původní seznam\nseznam.sort()\nprint(seznam)  # [1, 2, 5, 8, 9]\n\n# Způsob 2: sorted() - vrátí nový seznam\npuvodni = [5, 2, 8, 1, 9]\nserazeny = sorted(puvodni)\nprint(puvodni)   # [5, 2, 8, 1, 9] - nezměněn\nprint(serazeny)  # [1, 2, 5, 8, 9]\nProč jsme pak psali vlastní algoritmus? - Rozvoj algoritmického myšlení - Pochopení, jak počítače fungují uvnitř - Příprava na složitější problémy (v GIS budete řešit vlastní algoritmy!) - Pochopení vnořených cyklů"
  },
  {
    "objectID": "lessons/lesson_05.html#co-jsou-vnořené-cykly",
    "href": "lessons/lesson_05.html#co-jsou-vnořené-cykly",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "5.1 Co jsou vnořené cykly?",
    "text": "5.1 Co jsou vnořené cykly?\nVnořený cyklus = cyklus uvnitř jiného cyklu.\nfor i in range(3):\n    for j in range(2):\n        print(f\"i={i}, j={j}\")\nVýstup:\ni=0, j=0\ni=0, j=1\ni=1, j=0\ni=1, j=1\ni=2, j=0\ni=2, j=1\nJak to funguje: - Pro každou hodnotu i (vnější cyklus) - Projdeme všechny hodnoty j (vnitřní cyklus)"
  },
  {
    "objectID": "lessons/lesson_05.html#praktický-příklad-tabulka-násobení",
    "href": "lessons/lesson_05.html#praktický-příklad-tabulka-násobení",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "5.2 Praktický příklad: Tabulka násobení",
    "text": "5.2 Praktický příklad: Tabulka násobení\n# Tabulka násobení 1-5\nfor i in range(1, 6):\n    for j in range(1, 6):\n        print(f\"{i} × {j} = {i * j}\")\n    print(\"---\")  # Oddělovač"
  },
  {
    "objectID": "lessons/lesson_05.html#propojení-s-model-builderem",
    "href": "lessons/lesson_05.html#propojení-s-model-builderem",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "5.3 Propojení s Model Builderem",
    "text": "5.3 Propojení s Model Builderem\n\n\n\n\n\n\nNoteVzpomínáte na vnořené modely?\n\n\n\nV Model Builderu jste používali vnořené iterátory: - Vnější iterator: Pro každý okres - Vnitřní iterator: Pro každý rok\n- → Zpracovat data pro každý okres v každém roce\nV Pythonu je to stejné, jen místo Model Builderu píšete kód!\n\n\n\n5.3.1 Příklad: GIS úloha\nokresy = [\"Praha\", \"Brno\", \"Ostrava\"]\nroky = [2020, 2021, 2022]\n\nfor okres in okresy:\n    for rok in roky:\n        print(f\"Zpracovávám: {okres}, {rok}\")\n        # Zde by byl ArcPy kód pro zpracování dat\nVýstup:\nZpracovávám: Praha, 2020\nZpracovávám: Praha, 2021\nZpracovávám: Praha, 2022\nZpracovávám: Brno, 2020\nZpracovávám: Brno, 2021\nZpracovávám: Brno, 2022\nZpracovávám: Ostrava, 2020\nZpracovávám: Ostrava, 2021\nZpracovávám: Ostrava, 2022\nVypadá vám to povědomě? Přesně toto jste dělali v Model Builderu graficky. V Pythonu to napíšete přímo!"
  },
  {
    "objectID": "lessons/lesson_05.html#co-jsme-se-naučili",
    "href": "lessons/lesson_05.html#co-jsme-se-naučili",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "6.1 Co jsme se naučili",
    "text": "6.1 Co jsme se naučili\n✅ Slicing - řezy seznamů (seznam[start:stop:step])\n✅ Metody seznamů - extend(), insert(), remove(), pop(), reverse(), sort()\n✅ Hledání minima/maxima - algoritmus pro hledání nejmenší/největší hodnoty\n✅ Index minima - klíčové pro třídění!\n✅ Bubble Sort - třídění porovnáváním sousedů (while verze)\n✅ Selection Sort - třídění výběrem minima\n✅ Vnořené cykly - cyklus v cyklu\n✅ Propojení s Model Builderem - vnořené cykly = vnořené iterátory"
  },
  {
    "objectID": "lessons/lesson_05.html#co-bude-příště",
    "href": "lessons/lesson_05.html#co-bude-příště",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "6.2 Co bude příště?",
    "text": "6.2 Co bude příště?\nV příští lekci:\n\nFunkce - jak psát znovupoužitelný kód\nModuly - jak organizovat program\nPřepíšeme Fibonacci, faktoriál a třídění jako funkce\nVytvoříme vlastní modul math_utils.py"
  },
  {
    "objectID": "lessons/lesson_05.html#varianta-a-základní",
    "href": "lessons/lesson_05.html#varianta-a-základní",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "7.1 Varianta A (základní)",
    "text": "7.1 Varianta A (základní)\n\nProcvičení minima/maxima:\n\nNapište funkci, která vrátí minimum a maximum najednou\nNajděte druhé nejmenší číslo v seznamu\n\nPrvočísla\n\nNapište program, který zjistí, zda je číslo prvočíslo\nNápověda:\n\nn = int(input(\"Zadej číslo: \"))\nje_prvocislo = True\n\n# Zkusit dělit všemi čísly od 2 do n-1\nfor i in range(2, n):\n    if n % i == 0:  # Je dělitelné?\n        je_prvocislo = False\n        break\n\nif je_prvocislo:\n    print(f\"{n} je prvočíslo\")\nelse:\n    print(f\"{n} není prvočíslo\")"
  },
  {
    "objectID": "lessons/lesson_05.html#varianta-b-pokročilá",
    "href": "lessons/lesson_05.html#varianta-b-pokročilá",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "7.2 Varianta B (pokročilá)",
    "text": "7.2 Varianta B (pokročilá)\n\nVšechna prvočísla do 100 - najděte všechna prvočísla v rozsahu\nImplementujte oba třídící algoritmy a porovnejte, který je čitelnější\nK-té nejmenší číslo - najděte třetí nejmenší číslo v seznamu"
  },
  {
    "objectID": "lessons/lesson_05.html#varianta-c-výzva",
    "href": "lessons/lesson_05.html#varianta-c-výzva",
    "title": "Lekce 5: Tvorba jednoduchého algoritmu",
    "section": "7.3 Varianta C (výzva)",
    "text": "7.3 Varianta C (výzva)\n\nEratosthenovo síto - velmi rychlý algoritmus pro hledání prvočísel:\nn = 100\nje_prvocislo = [True] * (n + 1)\nje_prvocislo[0] = je_prvocislo[1] = False\n\n# Implementujte Eratosthenovo síto...\nVlastní třídící algoritmus - vymyslete úplně jiný způsob třídění"
  },
  {
    "objectID": "lessons/lesson_07.html",
    "href": "lessons/lesson_07.html",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "",
    "text": "Po absolvování této lekce budete umět:\n\nOtevírat textové soubory pomocí open()\nČíst obsah souborů (read(), readlines())\nZapisovat do souborů\nPoužívat with statement pro bezpečnou práci se soubory\nZpracovávat řádky textu pomocí .strip() a .split()\nPracovat s encoding (UTF-8)\nAplikovat funkce z math_utils na data ze souborů\n\nČasová dotace: 90 minut"
  },
  {
    "objectID": "lessons/lesson_07.html#motivace",
    "href": "lessons/lesson_07.html#motivace",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "2.1 Motivace",
    "text": "2.1 Motivace\nDosud jsme pracovali s daty, která jsme psali přímo do kódu:\nmesta = [\"Praha\", \"Brno\", \"Ostrava\"]\nProblém: - Co když máme 100 měst? 1000? - Co když chceme data aktualizovat? - Co když data přicházejí odjinud (Excel, databáze, web)?\nŘešení: Načítat data ze souborů!"
  },
  {
    "objectID": "lessons/lesson_07.html#kde-použijeme-práci-se-soubory",
    "href": "lessons/lesson_07.html#kde-použijeme-práci-se-soubory",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "2.2 Kde použijeme práci se soubory?",
    "text": "2.2 Kde použijeme práci se soubory?\n\nNačítání dat - tabulky, seznamy, konfigurace\nExport výsledků - uložení analýz, reportů\nLogování - záznam průběhu programu\nGIS workflow - export atributových tabulek, import dat do ArcGIS\n\n\n\n\n\n\n\nNotePreview ArcPy\n\n\n\nV GIS často: - Exportujete atributovou tabulku do CSV - Zpracujete ji v Pythonu - Importujete zpět do ArcGIS\nToto je běžný workflow!"
  },
  {
    "objectID": "lessons/lesson_07.html#příprava---ukázkový-soubor",
    "href": "lessons/lesson_07.html#příprava---ukázkový-soubor",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "3.1 Příprava - ukázkový soubor",
    "text": "3.1 Příprava - ukázkový soubor\nVytvořte soubor mesta.txt s tímto obsahem:\nPraha 1300000\nBrno 380000\nOstrava 290000\nPlzeň 170000\nLiberec 103000\nKaždý řádek obsahuje: název města (mezera) populace"
  },
  {
    "objectID": "lessons/lesson_07.html#otevření-souboru---funkce-open",
    "href": "lessons/lesson_07.html#otevření-souboru---funkce-open",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "3.2 Otevření souboru - funkce open()",
    "text": "3.2 Otevření souboru - funkce open()\nsoubor = open(\"mesta.txt\", \"r\")\nParametry: - První parametr: cesta k souboru - Druhý parametr: režim - \"r\" = read (čtení) - \"w\" = write (zápis) - \"a\" = append (přidání na konec)\n\n\n\n\n\n\nWarningPozor na cestu k souboru!\n\n\n\nPokud neuvedete plnou cestu, Python hledá soubor v aktuálním adresáři (kde je váš .py soubor).\nPlná cesta:\nsoubor = open(\"C:/Projekty/data/mesta.txt\", \"r\")\nRelativní cesta (doporučeno):\nsoubor = open(\"mesta.txt\", \"r\")  # V aktuální složce\nsoubor = open(\"data/mesta.txt\", \"r\")  # V podsložce data/"
  },
  {
    "objectID": "lessons/lesson_07.html#čtení-celého-souboru---read",
    "href": "lessons/lesson_07.html#čtení-celého-souboru---read",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "3.3 Čtení celého souboru - read()",
    "text": "3.3 Čtení celého souboru - read()\nsoubor = open(\"mesta.txt\", \"r\")\nobsah = soubor.read()\nprint(obsah)\nsoubor.close()  # DŮLEŽITÉ - zavřít soubor!\nVýsledek:\nPraha 1300000\nBrno 380000\nOstrava 290000\nPlzeň 170000\nLiberec 103000"
  },
  {
    "objectID": "lessons/lesson_07.html#čtení-po-řádcích---readlines",
    "href": "lessons/lesson_07.html#čtení-po-řádcích---readlines",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "3.4 Čtení po řádcích - readlines()",
    "text": "3.4 Čtení po řádcích - readlines()\nsoubor = open(\"mesta.txt\", \"r\")\nradky = soubor.readlines()\nsoubor.close()\n\nprint(radky)\nVýsledek:\n['Praha 1300000\\n', 'Brno 380000\\n', 'Ostrava 290000\\n', 'Plzeň 170000\\n', 'Liberec 103000\\n']\n\n\n\n\n\n\nTipVšimněte si \\n\n\n\n\n\\n je znak pro nový řádek. Budeme ho muset odstranit pomocí .strip()!"
  },
  {
    "objectID": "lessons/lesson_07.html#with-statement---bezpečnější-způsob",
    "href": "lessons/lesson_07.html#with-statement---bezpečnější-způsob",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "3.5 with statement - bezpečnější způsob",
    "text": "3.5 with statement - bezpečnější způsob\nProblém: Můžete zapomenout zavřít soubor pomocí .close()\nŘešení: Použijte with statement:\nwith open(\"mesta.txt\", \"r\") as soubor:\n    radky = soubor.readlines()\n    \n# Tady je soubor už automaticky zavřený!\nprint(radky)\nVýhody: - Soubor se automaticky zavře na konci bloku - Bezpečnější - soubor se zavře i při chybě - Čitelnější kód\n\n\n\n\n\n\nImportantDoporučení\n\n\n\nVždy používejte with statement pro práci se soubory!"
  },
  {
    "objectID": "lessons/lesson_07.html#odstranění-bílých-znaků---strip",
    "href": "lessons/lesson_07.html#odstranění-bílých-znaků---strip",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "4.1 Odstranění bílých znaků - strip()",
    "text": "4.1 Odstranění bílých znaků - strip()\nradek = \"Praha 1300000\\n\"\ncisty_radek = radek.strip()\nprint(cisty_radek)  # \"Praha 1300000\"\nCo strip() odstraňuje: - \\n - nový řádek - \\t - tabulátor - Mezery na začátku a konci"
  },
  {
    "objectID": "lessons/lesson_07.html#rozdělení-řetězce---split",
    "href": "lessons/lesson_07.html#rozdělení-řetězce---split",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "4.2 Rozdělení řetězce - split()",
    "text": "4.2 Rozdělení řetězce - split()\nradek = \"Praha 1300000\"\ncasti = radek.split()  # Rozdělí podle mezer\nprint(casti)  # ['Praha', '1300000']\n\nmesto = casti[0]       # \"Praha\"\npopulace = casti[1]    # \"1300000\" (STRING!)\n\n\n\n\n\n\nWarningsplit() vrací STRINGY!\n\n\n\npopulace = casti[1]         # \"1300000\" (string)\npopulace_cislo = int(casti[1])  # 1300000 (int)\nPokud chcete číslo, musíte převést pomocí int() nebo float()!\n\n\n\n4.2.1 split() s konkrétním separátorem\n# CSV (hodnoty oddělené čárkou)\nradek = \"Praha,1300000,CZ\"\ncasti = radek.split(\",\")\nprint(casti)  # ['Praha', '1300000', 'CZ']\n\n# Oddělení středníkem\nradek = \"Praha;1300000;CZ\"\ncasti = radek.split(\";\")"
  },
  {
    "objectID": "lessons/lesson_07.html#zadání",
    "href": "lessons/lesson_07.html#zadání",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "5.1 Zadání",
    "text": "5.1 Zadání\nMáte soubor mesta.txt:\nPraha 1300000\nBrno 380000\nOstrava 290000\nPlzeň 170000\nLiberec 103000\nÚkoly: 1. Načíst soubor 2. Vypsat všechna města s populací &gt; 200 000 3. Spočítat celkovou populaci všech měst 4. Najít město s nejvyšší populací"
  },
  {
    "objectID": "lessons/lesson_07.html#řešení-krok-za-krokem",
    "href": "lessons/lesson_07.html#řešení-krok-za-krokem",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "5.2 Řešení krok za krokem",
    "text": "5.2 Řešení krok za krokem\n\n5.2.1 Krok 1: Načtení a výpis\nwith open(\"mesta.txt\", \"r\", encoding=\"utf-8\") as soubor:\n    radky = soubor.readlines()\n\nfor radek in radky:\n    print(radek.strip())\n\n\n\n\n\n\nNoteencoding=“utf-8”\n\n\n\nUTF-8 je standard pro kódování českých znaků (čšřžý…).\nVždy přidávejte encoding=\"utf-8\" při práci s českými texty:\nopen(\"soubor.txt\", \"r\", encoding=\"utf-8\")\n\n\n\n\n5.2.2 Krok 2: Zpracování každého řádku\nwith open(\"mesta.txt\", \"r\", encoding=\"utf-8\") as soubor:\n    for radek in soubor:\n        radek = radek.strip()  # Odstranit \\n\n        \n        if radek:  # Pokud není prázdný\n            casti = radek.split()  # Rozdělit\n            mesto = casti[0]\n            populace = int(casti[1])  # Převést na int!\n            \n            print(f\"{mesto}: {populace:,} obyvatel\")\nVýsledek:\nPraha: 1,300,000 obyvatel\nBrno: 380,000 obyvatel\nOstrava: 290,000 obyvatel\nPlzeň: 170,000 obyvatel\nLiberec: 103,000 obyvatel\n\n\n5.2.3 Krok 3: Filtrace měst nad 200 000\nwith open(\"mesta.txt\", \"r\", encoding=\"utf-8\") as soubor:\n    for radek in soubor:\n        radek = radek.strip()\n        \n        if radek:\n            casti = radek.split()\n            mesto = casti[0]\n            populace = int(casti[1])\n            \n            if populace &gt; 200000:\n                print(f\"{mesto}: {populace:,}\")\nVýsledek:\nPraha: 1,300,000\nBrno: 380,000\nOstrava: 290,000\n\n\n5.2.4 Krok 4: Celková populace\ncelkova_populace = 0\n\nwith open(\"mesta.txt\", \"r\", encoding=\"utf-8\") as soubor:\n    for radek in soubor:\n        radek = radek.strip()\n        \n        if radek:\n            casti = radek.split()\n            populace = int(casti[1])\n            celkova_populace += populace\n\nprint(f\"Celková populace: {celkova_populace:,}\")\n\n\n5.2.5 Krok 5: Město s nejvyšší populací\nmax_mesto = \"\"\nmax_populace = 0\n\nwith open(\"mesta.txt\", \"r\", encoding=\"utf-8\") as soubor:\n    for radek in soubor:\n        radek = radek.strip()\n        \n        if radek:\n            casti = radek.split()\n            mesto = casti[0]\n            populace = int(casti[1])\n            \n            if populace &gt; max_populace:\n                max_populace = populace\n                max_mesto = mesto\n\nprint(f\"Největší město: {max_mesto} ({max_populace:,})\")"
  },
  {
    "objectID": "lessons/lesson_07.html#vytvoření-nového-souboru",
    "href": "lessons/lesson_07.html#vytvoření-nového-souboru",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "6.1 Vytvoření nového souboru",
    "text": "6.1 Vytvoření nového souboru\nwith open(\"vysledky.txt\", \"w\", encoding=\"utf-8\") as soubor:\n    soubor.write(\"Výsledky analýzy měst\\n\")\n    soubor.write(\"=\" * 30 + \"\\n\")\n    soubor.write(\"Praha: 1300000\\n\")\n\n\n\n\n\n\nWarningRežim “w” PŘEPÍŠE soubor!\n\n\n\nPokud soubor existuje, \"w\" ho VYMAŽE a začne nový:\n# První spuštění:\nwith open(\"test.txt\", \"w\") as f:\n    f.write(\"První text\\n\")\n\n# Druhé spuštění - PŘEPÍŠE!\nwith open(\"test.txt\", \"w\") as f:\n    f.write(\"Druhý text\\n\")\n\n# Výsledek: \"Druhý text\" (první text je pryč!)"
  },
  {
    "objectID": "lessons/lesson_07.html#přidání-na-konec---režim-a",
    "href": "lessons/lesson_07.html#přidání-na-konec---režim-a",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "6.2 Přidání na konec - režim “a”",
    "text": "6.2 Přidání na konec - režim “a”\nwith open(\"vysledky.txt\", \"a\", encoding=\"utf-8\") as soubor:\n    soubor.write(\"Brno: 380000\\n\")"
  },
  {
    "objectID": "lessons/lesson_07.html#praktický-příklad---export-výsledků",
    "href": "lessons/lesson_07.html#praktický-příklad---export-výsledků",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "6.3 Praktický příklad - export výsledků",
    "text": "6.3 Praktický příklad - export výsledků\n# Analýza\nvelka_mesta = []\n\nwith open(\"mesta.txt\", \"r\", encoding=\"utf-8\") as soubor:\n    for radek in soubor:\n        radek = radek.strip()\n        if radek:\n            casti = radek.split()\n            mesto = casti[0]\n            populace = int(casti[1])\n            \n            if populace &gt; 200000:\n                velka_mesta.append((mesto, populace))\n\n# Export výsledků\nwith open(\"velka_mesta.txt\", \"w\", encoding=\"utf-8\") as soubor:\n    soubor.write(\"Města s populací nad 200 000\\n\")\n    soubor.write(\"=\" * 40 + \"\\n\\n\")\n    \n    for mesto, populace in velka_mesta:\n        soubor.write(f\"{mesto}: {populace:,} obyvatel\\n\")\n\nprint(\"Výsledky uloženy do velka_mesta.txt\")"
  },
  {
    "objectID": "lessons/lesson_07.html#příklad-prvočísla-ze-souboru",
    "href": "lessons/lesson_07.html#příklad-prvočísla-ze-souboru",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "7.1 Příklad: Prvočísla ze souboru",
    "text": "7.1 Příklad: Prvočísla ze souboru\nSoubor cisla.txt:\n2\n17\n20\n23\n100\nProgram:\nimport math_utils\n\n# Načíst čísla ze souboru\ncisla = []\nwith open(\"cisla.txt\", \"r\") as soubor:\n    for radek in soubor:\n        radek = radek.strip()\n        if radek:\n            cisla.append(int(radek))\n\n# Najít prvočísla\nprvocisla = []\nfor cislo in cisla:\n    if math_utils.je_prvocislo(cislo):\n        prvocisla.append(cislo)\n\n# Uložit výsledky\nwith open(\"prvocisla.txt\", \"w\") as soubor:\n    soubor.write(\"Prvočísla ze vstupu:\\n\")\n    for p in prvocisla:\n        soubor.write(f\"{p}\\n\")\n\nprint(f\"Nalezeno {len(prvocisla)} prvočísel\")"
  },
  {
    "objectID": "lessons/lesson_07.html#cvičení-1-statistiky-měst",
    "href": "lessons/lesson_07.html#cvičení-1-statistiky-měst",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "8.1 Cvičení 1: Statistiky měst",
    "text": "8.1 Cvičení 1: Statistiky měst\nPoužijte soubor mesta.txt a vytvořte program, který:\n\nSpočítá průměrnou populaci\nNajde medián (použijte math_utils.bubble_sort() pro seřazení!)\nUloží statistiky do souboru statistiky.txt ve formátu:\n\nStatistiky měst\n===============\nPočet měst: 5\nCelková populace: 2,243,000\nPrůměrná populace: 448,600\nMedián: 290,000\nNejvětší město: Praha (1,300,000)\nNejmenší město: Liberec (103,000)"
  },
  {
    "objectID": "lessons/lesson_07.html#cvičení-2-filtrace-a-export",
    "href": "lessons/lesson_07.html#cvičení-2-filtrace-a-export",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "8.2 Cvičení 2: Filtrace a export",
    "text": "8.2 Cvičení 2: Filtrace a export\nVytvořte program, který:\n\nNačte mesta.txt\nVytvoří DVA nové soubory:\n\nvelka_mesta.txt - města nad 200 000\nmala_mesta.txt - města pod 200 000\n\nKaždý soubor má formát:\n\nVelká města (populace &gt; 200 000)\n================================\nPraha: 1,300,000\nBrno: 380,000\n..."
  },
  {
    "objectID": "lessons/lesson_07.html#co-jsme-se-naučili",
    "href": "lessons/lesson_07.html#co-jsme-se-naučili",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "9.1 Co jsme se naučili",
    "text": "9.1 Co jsme se naučili\n✅ open() - otevírání souborů s různými režimy\n✅ read(), readlines() - čtení obsahu\n✅ write() - zápis do souborů\n✅ with statement - bezpečná práce se soubory\n✅ strip() - odstranění bílých znaků\n✅ split() - rozdělení řetězce\n✅ encoding=“utf-8” - správné kódování češtiny\n✅ Propojení s funkcemi - použití math_utils na data ze souborů"
  },
  {
    "objectID": "lessons/lesson_07.html#co-bude-příště",
    "href": "lessons/lesson_07.html#co-bude-příště",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "9.2 Co bude příště?",
    "text": "9.2 Co bude příště?\nV příští lekci:\n\nCSV formát - Comma-Separated Values\nModul csv - profesionální práce s CSV\ncsv.reader() a csv.DictReader()\nSložitější tabulky - více sloupců, hlavičky\nPropojení s GIS - atributové tabulky jako CSV"
  },
  {
    "objectID": "lessons/lesson_07.html#varianta-a-základní",
    "href": "lessons/lesson_07.html#varianta-a-základní",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "10.1 Varianta A (základní)",
    "text": "10.1 Varianta A (základní)\nVytvořte soubor teploty.txt:\nPondělí 15\nÚterý 18\nStředa 22\nČtvrtek 19\nPátek 16\nNapište program, který: 1. Načte data 2. Spočítá průměrnou teplotu 3. Najde den s nejvyšší teplotou 4. Uloží výsledky do vysledky_teploty.txt"
  },
  {
    "objectID": "lessons/lesson_07.html#varianta-b-pokročilá",
    "href": "lessons/lesson_07.html#varianta-b-pokročilá",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "10.2 Varianta B (pokročilá)",
    "text": "10.2 Varianta B (pokročilá)\nVytvořte soubor okresy.txt:\nPraha 1300000 496\nBrno 380000 230\nOstrava 290000 214\nPlzeň 170000 261\nFormát: Název Populace Rozloha (všechny hodnoty oddělené mezerami)\nNapište program, který: 1. Pro každý okres vypočítá hustotu obyvatel (populace/rozloha) 2. Použije bubble_sort() z math_utils pro seřazení okresů podle hustoty 3. Uloží výsledky do hustota_okresu.txt:\nOkresy seřazené podle hustoty obyvatel\n========================================\nPraha: 2,621 obyvatel/km²\nBrno: 1,652 obyvatel/km²\n..."
  },
  {
    "objectID": "lessons/lesson_07.html#varianta-c-výzva",
    "href": "lessons/lesson_07.html#varianta-c-výzva",
    "title": "Lekce 7: Textové soubory I – Jednoduchá tabulka",
    "section": "10.3 Varianta C (výzva)",
    "text": "10.3 Varianta C (výzva)\n**Vytvořte vlastní modul soubory_utils.py** s funkcemi:\ndef nacti_cisla(nazev_souboru):\n    \"\"\"Načte čísla ze souboru (jedno číslo na řádek).\"\"\"\n    # ...\n\ndef uloz_cisla(nazev_souboru, cisla):\n    \"\"\"Uloží seznam čísel do souboru (jedno na řádek).\"\"\"\n    # ...\n\ndef nacti_tabulku(nazev_souboru):\n    \"\"\"Načte tabulku hodnot oddělených mezerami.\n    Vrátí seznam seznamů.\n    \"\"\"\n    # ...\nPoužijte tyto funkce v hlavním programu pro zpracování dat!"
  }
]